{
  "typeDocJsonParserVersion": "2.3.2",
  "id": 0,
  "name": "@sapphire/async-queue",
  "version": "1.5.0",
  "classes": [
    {
      "id": 1,
      "name": "AsyncQueue",
      "comment": {
        "description": "The AsyncQueue class used to sequentialize burst requests",
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 6,
        "file": "AsyncQueue.ts",
        "path": "lib"
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [],
      "construct": {
        "id": 2,
        "name": "constructor",
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "source": null,
        "parameters": []
      },
      "properties": [
        {
          "id": 8,
          "name": "promises",
          "comment": {
            "description": "The promises array",
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 26,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "AsyncQueueEntry",
              "packageName": null,
              "typeArguments": []
            }
          }
        },
        {
          "id": 7,
          "name": "queued",
          "comment": {
            "description": "The amount of queued entries.",
            "blockTags": [
              {
                "name": "seealso",
                "text": "remaining\n for the count with the head."
              }
            ],
            "modifierTags": []
          },
          "source": {
            "line": 19,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 5,
          "name": "remaining",
          "comment": {
            "description": "The amount of entries in the queue, including the head.",
            "blockTags": [
              {
                "name": "seealso",
                "text": "queued\n for the queued count."
              }
            ],
            "modifierTags": []
          },
          "source": {
            "line": 11,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ],
      "methods": [
        {
          "id": 14,
          "name": "abortAll",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 83,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 15,
              "name": "abortAll",
              "comment": {
                "description": "Aborts all the pending promises.",
                "blockTags": [
                  {
                    "name": "note",
                    "text": "To avoid race conditions, this does **not** unlock the head lock."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        },
        {
          "id": 12,
          "name": "shift",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 65,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 13,
              "name": "shift",
              "comment": {
                "description": "Unlocks the head lock and transfers the next lock (if any) to the head.",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        },
        {
          "id": 9,
          "name": "wait",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 49,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 10,
              "name": "wait",
              "comment": {
                "description": "Waits for last promise and queues a new one",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst queue = new AsyncQueue();\nasync function request(url, options) {\n    await queue.wait({ signal: options.signal });\n    try {\n        const result = await fetch(url, options);\n        // Do some operations with 'result'\n    } finally {\n        // Remove first entry from the queue and resolve for the next entry\n        queue.shift();\n    }\n}\n\nrequest(someUrl1, someOptions1); // Will call fetch() immediately\nrequest(someUrl2, someOptions2); // Will call fetch() after the first finished\nrequest(someUrl3, someOptions3); // Will call fetch() after the second finished\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 11,
                  "name": "options",
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Readonly",
                    "packageName": "typescript",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 16,
                        "name": "AsyncQueueWaitOptions",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "constants": [],
  "enums": [],
  "functions": [],
  "interfaces": [
    {
      "id": 16,
      "name": "AsyncQueueWaitOptions",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 97,
        "file": "AsyncQueue.ts",
        "path": "lib"
      },
      "external": false,
      "properties": [
        {
          "id": 17,
          "name": "signal",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 98,
            "file": "AsyncQueue.ts",
            "path": "lib"
          },
          "readonly": false,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "reference",
                "id": null,
                "name": "AbortSignal",
                "packageName": "@types/node",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    }
  ],
  "namespaces": [],
  "typeAliases": []
}