{
  "typeDocJsonParserVersion": "10.2.0",
  "id": 0,
  "name": "@sapphire/utilities",
  "version": "3.18.2",
  "dependencies": {},
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://raw.githubusercontent.com/sapphiredev/assets/main/banners/SapphireCommunity.png)\n\n# @sapphire/utilities\n\n**Common JavaScript utilities for the Sapphire Community.**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/utilities?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/utilities)\n[![npm](https://img.shields.io/npm/v/@sapphire/utilities?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/utilities)\n\n</div>\n\n**Table of Contents**\n\n-   [Description](#description)\n-   [Features](#features)\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [Javascript Utilities](#javascript-utilities)\n        -   [`arrayStrictEquals`](#arraystrictequals)\n        -   [`chunk`](#chunk)\n        -   [`classExtends`](#classextends)\n        -   [`codeBlock`](#codeblock)\n        -   [`cutText`](#cuttext)\n        -   [`deepClone`](#deepclone)\n        -   [`filterNullAndUndefined`](#filternullandundefined)\n        -   [`filterNullAndUndefinedAndEmpty`](#filternullandundefinedandempty)\n        -   [`filterNullAndUndefinedAndZero`](#filternullandundefinedandzero)\n        -   [`getDeepObjectKeys`](#getdeepobjectkeys)\n        -   [`hasAtLeastOneKeyInMap`](#hasatleastonekeyinmap)\n        -   [`inlineCodeBlock`](#inlinecodeblock)\n        -   [`isClass`](#isclass)\n        -   [`isFunction`](#isfunction)\n        -   [`isNullOrUndefined`](#isnullorundefined)\n        -   [`isNullOrUndefinedOrEmpty`](#isnullorundefinedorempty)\n        -   [`isNullOrUndefinedOrZero`](#isnullorundefinedorzero)\n        -   [`isNumber`](#isnumber)\n        -   [`isObject`](#isobject)\n        -   [`isPrimitive`](#isprimitive)\n        -   [`isThenable`](#isthenable)\n        -   [`lazy`](#lazy)\n        -   [`makeObject`](#makeobject)\n        -   [`mergeDefault`](#mergedefault)\n        -   [`mergeObjects`](#mergeobjects)\n        -   [`noop`](#noop)\n        -   [`objectToTuples`](#objecttotuples)\n        -   [`partition`](#partition)\n        -   [`pickRandom`](#pickrandom)\n        -   [`range`](#range)\n        -   [`regExpEsc`](#regexpesc)\n        -   [`roundNumber`](#roundnumber)\n        -   [`sleep` / `sleepSync`](#sleep--sleepsync)\n        -   [`splitText`](#splittext)\n        -   [`throttle`](#throttle)\n        -   [`toTitleCase`](#totitlecase)\n        -   [`tryParseJSON`](#tryparsejson)\n        -   [`tryParseURL`](#tryparseurl)\n    -   [Typescript Utilities](#typescript-utilities)\n        -   [Functions](#functions)\n            -   [`cast`](#cast)\n            -   [`objectEntries`](#objectentries)\n            -   [`objectKeys`](#objectkeys)\n            -   [`objectValues`](#objectvalues)\n        -   [Types](#types)\n            -   [`Primitive`](#primitive)\n            -   [`Builtin`](#builtin)\n            -   [`DeepReadonly`](#deepreadonly)\n            -   [`DeepRequired`](#deeprequired)\n            -   [`RequiredExcept`](#requiredexcept)\n            -   [`PartialRequired`](#partialrequired)\n            -   [`ArgumentTypes`](#argumenttypes)\n            -   [`Arr`](#arr)\n            -   [`Ctor`](#ctor)\n            -   [`AbstractCtor`](#abstractctor)\n            -   [`Constructor`](#constructor)\n            -   [`AbstractConstructor`](#abstractconstructor)\n            -   [`FirstArgument`](#firstargument)\n            -   [`SecondArgument`](#secondargument)\n            -   [`Awaitable`](#awaitable)\n            -   [`Nullish`](#nullish)\n            -   [`NonNullableProperties`](#nonnullableproperties)\n            -   [`NonNullObject`](#nonnullobject-deprecated)\n            -   [`AnyObject`](#anyobject-deprecated)\n            -   [`PrettifyObject`](#prettifyobject)\n            -   [`PickByValue`](#pickbyvalue)\n            -   [`Mutable`](#mutable)\n            -   [`StrictRequired`](#strictrequired)\n            -   [`ArrayElementType`](#arrayelementtype)\n-   [Buy us some doughnuts](#buy-us-some-doughnuts)\n-   [Contributors](#contributors)\n\n## Description\n\nWe often have a need for a function or type augmentation and having to include it in every repo is a huge drag. To solve this problem there are dozens upon dozens of packages on NPM, but we cannot maintain those in case of issues and a lot of them are poorly written or under-optimised. Our solution is to provide @sapphire/utilities, which is the only package you'll likely need to cover your day-to-day needs.\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/utilities\n```\n\n---\n\n## Usage\n\nYou can import individual utility function from subpath like: @sapphire/utility/isFunction or the entire library.\n\n```ts\nimport { isFunction } from '@sapphire/utilities/isFunction';\n// or\nimport { isFunction } from '@sapphire/utilities';\n```\n\n**Note:** For typescript users, subpath import are only supported in `--moduleResolution node16` and `--moduleResolution nodenext`. More information can be found [in this issue on the microsoft/TypeScript repository](https://github.com/microsoft/TypeScript/issues/50794).\n\n**Note:** While this section uses `require`, the imports match 1:1 with ESM imports. For example `const { arrayStrictEquals } = require('@sapphire/utilities')` equals `import { arrayStrictEquals } from '@sapphire/utilities'`.\n\n### Javascript Utilities\n\n#### `arrayStrictEquals`\n\nCompares if two arrays are strictly equal.\n\n```ts\narrayStrictEquals([1, 2, 3], [1, 2, 3]); // true\narrayStrictEquals([1, 2, 3], [1, 2, 3, 4]); // false\narrayStrictEquals([1, 2, 3], [1, 2, 4]); // false\n```\n\n#### `chunk`\n\nSplits up an array into chunks.\n\n```ts\nchunk([1, 2, 3, 4, 5], 2); // [[1, 2], [3, 4], [5]]\nchunk([1, 2, 3, 4, 5], 3); // [[1, 2, 3], [4, 5]]\n```\n\n#### `classExtends`\n\nChecks whether or not the value class extends the base class.\n\n```ts\nclass A {}\nclass B extends A {}\n\nclassExtends(A, B); // false\nclassExtends(B, A); // true\n```\n\n#### `codeBlock`\n\nWraps text in a markdown codeblock with a language indicator for syntax highlighting.\n\n````ts\ncodeBlock('js', 'const value = \"Hello World!\";'); // ```js\\nconst value = \"Hello World!\";\\n```\n````\n\n#### `cutText`\n\nSplit a text by its latest space character in a range from the character 0 to the selected one.\n\n```ts\ncutText('Lorem Ipsum', 9); // \"Lorem...\"\n```\n\n#### `deepClone`\n\nDeep clones an object.\n\n```ts\nconst obj = { a: 1, b: { c: 2 } };\nconst clone = deepClone(obj); // { a: 1, b: { c: 2 } }\n```\n\n#### `filterNullAndUndefined`\n\nChecks whether a value is not `null` nor `undefined`. This can be used in `Array#filter` to remove `null` and `undefined` from the array type\n\n```ts\n// TypeScript Type: (string | undefined | null)[]\nconst someArray = ['one', 'two', undefined, null, 'five'];\n\n// TypeScript Type: string[]\nconst filteredArray = someArray.filter(filterNullAndUndefined); // ['one', 'two', 'five']\n```\n\n#### `filterNullAndUndefinedAndEmpty`\n\nChecks whether a value is not `null`, `undefined`, or `''` (empty string). This can be used in `Array#filter` to remove `null`, `undefined`, and `''` from the array type\n\n```ts\n// TypeScript Type: (number | string | undefined | null)[]\nconst someArray = [1, 2, undefined, null, ''];\n\n// TypeScript Type: number[]\nconst filteredArray = someArray.filter(filterNullAndUndefinedAndEmpty); // [1, 2]\n```\n\n#### `filterNullAndUndefinedAndZero`\n\nChecks whether a value is not `null`, `undefined`, or `0`. This can be used in `Array#filter` to remove `null`, `undefined`, and `0` from the array type\n\n```ts\n// TypeScript Type: (string | number | undefined | null)[]\nconst someArray = ['one', 'two', undefined, null, 0];\n\n// TypeScript Type: string[]\nconst filteredArray = someArray.filter(filterNullAndUndefinedAndZero); // ['one', 'two']\n```\n\n#### `getDeepObjectKeys`\n\nReturns an array of all the keys of an object, including the keys of nested objects.\n\n```ts\nconst obj = { a: 1, b: { c: 2 }, d: [{ e: 3 }] };\ngetDeepObjectKeys(obj); // ['a', 'b.c', 'd.0.e']\ngetDeepObjectKeys(obj, { arrayKeysIndexStyle: 'braces' }); // ['a', 'bc', 'd[0]e']\ngetDeepObjectKeys(obj, { arrayKeysIndexStyle: 'braces-with-dot' }); // ['a', 'b.c', 'd[0].e']\ngetDeepObjectKeys(obj, { arrayKeysIndexStyle: 'dotted' }); // ['a', 'b.c', 'd.0.e']\n```\n\n#### `hasAtLeastOneKeyInMap`\n\nChecks whether a map has at least one of an array of keys.\n\n```ts\nconst map = new Map([\n\t['a', 1],\n\t['b', 2],\n\t['c', 3]\n]);\n\nhasAtLeastOneKeyInMap(map, ['a', 'd']); // true\nhasAtLeastOneKeyInMap(map, ['d', 'e']); // false\n```\n\n#### `inlineCodeBlock`\n\nWraps text in a markdown inline codeblock.\n\n```ts\ninlineCodeBlock('const value = \"Hello World!\";'); // `const value = \"Hello World!\";`\n```\n\n#### `isClass`\n\nVerifies if the input is a class constructor.\n\n```ts\nclass A {}\n\nisClass(A); // true\nisClass(function () {}); // false\n```\n\n#### `isFunction`\n\nVerifies if the input is a function.\n\n```ts\nisFunction(function () {}); // true\nisFunction('foo'); // false\n```\n\n#### `isNullOrUndefined`\n\nChecks whether a value is `null` or `undefined`.\n\n```ts\nisNullOrUndefined(null); // true\nisNullOrUndefined(undefined); // true\nisNullOrUndefined(1); // false\n```\n\n#### `isNullOrUndefinedOrEmpty`\n\nChecks whether a value is `null`, `undefined`, or `''` (empty string).\n\n```ts\nisNullOrUndefinedOrEmpty(null); // true\nisNullOrUndefinedOrEmpty(undefined); // true\nisNullOrUndefinedOrEmpty(''); // true\nisNullOrUndefinedOrEmpty(1); // false\n```\n\n#### `isNullOrUndefinedOrZero`\n\nChecks whether a value is `null`, `undefined`, or `0`.\n\n```ts\nisNullOrUndefinedOrZero(null); // true\nisNullOrUndefinedOrZero(undefined); // true\nisNullOrUndefinedOrZero(0); // true\nisNullOrUndefinedOrZero(1); // false\n```\n\n#### `isNumber`\n\nVerifies if the input is a number.\n\n```ts\nisNumber(1); // true\nisNumber('1'); // false\n```\n\n#### `isObject`\n\nVerifies if the input is an object.\n\n```ts\nisObject({}); // true\nisObject([]); // true\nisObject('foo'); // false\n```\n\n#### `isPrimitive`\n\nVerifies if the input is a primitive.\n\n```ts\nisPrimitive(1); // true\nisPrimitive('1'); // true\nisPrimitive({}); // false\n```\n\n#### `isThenable`\n\nVerifies if an object is a promise.\n\n```ts\nisThenable({}); // false\nisThenable(Promise.resolve()); // true\n```\n\n#### `lazy`\n\nLazily creates a constant or load a module and caches it internally.\n\n```ts\nlet timesCalled = 0;\nconst lazyValue = lazy(() => {\n\ttimesCalled++;\n\treturn 'foo';\n});\n\nlazyValue(); // 'foo'\nlazyValue(); // 'foo' - cached\n\ntimesCalled; // 1\n```\n\n#### `makeObject`\n\nTurn a dotted path into a json object.\n\n```ts\nmakeObject('a.b.c', 1); // { a: { b: { c: 1 } } }\n```\n\n#### `mergeDefault`\n\nDeep merges two objects. Properties from the second parameter are applied to the first.\n\n```ts\nconst base = { a: 1, b: { c: 2 } };\nconst overwritten = { b: { d: 3 } };\n\nmergeDefault(base, overwritten);\noverwritten; // { a: 1, b: { c: 2, d: 3 } }\n```\n\n#### `mergeObjects`\n\nMerges two objects.\n\n```ts\nconst source = { a: 1, b: 2 };\nconst target = { c: 4 };\n\nmergeObjects(source, target);\ntarget; // { a: 1, b: 2, c: 4 }\n```\n\n#### `noop`\n\nA no-operation function.\n\n```ts\nnoop(); // undefined\n\n// Example usage of ignoring a promise rejection\nPromise.reject().catch(noop);\n```\n\n#### `objectToTuples`\n\nConverts an object to a tuple with string paths.\n\n```ts\nconst obj = { a: 1, b: { c: 2 } };\nobjectToTuples(obj); // [['a', 1], ['b.c', 2]]\n```\n\n#### `partition`\n\nPartitions an array into a tuple of two arrays, where one array contains all elements that satisfies the predicate, and the other contains all elements that do not satisfy the predicate.\n\n```ts\nconst arr = [1, 2, 3, 4, 5];\nconst [evens, odds] = partition(arr, (n) => n % 2 === 0);\n\nevens; // [2, 4]\nodds; // [1, 3, 5]\n```\n\n#### `pickRandom`\n\nPicks a random element from an array.\n\n```ts\nconst arr = [1, 2, 3, 4, 5];\npickRandom(arr); // 3\n```\n\n#### `range`\n\nGet an array of numbers with the selected range, considering a specified step.\n\n```ts\nrange(1, 4, 1); // [1, 2, 3, 4]\nrange(1, 4, 2); // [1, 3]\nrange(4, 1, -1); // [4, 3, 2, 1]\nrange(4, 1, -2); // [4, 2]\n```\n\n#### `regExpEsc`\n\nCleans a string from regex injection by escaping special characters.\n\n```ts\nregExpEsc('foo.bar?'); // 'foo\\\\.bar\\\\?'\n```\n\n#### `roundNumber`\n\nProperly rounds up or down a number. Also supports strings using an exponent to indicate large or small numbers.\n\n```ts\nroundNumber(1.9134658034); // 1\nroundNumber(1.9134658034, 2); // 1.91\nroundNumber('10e-5'); // 0\n```\n\n#### `sleep` / `sleepSync`\n\nSleeps for the specified number of milliseconds.\n\n```ts\nawait sleep(1000); // Sleeps for 1 second\nsleepSync(1000); // Sleeps for 1 second\n```\n\n#### `splitText`\n\nSplit a string by its latest space character in a range from the character 0 to the selected one.\n\n```ts\nsplitText('Hello All People!', 8); // 'Hello'\nsplitText('Hello All People!', 10); // 'Hello All'\n```\n\n#### `throttle`\n\nCreates a throttled function that only invokes a function at most once per every x milliseconds. The throttled function comes with a flush method to reset the last time the throttled function was invoked.\n\n```ts\nconst throttled = throttle(() => console.log('throttled'), 1000);\n\nthrottled(); // 'throttled'\nthrottled(); // nothing\nthrottled.flush();\nthrottled(); // 'throttled'\n```\n\n#### `toTitleCase`\n\nConverts a string to Title Case. This is designed to also ensure common Discord PascalCased strings are put in their TitleCase variants.\n\n```ts\ntoTitleCase('foo bar'); // 'Foo Bar'\ntoTitleCase('textchannel'); // 'TextChannel'\ntoTitleCase('onetwo three', { onetwo: 'OneTwo' }); // OneTwo Three\n```\n\n#### `tryParseJSON`\n\nTries to parse a string as JSON.\n\n```ts\ntryParseJSON('{\"foo\": \"bar\"}'); // { foo: 'bar' }\ntryParseJSON('{\"foo\": \"bar\"' /* invalid */); // '{\"foo\": \"bar\"'\n```\n\n#### `tryParseURL`\n\nTries to parse a string as a URL.\n\n```ts\ntryParseURL('https://google.com'); // URL object\ntryParseURL('hello there :)'); // null\n```\n\n### Typescript Utilities\n\nA subset of our utilities are intended specifically for typescript users.\n\n#### Functions\n\n##### `cast`\n\nCasts any value to `T`. Note that this function is not type-safe, and may cause runtime errors if used incorrectly.\n\n```ts\nconst value = cast<string>(1); // value is now of type string\n```\n\n##### `objectEntries`\n\nA strongly-typed alternative to `Object.entries`.\n\n```ts\nconst obj = { a: 1, b: 2 } as const;\n\nconst native = Object.entries(obj); // [string, number][]\nconst strict = objectEntries(obj); // [['a', 1], ['b', 2]]\n```\n\n##### `objectKeys`\n\nA strongly-typed alternative to `Object.keys`.\n\n```ts\nconst obj = { a: 1, b: 2 } as const;\n\nconst native = Object.keys(obj); // string[]\nconst strict = objectKeys(obj); // ['a', 'b']\n```\n\n##### `objectValues`\n\nA strongly-typed alternative to `Object.values`.\n\n```ts\nconst obj = { a: 1, b: 2 } as const;\n\nconst native = Object.values(obj); // number[]\nconst strict = objectValues(obj); // [1, 2]\n```\n\n#### Types\n\n##### `Primitive`\n\nA union of all primitive types.\n\n```ts\n// string | number | bigint | boolean | symbol | undefined | null\ndeclare const primitive: Primitive;\n```\n\n##### `Builtin`\n\nA union of all builtin types.\n\n```ts\n// Primitive | Function | Date | Error | RegExp\ndeclare const builtin: Builtin;\n```\n\n##### `DeepReadonly`\n\nMakes all properties in `T` readonly recursively.\n\n```ts\ntype Foo = Set<{ bar?: ['foo', { hello: 'world' }] }>;\n\n// ReadonlySet<{\n//     readonly bar?: readonly [\"foo\", {\n//         readonly hello: \"world\";\n//     }] | undefined;\n// }>\ndeclare const foo: DeepReadonly<Foo>;\n```\n\n##### `DeepRequired`\n\nMakes all properties in `T` required recursively.\n\n```ts\ntype Foo = Set<{ bar?: Promise<{ baz?: string }>[] }>;\n\n// Set<{ bar: Promise<{ baz: string }>[] }>\ndeclare const foo: DeepRequired<Foo>;\n```\n\n##### `RequiredExcept`\n\nMakes all properties in `T` required except for the ones specified in `K`.\n\n```ts\ninterface Foo {\n\tbar?: string;\n\tbaz?: number;\n}\n\n// { bar?: string; baz: number }\ndeclare const foo: RequiredExcept<Foo, 'bar'>;\n```\n\n##### `PartialRequired`\n\nMakes all properties in `T` that are assignable to `K` required.\n\n```ts\ninterface Foo {\n\tbar?: string;\n\tbaz?: number;\n}\n\n// { bar: string; baz?: number }\ndeclare const foo: PartialRequired<Foo, 'bar'>;\n```\n\n##### `ArgumentTypes`\n\nExtracts the argument types of a function type.\n\n```ts\ntype Foo = (bar: string, baz: number) => void;\n\n// [string, number]\ndeclare const foo: ArgumentTypes<Foo>;\n```\n\n##### `Arr`\n\nA type that represents a readonly array of `any`.\n\n```ts\n// readonly any[]\ndeclare const arr: Arr;\n```\n\n##### `Ctor`\n\nA constructor with parameters.\n\n```ts\n// new (...args: any[]) => any\ndeclare const foo: Ctor;\n\n// new (...args: [string, number]) => SomeClass\ndeclare const bar: Ctor<[string, number], SomeClass>;\n```\n\n##### `AbstractCtor`\n\nAn abstract constructor with parameters.\n\n```ts\n// abstract new (...args: any[]) => any\ndeclare const foo: AbstractCtor;\n\n// abstract new (...args: [string, number]) => SomeClass\ndeclare const bar: AbstractCtor<[string, number], SomeClass>;\n```\n\n##### `Constructor`\n\nA constructor without parameters.\n\n```ts\n// new (...args: any[]) => any\ndeclare const foo: Constructor;\n\n// new (...args: any[]) => SomeClass\ndeclare const bar: Constructor<SomeClass>;\n```\n\n##### `AbstractConstructor`\n\nAn abstract constructor without parameters.\n\n```ts\n// abstract new (...args: any[]) => any\ndeclare const foo: AbstractConstructor;\n\n// abstract new (...args: any[]) => SomeClass\ndeclare const bar: AbstractConstructor<SomeClass>;\n```\n\n##### `FirstArgument`\n\nExtracts the first argument of a function type.\n\n```ts\ntype Foo = (bar: string, baz: number) => void;\n\n// string\ndeclare const foo: FirstArgument<Foo>;\n```\n\n##### `SecondArgument`\n\nExtracts the second argument of a function type.\n\n```ts\ntype Foo = (bar: string, baz: number) => void;\n\n// number\ndeclare const foo: SecondArgument<Foo>;\n```\n\n##### `Awaitable`\n\nA type that represents a value or a promise of a value. Useful for functions that can accept both promises and non-promises.\n\n```ts\n// string | Promise<string>\ndeclare const foo: Awaitable<string>;\n```\n\n##### `Nullish`\n\nA type that represents `null` or `undefined`.\n\n```ts\n// null | undefined\ndeclare const foo: Nullish;\n```\n\n##### `NonNullableProperties`\n\nRemoves all properties of `T` that are not `null` or `undefined`.\n\n```ts\ninterface Foo {\n\tfoo: null;\n\tbar: undefined;\n\tbaz: boolean;\n}\n\n// { baz: boolean }\ndeclare const foo: NonNullableProperties<Foo>;\n```\n\n##### `NonNullObject` (deprecated)\n\nA type that represents an object that is not `null` or `undefined`.\n\n```ts\n// ✅\nconst foo: NonNullObject = {};\n\n// ❌\nconst bar: NonNullObject = null;\n\n// ❌\nconst baz: NonNullObject = undefined;\n```\n\n##### `AnyObject` (deprecated)\n\nAn object that can have any structure. Similar to `NonNullObject`, and to be used as an alternative if the aforementioned type leads to unexpected behaviors.\n\n```ts\n// ✅\nconst foo: AnyObject = {};\n\n// ❌\nconst bar: AnyObject = null;\n\n// ❌\nconst baz: AnyObject = undefined;\n```\n\n##### `PrettifyObject`\n\nAn utility type that fuses intersections of objects.\n\n```ts\ntype Objects = {\n  foo: string;\n  bar: number;\n} & {\n  hello: boolean;\n  world: bigint;\n};\n\ntype PrettyObjects = PrettifyObject<Objects>;\n// {\n//   foo: string;\n//   bar: number;\n//   hello: boolean;\n//   world: bigint\n// }\n```\n\n##### `PickByValue`\n\nPicks keys from `T` who's values are assignable to `V`.\n\n```ts\ninterface Foo {\n\tfoo: string;\n\tbar: number;\n\tbaz: boolean;\n}\n\n// 'foo' | 'bar'\ndeclare const foo: PickByValue<Foo, string | number>;\n```\n\n##### `Mutable`\n\nMakes all properties in `T` mutable.\n\n```ts\ninterface Foo {\n\treadonly bar: string;\n\treadonly baz: readonly number][];\n}\n\n// { bar: string; baz: number[] }\ndeclare const foo: Mutable<Foo>;\n```\n\n##### `StrictRequired`\n\nMakes all properties in `T` strictly required by removing `undefined` and `null` from value types.\n\n```ts\ninterface Foo {\n\tbar: string | undefined;\n\tbaz?: number | null;\n}\n\n// { bar: string; baz: number }\ndeclare const foo: StrictRequired<Foo>;\n```\n\n##### `ArrayElementType`\n\nGets a union type of all the keys that are in an array.\n\n```ts\nconst sample = [1, 2, '3', true];\n\n// string | number | boolean\ndeclare const foo: ArrayElementType<typeof sample>;\n```\n\n---\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/utilities@3.18.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.18.1...@sapphire/utilities@3.18.2) - (2025-01-29)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Ensure consistent typing for `objectEntries`, `objectKeys` and `objectValues` ([598c24a](https://github.com/sapphiredev/utilities/commit/598c24a313d5b442c94304f0a9ff73b2782fb982)) ([#857](https://github.com/sapphiredev/utilities/pull/857) by @GeniusTimo)\n\n# [@sapphire/utilities@3.18.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.17.0...@sapphire/utilities@3.18.0) - (2024-11-02)\n\n## 🏠 Refactor\n\n- Deprecate `NonNullObject` and `AnyObject` ([0dce7d6](https://github.com/sapphiredev/utilities/commit/0dce7d6332acad34b49a7aa780371a4d35748774)) ([#821](https://github.com/sapphiredev/utilities/pull/821) by @kyranet)\n- **cutText:** Improve algorithm ([db34661](https://github.com/sapphiredev/utilities/commit/db34661f35b54b40c067f54f79a834eb20450256)) ([#820](https://github.com/sapphiredev/utilities/pull/820) by @kyranet)\n- Rewrite `roundNumber` ([1e7d2de](https://github.com/sapphiredev/utilities/commit/1e7d2dece33bb78e3c99bc0944b0e4b105d0effb)) ([#810](https://github.com/sapphiredev/utilities/pull/810) by @kyranet)\n\n## 🐛 Bug Fixes\n\n- Move browser imports ([100ffb0](https://github.com/sapphiredev/utilities/commit/100ffb0a2471bb9f74cc580d282d11059e1a0a68)) ([#826](https://github.com/sapphiredev/utilities/pull/826) by @kyranet)\n\n## 🚀 Features\n\n- **types:** Add `If` and `RequiredIf` ([143375f](https://github.com/sapphiredev/utilities/commit/143375f7f7194347ff071b66dc35a6da5422b6f9)) ([#825](https://github.com/sapphiredev/utilities/pull/825) by @kyranet)\n- Add `PrettifyObject` type ([5ac3f24](https://github.com/sapphiredev/utilities/commit/5ac3f24679bfcc914abd2da5ae460b24197e3458)) ([#822](https://github.com/sapphiredev/utilities/pull/822) by @kyranet)\n- **utilities:** Expose `Arr` to the docs ([997614c](https://github.com/sapphiredev/utilities/commit/997614c68bb6078191cc03fa24642f0ac8efd04b)) ([#780](https://github.com/sapphiredev/utilities/pull/780) by @favna)\n\n# [@sapphire/utilities@3.17.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.16.2...@sapphire/utilities@3.17.0) - (2024-07-23)\n\n## 🏠 Refactor\n\n- **utilities:** Rename `baseVariants` to `toTitleCaseDiscordJsVariants` ([cd7e6b5](https://github.com/sapphiredev/utilities/commit/cd7e6b598e5670312904dda6f630472ae4bd1198)) ([#754](https://github.com/sapphiredev/utilities/pull/754) by @favna)\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([083376a](https://github.com/sapphiredev/utilities/commit/083376aac55094dbeddb5194e8a8f0d794b8cceb)) ([#763](https://github.com/sapphiredev/utilities/pull/763) by @renovate[bot])\n- **deps:** Update all non-major dependencies ([e7fdc5d](https://github.com/sapphiredev/utilities/commit/e7fdc5db3632a7f90292ef3978898da32730343a)) ([#752](https://github.com/sapphiredev/utilities/pull/752) by @renovate[bot])\n\n## 📝 Documentation\n\n- **utilities:** Fix type in README ([11863ec](https://github.com/sapphiredev/utilities/commit/11863ecd68de3ae5ec5bef9c700e917eb3a9ad25)) ([#776](https://github.com/sapphiredev/utilities/pull/776) by @kyranet)\n\n## 🚀 Features\n\n- Add `DeepReadonly` type ([1e73db9](https://github.com/sapphiredev/utilities/commit/1e73db920bfa5413d212839ac817b2b97e0a4ce2)) ([#775](https://github.com/sapphiredev/utilities/pull/775) by @kyranet)\n\n# [@sapphire/utilities@3.16.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.16.1...@sapphire/utilities@3.16.2) - (2024-05-21)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Update re-exports on index level ([902cee8](https://github.com/sapphiredev/utilities/commit/902cee88b1e744d6748aa5c3c2e1c038d9d7dbbc))\n\n# [@sapphire/utilities@3.16.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.16.0...@sapphire/utilities@3.16.1) - (2024-05-21)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed cjs bundle ([f1db3f6](https://github.com/sapphiredev/utilities/commit/f1db3f6e09d67a5d769ee01db60d100f7af75426))\n\n# [@sapphire/utilities@3.16.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.15.3...@sapphire/utilities@3.16.0) - (2024-05-20)\n\n## 📝 Documentation\n\n- **readme:** Fix readme table of contents ([c60e8bd](https://github.com/sapphiredev/utilities/commit/c60e8bd9fc89156cf973871597ec3f0ef0308c08))\n- **utilities:** Fix tsdoc comments for `debounce` ([e9f4de9](https://github.com/sapphiredev/utilities/commit/e9f4de9bca5fb28cddf9c77b6c176fa7686cdaba))\n\n## 🚀 Features\n\n- **utilities:** Add `capitalizeFirstLetter`, `hasAtLeastOneKeyInObject`, and `snakeToCamelCase` (#747) ([014e4e8](https://github.com/sapphiredev/utilities/commit/014e4e8765943fc09d86b75fa347cc68102575b7))\n\n# [@sapphire/utilities@3.15.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.15.3...@sapphire/utilities@3.15.3) - (2024-01-19)\n\n## 🐛 Bug Fixes\n\n- Fixed commonjs typings export mapping (#707) ([216ff02](https://github.com/sapphiredev/utilities/commit/216ff0260d63a9590357f9a5069f1ae2b34eaf5d))\n\n# [@sapphire/utilities@3.15.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.15.2...@sapphire/utilities@3.15.2) - (2024-01-06)\n\n## 🐛 Bug Fixes\n\n- Fixed bun compatibility for @sapphire/utilities (#703) ([ba07362](https://github.com/sapphiredev/utilities/commit/ba07362e08bce895d4ada672d65edb527fcfc26d))\n\n# [@sapphire/utilities@3.15.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.15.1...@sapphire/utilities@3.15.1) - (2023-12-28)\n\n## 📝 Documentation\n\n- **utilities:** Fix tsdoc comments for omitKeysFromObject ([afd7d27](https://github.com/sapphiredev/utilities/commit/afd7d2742fbca4d1c84fa0b6855490ce644a1899))\n\n# [@sapphire/utilities@3.15.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.15.0...@sapphire/utilities@3.15.0) - (2023-12-28)\n\n## 🚀 Features\n\n- **utilities:** Add omitKeysFromObject utility function (#700) ([eccf9f6](https://github.com/sapphiredev/utilities/commit/eccf9f679581d95a7d2b29ae894a6971edcb4cc3))\n\n## 🪞 Styling\n\n- Run prettier on the codebase ([1d6e994](https://github.com/sapphiredev/utilities/commit/1d6e9941833b674eebb245d272ce879ce6a70427))\n\n# [@sapphire/utilities@3.14.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.14.0...@sapphire/utilities@3.14.0) - (2023-12-04)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Properly split CJS, ESM and IIFE ([f9d8c8e](https://github.com/sapphiredev/utilities/commit/f9d8c8ec9b196ef34820a11f2612c8ae7588c0d3))\n- **discord.js-utilities:** Fixed `isNsfwChannel` typeguard by including `ChannelType.GuildMedia` (#665) ([7c6cfe2](https://github.com/sapphiredev/utilities/commit/7c6cfe239ba660fcf4e58a50e7691a2e622c0fda))\n\n## 📝 Documentation\n\n- **utilities:** Improve typedoc ([16c05ea](https://github.com/sapphiredev/utilities/commit/16c05eab3ae464b109b7fbc24364135111c22d98))\n\n## 🚀 Features\n\n- **tryParseJSON:** Support `replacer` argument (#668) ([4cf0978](https://github.com/sapphiredev/utilities/commit/4cf0978ed608a48164af0d5a027b72990f32124b))\n\n# [@sapphire/utilities@3.13.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.12.0...@sapphire/utilities@3.13.0) - (2023-07-21)\n\n## 🏠 Refactor\n\n- **sleep:** Align more closely with the Node.js API. This removes the `AbortError` class, if you were previously using it then check for `instanceof DOMException` and `error.name === 'AbortError'` (#626) ([36cd38f](https://github.com/sapphiredev/utilities/commit/36cd38f75c1cbea4f9a30149e18ea5255fde2be9))\n- **utilities:** Make sleepSync its own file (#615) ([5838b7e](https://github.com/sapphiredev/utilities/commit/5838b7e32e7d0cbf455f259e22c6aeaae5f18ec0))\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies (#607) ([9cc8bd0](https://github.com/sapphiredev/utilities/commit/9cc8bd0d4b5d650deab2c913e6c3d713861bae28))\n\n## 🚀 Features\n\n- **utilities:** Add poll function (#616) ([59d4c6b](https://github.com/sapphiredev/utilities/commit/59d4c6b986f8f363e32ec6297921d999201b0930))\n\n## 🧪 Testing\n\n- **sleepSync:** Use spies for `Date.now()` (#617) ([cf444df](https://github.com/sapphiredev/utilities/commit/cf444df3c4a63ac039de9cf4fe56b86f2068f1e2))\n- **pickRandom:** Add test to cover empty arrays ([b74394a](https://github.com/sapphiredev/utilities/commit/b74394a1a09ce8aaa14f4084e7a1105284e08205))\n\n# [@sapphire/utilities@3.12.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.11.2...@sapphire/utilities@3.12.0) - (2023-06-09)\n\n## 🚀 Features\n\n- **utilities:** Add retry function (#604) ([37dee25](https://github.com/sapphiredev/utilities/commit/37dee25f403fbc7bbe4703651367cbf0cbb1d2aa))\n\n## 🧪 Testing\n\n- Update vitest to coverage v8 ([a4bc6e4](https://github.com/sapphiredev/utilities/commit/a4bc6e4f24ea60143a150ecc76fda6484f172ab9))\n\n# [@sapphire/utilities@3.11.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.11.1...@sapphire/utilities@3.11.2) - (2023-05-06)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Add support for TypedArray to deepClone (#592) ([85dcd15](https://github.com/sapphiredev/utilities/commit/85dcd15fd98fff5bf74749d2cd26963a99c71a75))\n\n# [@sapphire/utilities@3.11.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.11.0...@sapphire/utilities@3.11.1) - (2023-04-10)\n\n## 🏃 Performance\n\n- **chunk:** Remove clone (#574) ([049047b](https://github.com/sapphiredev/utilities/commit/049047b3ceee6fcfeb2e09e15e26424022a5045c))\n\n## 🏠 Refactor\n\n- **utilities:** Improve `codeBlock` and `inlineCodeBlock` (#498) ([29b1e5a](https://github.com/sapphiredev/utilities/commit/29b1e5a21317142ca6cceea5d4eaf65e9243653e))\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies (#577) ([291dd67](https://github.com/sapphiredev/utilities/commit/291dd6783e57d8f075ce566218ba076ef6c4bbbd))\n- **deps:** Update all non-major dependencies (#545) ([40ca040](https://github.com/sapphiredev/utilities/commit/40ca040a21d8a0949682051a3a974538183a400e))\n- **deps:** Update all non-major dependencies (#544) ([cc78f17](https://github.com/sapphiredev/utilities/commit/cc78f17390c7f3db08af92bf46a5a70a9c11dd5f))\n- **deps:** Update all non-major dependencies (#532) ([8033d1f](https://github.com/sapphiredev/utilities/commit/8033d1ff7a5a1974134c61f424f171cccb2915e1))\n- **deps:** Update all non-major dependencies (#514) ([21b07d5](https://github.com/sapphiredev/utilities/commit/21b07d5db529a0d982647a60de98e46f36f1ac93))\n- **deps:** Update all non-major dependencies (#505) ([6178296](https://github.com/sapphiredev/utilities/commit/617829649e1e4deeee02b14533b5377cd5bc1fb3))\n\n## 📝 Documentation\n\n- Add @06000208 as a contributor ([fa3349e](https://github.com/sapphiredev/utilities/commit/fa3349e55ce4ad008785211dec7bf8e2b5d933df))\n- Add @didinele as a contributor ([42ef7b6](https://github.com/sapphiredev/utilities/commit/42ef7b656c48fd0e720119db1d622c8bba2791e9))\n- Add @goestav as a contributor ([0e56a92](https://github.com/sapphiredev/utilities/commit/0e56a92a4e2d0942bfa207f81a8cb03b32312034))\n- Add @CitTheDev as a contributor ([34169ea](https://github.com/sapphiredev/utilities/commit/34169eae1dc0476ccf5a6c4f36e28602a204829e))\n- Add @legendhimslef as a contributor ([059b6f1](https://github.com/sapphiredev/utilities/commit/059b6f1ab5362d46d58624d06c1aa39192b0716f))\n- **utilities:** Add usage (#499) ([0c4decc](https://github.com/sapphiredev/utilities/commit/0c4decc879cb531d82fe4c871b6fe6a7b3e1314b))\n\n## 🧪 Testing\n\n- Cleanup tests ([aec1bb2](https://github.com/sapphiredev/utilities/commit/aec1bb290d0f3c00a1ae4f4c86302ebbb161d348))\n\n# [@sapphire/utilities@3.11.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.10.1...@sapphire/utilities@3.11.0) - (2022-10-08)\n\n## 🐛 Bug Fixes\n\n- Override deprecated jsdoc (#488) ([5cc9a2c](https://github.com/sapphiredev/utilities/commit/5cc9a2ca1257cdbb62a65f70cea9cacb86853704))\n\n## 🚀 Features\n\n- Throttle function (#483) ([541891a](https://github.com/sapphiredev/utilities/commit/541891a8fea49d06d2855aa45efb095f196cdfb0))\n- **utilities:** Add pickRandom (#486) ([20823c9](https://github.com/sapphiredev/utilities/commit/20823c9ed02d1d4835b082874e5c2718b101c416))\n- Added `tryParseURL` (#482) ([46c5b49](https://github.com/sapphiredev/utilities/commit/46c5b49ac08da8207c7fbc1e7c15572d136bf103))\n\n# [@sapphire/utilities@3.10.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.10.0...@sapphire/utilities@3.10.1) - (2022-10-02)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Add missing deprecated exports ([ef08c69](https://github.com/sapphiredev/utilities/commit/ef08c6910381df88fdada4b610f77604f5217ae1))\n\n## 📝 Documentation\n\n- Add @r-priyam as a contributor ([fb278ba](https://github.com/sapphiredev/utilities/commit/fb278bacf627ec6fc88752eafeb12df5f3177a2c))\n\n# [@sapphire/utilities@3.10.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.3...@sapphire/utilities@3.10.0) - (2022-10-02)\n\n## 🏠 Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed output file extensions (#480) ([99a011d](https://github.com/sapphiredev/utilities/commit/99a011db82cb0b012974eb26951195cf8d00b672))\n- **utilities:** Specify chunk file as side effect ([7b34a81](https://github.com/sapphiredev/utilities/commit/7b34a81673f8c0e86fab40b956bffc903aa28a8f))\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## 📝 Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n\n## 🚀 Features\n\n- **utilities:** Add possibility to import single functions by appending them to the import path. (#454) ([374c145](https://github.com/sapphiredev/utilities/commit/374c145a5dd329cfc1a867ed6720abf408683a88))\n- **utilities:** Add `objectKeys` function (#472) ([384ff84](https://github.com/sapphiredev/utilities/commit/384ff845115c37aaeb20b0b23051954f75f1d0bf))\n- **utilities:** Add `objectEntries` function (#471) ([84c1418](https://github.com/sapphiredev/utilities/commit/84c1418a1b60dcc61c0e74f54f4c9825ac735962))\n- **utilities:** Add `objectValues` function (#474) ([90c2409](https://github.com/sapphiredev/utilities/commit/90c2409e3103575aff1dd00e0d1b5c1c10c74140))\n- **utilities:** Add `sleep` and `sleepSync` (#469) ([8cd1293](https://github.com/sapphiredev/utilities/commit/8cd129382f1958e00166a8248f4d864480562829))\n\n# [@sapphire/utilities@3.10.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.10.0...@sapphire/utilities@3.10.1) - (2022-10-02)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Add missing deprecated exports ([ef08c69](https://github.com/sapphiredev/utilities/commit/ef08c6910381df88fdada4b610f77604f5217ae1))\n\n## 📝 Documentation\n\n- Add @r-priyam as a contributor ([fb278ba](https://github.com/sapphiredev/utilities/commit/fb278bacf627ec6fc88752eafeb12df5f3177a2c))\n\n# [@sapphire/utilities@3.10.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.3...@sapphire/utilities@3.10.0) - (2022-10-02)\n\n## 🏠 Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed output file extensions (#480) ([99a011d](https://github.com/sapphiredev/utilities/commit/99a011db82cb0b012974eb26951195cf8d00b672))\n- **utilities:** Specify chunk file as side effect ([7b34a81](https://github.com/sapphiredev/utilities/commit/7b34a81673f8c0e86fab40b956bffc903aa28a8f))\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## 📝 Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n\n## 🚀 Features\n\n- **utilities:** Add possibility to import single functions by appending them to the import path. (#454) ([374c145](https://github.com/sapphiredev/utilities/commit/374c145a5dd329cfc1a867ed6720abf408683a88))\n- **utilities:** Add `objectKeys` function (#472) ([384ff84](https://github.com/sapphiredev/utilities/commit/384ff845115c37aaeb20b0b23051954f75f1d0bf))\n- **utilities:** Add `objectEntries` function (#471) ([84c1418](https://github.com/sapphiredev/utilities/commit/84c1418a1b60dcc61c0e74f54f4c9825ac735962))\n- **utilities:** Add `objectValues` function (#474) ([90c2409](https://github.com/sapphiredev/utilities/commit/90c2409e3103575aff1dd00e0d1b5c1c10c74140))\n- **utilities:** Add `sleep` and `sleepSync` (#469) ([8cd1293](https://github.com/sapphiredev/utilities/commit/8cd129382f1958e00166a8248f4d864480562829))\n\n# [@sapphire/utilities@3.10.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.3...@sapphire/utilities@3.10.0) - (2022-10-02)\n\n## 🏠 Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed output file extensions (#480) ([99a011d](https://github.com/sapphiredev/utilities/commit/99a011db82cb0b012974eb26951195cf8d00b672))\n- **utilities:** Specify chunk file as side effect ([7b34a81](https://github.com/sapphiredev/utilities/commit/7b34a81673f8c0e86fab40b956bffc903aa28a8f))\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## 📝 Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n\n## 🚀 Features\n\n- **utilities:** Add possibility to import single functions by appending them to the import path. (#454) ([374c145](https://github.com/sapphiredev/utilities/commit/374c145a5dd329cfc1a867ed6720abf408683a88))\n- **utilities:** Add `objectKeys` function (#472) ([384ff84](https://github.com/sapphiredev/utilities/commit/384ff845115c37aaeb20b0b23051954f75f1d0bf))\n- **utilities:** Add `objectEntries` function (#471) ([84c1418](https://github.com/sapphiredev/utilities/commit/84c1418a1b60dcc61c0e74f54f4c9825ac735962))\n- **utilities:** Add `objectValues` function (#474) ([90c2409](https://github.com/sapphiredev/utilities/commit/90c2409e3103575aff1dd00e0d1b5c1c10c74140))\n- **utilities:** Add `sleep` and `sleepSync` (#469) ([8cd1293](https://github.com/sapphiredev/utilities/commit/8cd129382f1958e00166a8248f4d864480562829))\n\n# [@sapphire/utilities@3.9.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.2...@sapphire/utilities@3.9.3) - (2022-09-02)\n\n## 🐛 Bug Fixes\n\n- **isNumber:** Parse string parameter as number (allow string as parameter) (#444) ([01e1b14](https://github.com/sapphiredev/utilities/commit/01e1b1428cf793d7716d60217204626c76bd872e))\n\n## 📝 Documentation\n\n- Update @RealShadowNova as a contributor ([a869ba0](https://github.com/sapphiredev/utilities/commit/a869ba0abfad041610b9115187d426aebe671af6))\n\n# [@sapphire/utilities@3.9.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.0...@sapphire/utilities@3.9.1) - (2022-08-16)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed `getDeepObjectKeys` not returning proper values for arrays of not-objects (#428) ([88f84e6](https://github.com/sapphiredev/utilities/commit/88f84e61a72e6682bfeb2b38a8a2c55de08c757e))\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## 📝 Documentation\n\n- Fixed typos (#427) ([e840a97](https://github.com/sapphiredev/utilities/commit/e840a9795583b59ee3da9ffe0d325e0a3cfa0c14))\n\n# [@sapphire/utilities@3.9.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.9.0...@sapphire/utilities@3.9.1) - (2022-08-16)\n\n## 🐛 Bug Fixes\n\n- **utilities:** Fixed `getDeepObjectKeys` not returning proper values for arrays of not-objects (#428) ([88f84e6](https://github.com/sapphiredev/utilities/commit/88f84e61a72e6682bfeb2b38a8a2c55de08c757e))\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## 📝 Documentation\n\n- Fixed typos (#427) ([e840a97](https://github.com/sapphiredev/utilities/commit/e840a9795583b59ee3da9ffe0d325e0a3cfa0c14))\n\n# [@sapphire/utilities@3.9.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.8.0...@sapphire/utilities@3.9.0) - (2022-08-04)\n\n## 🚀 Features\n\n- **utilities:** Add getDeepObjectKeys (#413) ([b8b0883](https://github.com/sapphiredev/utilities/commit/b8b0883689e96df30767e4c9998b5f3403560779))\n\n# [@sapphire/utilities@3.8.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.7.0...@sapphire/utilities@3.8.0) - (2022-07-30)\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([84af0db](https://github.com/sapphiredev/utilities/commit/84af0db2db749223b036aa99fe19a2e9af5681c6))\n\n## 📝 Documentation\n\n- Add @muchnameless as a contributor ([a1221fe](https://github.com/sapphiredev/utilities/commit/a1221fea68506e99591d5d00ec552a07c26833f9))\n- Add @enxg as a contributor ([d2382f0](https://github.com/sapphiredev/utilities/commit/d2382f04e3909cb4ad11798a0a10e683f6cf5383))\n- Add @EvolutionX-10 as a contributor ([efc3a32](https://github.com/sapphiredev/utilities/commit/efc3a320a72ae258996dd62866d206c33f8d4961))\n\n## 🚀 Features\n\n- Add lazy (#406) ([80db17c](https://github.com/sapphiredev/utilities/commit/80db17cde4266a2a73639fde9670996a0814474b))\n\n# [@sapphire/utilities@3.7.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.6.2...@sapphire/utilities@3.7.0) - (2022-07-01)\n\n## 🏠 Refactor\n\n- **utilities:** Make `objectToTuples` more type-safe ([664580f](https://github.com/sapphiredev/utilities/commit/664580f74ba2fdc7c9edcd277dd93214d823fb2d))\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([50cd8de](https://github.com/sapphiredev/utilities/commit/50cd8dea593b6f5ae75571209456b3421e2ca59a))\n\n## 📝 Documentation\n\n- Add @MajesticString as a contributor ([295b3e9](https://github.com/sapphiredev/utilities/commit/295b3e9849a4b0fe64074bae02f6426378a303c3))\n- Add @Mzato0001 as a contributor ([c790ef2](https://github.com/sapphiredev/utilities/commit/c790ef25df2d7e22888fa9f8169167aa555e9e19))\n- Add @NotKaskus as a contributor ([00da8f1](https://github.com/sapphiredev/utilities/commit/00da8f199137b9277119823f322d1f2d168d928a))\n- Add @imranbarbhuiya as a contributor ([fb674c2](https://github.com/sapphiredev/utilities/commit/fb674c2c5594d41e71662263553dcb4bac9e37f4))\n- Add @axisiscool as a contributor ([ce1aa31](https://github.com/sapphiredev/utilities/commit/ce1aa316871a88d3663efbdf2a42d3d8dfe6a27f))\n- Add @dhruv-kaushikk as a contributor ([ebbf43f](https://github.com/sapphiredev/utilities/commit/ebbf43f63617daba96e72c50a234bf8b64f6ddc4))\n- Add @Commandtechno as a contributor ([f1d69fa](https://github.com/sapphiredev/utilities/commit/f1d69fabe1ee0abe4be08b19e63dbec03102f7ce))\n- Fix typedoc causing OOM crashes ([63ba41c](https://github.com/sapphiredev/utilities/commit/63ba41c4b6678554b1c7043a22d3296db4f59360))\n\n## 🚀 Features\n\n- **utilities:** Add `AnyObject` utility type ([e442028](https://github.com/sapphiredev/utilities/commit/e442028b07f867c31f94208b70b479893245b806))\n\n## 🧪 Testing\n\n- Migrate to vitest (#380) ([075ec73](https://github.com/sapphiredev/utilities/commit/075ec73c7a8e3374fad3ada612d37eb4ac36ec8d))\n\n## [3.6.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.6.1...@sapphire/utilities@3.6.2) (2022-04-01)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [3.6.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.6.0...@sapphire/utilities@3.6.1) (2022-03-20)\n\n### Bug Fixes\n\n-   **utilities:** remove `U` type from `cast` ([241ca66](https://github.com/sapphiredev/utilities/commit/241ca66bcecb11477c948e11c0428c31f4e34e6b))\n\n# [3.6.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.5.0...@sapphire/utilities@3.6.0) (2022-03-20)\n\n### Features\n\n-   **utilities:** add `cast` method ([7e02bf5](https://github.com/sapphiredev/utilities/commit/7e02bf5b34f33c4cafb321055629c9f6a24c5ed9))\n\n# [3.5.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.4.0...@sapphire/utilities@3.5.0) (2022-03-11)\n\n### Features\n\n-   **utlities:** add title case `options` param ([#313](https://github.com/sapphiredev/utilities/issues/313)) ([ca7cffa](https://github.com/sapphiredev/utilities/commit/ca7cffa015d027de6ba4121f45c0b88867aede02))\n\n# [3.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.3.0...@sapphire/utilities@3.4.0) (2022-03-06)\n\n### Features\n\n-   allow module: NodeNext ([#306](https://github.com/sapphiredev/utilities/issues/306)) ([9dc6dd6](https://github.com/sapphiredev/utilities/commit/9dc6dd619efab879bb2b0b3c9e64304e10a67ed6))\n-   **ts-config:** add multi-config structure ([#281](https://github.com/sapphiredev/utilities/issues/281)) ([b5191d7](https://github.com/sapphiredev/utilities/commit/b5191d7f2416dc5838590c4ff221454925553e37))\n\n# [3.3.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.2.1...@sapphire/utilities@3.3.0) (2022-01-28)\n\n### Bug Fixes\n\n-   fixed date cloning ([#275](https://github.com/sapphiredev/utilities/issues/275)) ([53d1f86](https://github.com/sapphiredev/utilities/commit/53d1f86ee7ea6cb29020b9845cc265f92a99a28c))\n\n### Features\n\n-   change build system to tsup ([#270](https://github.com/sapphiredev/utilities/issues/270)) ([365a53a](https://github.com/sapphiredev/utilities/commit/365a53a5517a01a0926cf28a83c96b63f32ed9f8))\n\n## [3.2.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.2.0...@sapphire/utilities@3.2.1) (2022-01-21)\n\n### Bug Fixes\n\n-   fixed typos of `communitys` ([e4e3a69](https://github.com/sapphiredev/utilities/commit/e4e3a6913a8157f24f366ac43db46faebdc085ce)), closes [#263](https://github.com/sapphiredev/utilities/issues/263)\n\n# [3.2.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.1.0...@sapphire/utilities@3.2.0) (2022-01-10)\n\n### Bug Fixes\n\n-   **utilities:** make `NonNullObject` require object ([#242](https://github.com/sapphiredev/utilities/issues/242)) ([5e0f161](https://github.com/sapphiredev/utilities/commit/5e0f161145402e01b631a9b1b2033d0618cccc8b))\n\n### Features\n\n-   **utilities:** support custom constructors for `isObject` ([#241](https://github.com/sapphiredev/utilities/issues/241)) ([701c2c2](https://github.com/sapphiredev/utilities/commit/701c2c200f147d7d7dcccaee65b75e709b601f8c))\n\n# [3.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.8...@sapphire/utilities@3.1.0) (2021-11-19)\n\n### Features\n\n-   add array partitioning ([#220](https://github.com/sapphiredev/utilities/issues/220)) ([42d6b81](https://github.com/sapphiredev/utilities/commit/42d6b8123233ed5315c55412d993fc19266660bb))\n\n## [3.0.8](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.7...@sapphire/utilities@3.0.8) (2021-11-15)\n\n### Bug Fixes\n\n-   **utilities:** target ES2019 for create-react-app support ([95575ed](https://github.com/sapphiredev/utilities/commit/95575ed5bc2def07fb8066d85662a08d8610d8d1))\n\n## [3.0.7](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.6...@sapphire/utilities@3.0.7) (2021-11-06)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [3.0.6](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.5...@sapphire/utilities@3.0.6) (2021-10-28)\n\n### Bug Fixes\n\n-   **deepClone:** fixed deep cloning when there are classes ([d3aeed1](https://github.com/sapphiredev/utilities/commit/d3aeed1613ae642ca96b1bd6914f0d43c7c35807))\n\n## [3.0.5](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.4...@sapphire/utilities@3.0.5) (2021-10-26)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [3.0.4](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.3...@sapphire/utilities@3.0.4) (2021-10-17)\n\n### Bug Fixes\n\n-   allow more node & npm versions in engines field ([5977d2a](https://github.com/sapphiredev/utilities/commit/5977d2a30a4b2cfdf84aff3f33af03ffde1bbec5))\n\n## [3.0.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.2...@sapphire/utilities@3.0.3) (2021-10-11)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [3.0.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.1...@sapphire/utilities@3.0.2) (2021-10-08)\n\n### Bug Fixes\n\n-   **utilities:** correct forgotten abstract ([#195](https://github.com/sapphiredev/utilities/issues/195)) ([20b7ef7](https://github.com/sapphiredev/utilities/commit/20b7ef7d22d88a7fe54ae40474fa58ab85c49488))\n\n## [3.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@3.0.0...@sapphire/utilities@3.0.1) (2021-10-04)\n\n### Bug Fixes\n\n-   **utilities:** add AbstractCtor and AbstractConstructor and remove abstract from their counterparts ([dbc0321](https://github.com/sapphiredev/utilities/commit/dbc032169791bbdc70eb2a8f151098d21fa192fd))\n-   **utilities:** support abstract classes for Ctor utility type ([1ce3136](https://github.com/sapphiredev/utilities/commit/1ce3136165aea830460ae5283d8348fef17c0dba))\n\n# [3.0.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@2.0.1...@sapphire/utilities@3.0.0) (2021-10-04)\n\n### Bug Fixes\n\n-   **utilities:** rename `Awaited<T>` to `Awaitable<T>` ([#193](https://github.com/sapphiredev/utilities/issues/193)) ([6ff3e28](https://github.com/sapphiredev/utilities/commit/6ff3e28a78cc9c2b3d58d42fbfba876ab70046c2))\n\n### Features\n\n-   **utilities:** add empty array to 'isNullishOrEmpty' ([#168](https://github.com/sapphiredev/utilities/issues/168)) ([8f9e615](https://github.com/sapphiredev/utilities/commit/8f9e6156a802c90495f6f07ce6570226af01794c))\n-   **utilities:** set minimum NodeJS to v14 ([79aa230](https://github.com/sapphiredev/utilities/commit/79aa230a5874d1bbfb14c3b8506de06b3329395a))\n-   **utilities:** support abstract classes for `Constructor` utility type ([#194](https://github.com/sapphiredev/utilities/issues/194)) ([732d5a0](https://github.com/sapphiredev/utilities/commit/732d5a07b6eef9c37ee52a42f4a391764a08debf))\n\n### BREAKING CHANGES\n\n-   **utilities:** `Awaited` has been renamed to `Awaitable`\n\n## [2.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@2.0.0...@sapphire/utilities@2.0.1) (2021-07-20)\n\n### Bug Fixes\n\n-   **utilities:** add tsdoc for filter functions ([36d51d1](https://github.com/sapphiredev/utilities/commit/36d51d12366dd25fa2f04a90e834b5fc2aac73ac))\n\n# [2.0.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.7.0...@sapphire/utilities@2.0.0) (2021-07-17)\n\n### Code Refactoring\n\n-   **rateLimits:** rewrite all of it ([#130](https://github.com/sapphiredev/utilities/issues/130)) ([320778c](https://github.com/sapphiredev/utilities/commit/320778ca65cbf3591bd1ce0b1f2eb430693eef9a))\n\n### BREAKING CHANGES\n\n-   **rateLimits:** Removed `Bucket`\n\n# [1.7.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.6.1...@sapphire/utilities@1.7.0) (2021-07-11)\n\n### Features\n\n-   **utilities:** add 3 new helper methods ([4ebcd43](https://github.com/sapphiredev/utilities/commit/4ebcd431cede7773aed2fe82e58c0d2d66578fea))\n\n## [1.6.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.6.0...@sapphire/utilities@1.6.1) (2021-06-27)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n# [1.6.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.5.3...@sapphire/utilities@1.6.0) (2021-06-19)\n\n### Features\n\n-   **utilities:** update utilities with more stuff ([#122](https://github.com/sapphiredev/utilities/issues/122)) ([5dfb668](https://github.com/sapphiredev/utilities/commit/5dfb6688d27ab361a7c31692465ed613b500cdb1))\n\n## [1.5.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.5.2...@sapphire/utilities@1.5.3) (2021-06-06)\n\n### Bug Fixes\n\n-   remove peer deps, update dev deps, update READMEs ([#124](https://github.com/sapphiredev/utilities/issues/124)) ([67256ed](https://github.com/sapphiredev/utilities/commit/67256ed43b915b02a8b5c68230ba82d6210c5032))\n\n## [1.5.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.5.1...@sapphire/utilities@1.5.2) (2021-05-20)\n\n### Bug Fixes\n\n-   **utilities:** mark package as side effect free ([73cbabd](https://github.com/sapphiredev/utilities/commit/73cbabddc274387d7819d80afe426eb1112f7995))\n\n## [1.5.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.5.0...@sapphire/utilities@1.5.1) (2021-05-02)\n\n### Bug Fixes\n\n-   drop the `www.` from the SapphireJS URL ([494d89f](https://github.com/sapphiredev/utilities/commit/494d89ffa04f78c195b93d7905b3232884f7d7e2))\n-   update all the SapphireJS URLs from `.com` to `.dev` ([f59b46d](https://github.com/sapphiredev/utilities/commit/f59b46d1a0ebd39cad17b17d71cd3b9da808d5fd))\n\n# [1.5.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.8...@sapphire/utilities@1.5.0) (2021-04-21)\n\n### Bug Fixes\n\n-   **utilities:** resolve lgtm error ([eb5f4e6](https://github.com/sapphiredev/utilities/commit/eb5f4e6478d35a6864427fe02849e930b151285c))\n\n### Features\n\n-   add @sapphire/embed-jsx ([#100](https://github.com/sapphiredev/utilities/issues/100)) ([7277a23](https://github.com/sapphiredev/utilities/commit/7277a236015236ed8e81b7882875410facc4ce17))\n\n## [1.4.8](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.7...@sapphire/utilities@1.4.8) (2021-04-19)\n\n### Bug Fixes\n\n-   change all Sapphire URLs from \"project\"->\"community\" & use our domain where applicable 👨‍🌾🚜 ([#102](https://github.com/sapphiredev/utilities/issues/102)) ([835b408](https://github.com/sapphiredev/utilities/commit/835b408e8e57130c3787aca2e32613346ff23e4d))\n\n## [1.4.7](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.6...@sapphire/utilities@1.4.7) (2021-04-03)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [1.4.6](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.5...@sapphire/utilities@1.4.6) (2021-03-16)\n\n### Bug Fixes\n\n-   remove terser from all packages ([#79](https://github.com/sapphiredev/utilities/issues/79)) ([1cfe4e7](https://github.com/sapphiredev/utilities/commit/1cfe4e7c804e62c142495686d2b83b81d0026c02))\n\n## [1.4.5](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.4...@sapphire/utilities@1.4.5) (2021-02-16)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [1.4.4](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.3...@sapphire/utilities@1.4.4) (2021-01-25)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [1.4.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.2...@sapphire/utilities@1.4.3) (2021-01-16)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n## [1.4.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.1...@sapphire/utilities@1.4.2) (2021-01-14)\n\n### Bug Fixes\n\n-   **utilities:** fix parseUrl not working in v1.4.1 ([c1fe990](https://github.com/sapphiredev/utilities/commit/c1fe990d443b20791d268a2ca2bdd645500ed436))\n\n## [1.4.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.4.0...@sapphire/utilities@1.4.1) (2021-01-14)\n\n### Bug Fixes\n\n-   **utilities:** fixed return type for parseURL ([718065a](https://github.com/sapphiredev/utilities/commit/718065a34b5ee225503f8b2197784f1fd1b15f19))\n-   **utilities:** properly type parseUrl ([dcf800f](https://github.com/sapphiredev/utilities/commit/dcf800f6e1435cd6151f510da36b9e99166df9e4))\n\n# [1.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.3.1...@sapphire/utilities@1.4.0) (2021-01-13)\n\n### Features\n\n-   **utilities:** add Nullish utility type ([a7e32bd](https://github.com/sapphiredev/utilities/commit/a7e32bdc1475840d6c313fbb83b7e502ebf780f5))\n\n## [1.3.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.3.0...@sapphire/utilities@1.3.1) (2021-01-01)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n# [1.3.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.2.0...@sapphire/utilities@1.3.0) (2020-12-26)\n\n### Features\n\n-   **decorators:** add createFunctionPrecondition, fixed build ([#51](https://github.com/sapphiredev/utilities/issues/51)) ([c87d5db](https://github.com/sapphiredev/utilities/commit/c87d5db8e29bbfcf96a29e34e4e4186426bac304))\n\n# [1.2.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.1.1...@sapphire/utilities@1.2.0) (2020-12-22)\n\n### Features\n\n-   **utilities:** add debounce ([#45](https://github.com/sapphiredev/utilities/issues/45)) ([4762ebf](https://github.com/sapphiredev/utilities/commit/4762ebfac1724308330a61d2c8b3d71eadbd24f0))\n\n## [1.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.1.0...@sapphire/utilities@1.1.1) (2020-11-15)\n\n### Bug Fixes\n\n-   **utilities:** add alias of isNullish to isNullOrUndefined ([eadf28f](https://github.com/sapphiredev/utilities/commit/eadf28ff024d887d83ade252e4567317593ca529)), closes [#30](https://github.com/sapphiredev/utilities/issues/30)\n-   **utilities:** pass keep_classnames to terser ([9425c82](https://github.com/sapphiredev/utilities/commit/9425c82765b2fda461d08ab1d5ed4a302d327281))\n-   **utilities:** pass keep_fnames to terser ([4b8fde2](https://github.com/sapphiredev/utilities/commit/4b8fde225fc7fb8da26dd51bc1ab97b6d45f6af5))\n\n# [1.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.0.3...@sapphire/utilities@1.1.0) (2020-11-07)\n\n### Features\n\n-   **utilities:** add range function ([f9ac35e](https://github.com/sapphiredev/utilities/commit/f9ac35ee74848746ce057a1c2a8ccc6499aca892))\n-   **utilities:** add range function ([a59d623](https://github.com/sapphiredev/utilities/commit/a59d62341d64c4b1565637d15cd642efd275281a))\n-   added time-utilities package ([#26](https://github.com/sapphiredev/utilities/issues/26)) ([f17a333](https://github.com/sapphiredev/utilities/commit/f17a3339667a452e8745fad7884272176e5d65e8))\n\n## [1.0.3](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.0.2...@sapphire/utilities@1.0.3) (2020-11-04)\n\n### Bug Fixes\n\n-   **utilities:** properly specify ESM and CommonJS exports ([11f4f9b](https://github.com/sapphiredev/utilities/commit/11f4f9b32f8c2a6c8be2f4568e2e1e0fac47b39e))\n\n## [1.0.2](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.0.1...@sapphire/utilities@1.0.2) (2020-10-11)\n\n### Bug Fixes\n\n-   **ratelimits,snowflake,utilities:** fixed esm output target ([9fdab3f](https://github.com/sapphiredev/utilities/commit/9fdab3fca283c8c0b47cc32661c5cf8e0a5e583c))\n-   **utilities:** fixed up mergeDefault ([#21](https://github.com/sapphiredev/utilities/issues/21)) ([76561db](https://github.com/sapphiredev/utilities/commit/76561dbf339ebf2dff1a712e448407e6a1b36070))\n\n## [1.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/utilities@1.0.0...@sapphire/utilities@1.0.1) (2020-09-20)\n\n**Note:** Version bump only for package @sapphire/utilities\n\n# 1.0.0 (2020-09-05)\n\n### Bug Fixes\n\n-   **utilities:** fix types for isFunction ([991de0d](https://github.com/sapphiredev/utilities/commit/991de0da0f9b51813f4fee4ecf071feeb9d95abe))\n-   **utilities:** fixed types for codeBlock ([abae927](https://github.com/sapphiredev/utilities/commit/abae927f5a5dbf1785770569d0fc6bcdf658880e))\n-   **utilities:** fixed types for isThenable ([0563b8d](https://github.com/sapphiredev/utilities/commit/0563b8dc0492fe8ff5dd3fc16dd334854d962728))\n-   **utilities:** put lang as first param ([54bfba7](https://github.com/sapphiredev/utilities/commit/54bfba781ac7d6f9d60fc7fec85475d8496d9aa2))\n\n### Features\n\n-   implement snowflake ([5ba4e2d](https://github.com/sapphiredev/utilities/commit/5ba4e2d82557dd4ff60ffe891a7b46e46373bea2))\n-   **decorators:** add decorators package ([#4](https://github.com/sapphiredev/utilities/issues/4)) ([677b3e5](https://github.com/sapphiredev/utilities/commit/677b3e59d5c6160cbe6fb410821cadd7c0f00e3c))\n-   **utilities:** add all utilities ([94fcae8](https://github.com/sapphiredev/utilities/commit/94fcae8cb81e0eaaddac7de1e78b1e26cccb9bf0))\n",
  "classes": [],
  "enums": [],
  "functions": [
    {
      "id": 1,
      "name": "arrayStrictEquals",
      "source": {
        "line": 6,
        "file": "arrayStrictEquals.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/arrayStrictEquals.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "arrayStrictEquals",
          "comment": {
            "description": "Compare if both arrays are strictly equal",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 3,
              "name": "T",
              "constraint": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 4,
              "name": "arr1",
              "comment": {
                "description": "The array to compare to",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 5,
              "name": "arr2",
              "comment": {
                "description": "The array to compare with",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "capitalizeFirstLetter",
      "source": {
        "line": 14,
        "file": "capitalizeFirstLetter.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/capitalizeFirstLetter.ts#L14"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 7,
          "name": "capitalizeFirstLetter",
          "comment": {
            "description": "Transforms the first letter to a capital then adds all the rest after it\n\nThis differs from {@link toTitleCase} in that it doesn't force lowercase on the rest of the string.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The input `str` as `Str`"
              },
              {
                "name": "example",
                "text": "```ts\ncapitalizeFirstLetter('hello world') // 'Hello world'\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 8,
              "name": "str",
              "comment": {
                "description": "Text to transform",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 9,
      "name": "cast",
      "source": {
        "line": 10,
        "file": "cast.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/cast.ts#L10"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 10,
          "name": "cast",
          "comment": {
            "description": "Casts any value to `T`\n\nNote that this function is not type-safe, and may cause runtime errors if used incorrectly.\nAlso note that this function is effectively useless in a JavaScript project, it only serves a purpose for TypeScript projects.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The value but as type `T`"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 11,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 12,
              "name": "value",
              "comment": {
                "description": "The value to cast to another type",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 11,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 13,
      "name": "chunk",
      "source": {
        "line": 6,
        "file": "chunk.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/chunk.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 14,
          "name": "chunk",
          "comment": {
            "description": "Splits up an array into chunks",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 15,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 16,
              "name": "array",
              "comment": {
                "description": "The array to chunk up",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 15,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            },
            {
              "id": 17,
              "name": "chunkSize",
              "comment": {
                "description": "The size of each individual chunk",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": 15,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          }
        }
      ]
    },
    {
      "id": 18,
      "name": "classExtends",
      "source": {
        "line": 8,
        "file": "classExtends.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/classExtends.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 19,
          "name": "classExtends",
          "comment": {
            "description": "Checks whether or not the value class extends the base class.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 20,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 354,
                "name": "Ctor",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 21,
              "name": "value",
              "comment": {
                "description": "The constructor to be checked against.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 354,
                "name": "Ctor",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 22,
              "name": "base",
              "comment": {
                "description": "The base constructor.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 20,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 20,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 23,
      "name": "codeBlock",
      "source": {
        "line": 14,
        "file": "codeBlock.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/codeBlock.ts#L14"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 24,
          "name": "codeBlock",
          "comment": {
            "description": "Wraps the content inside a codeblock with no language",
            "blockTags": [
              {
                "name": "remark",
                "text": "If the provided content includes 3 backticks (```) then those backticks will be escaped\nby adding a [Zero Width Space](https://en.wikipedia.org/wiki/Zero-width_space) between the first and second backtick\n\n@remark If the provided content ends with a backtick then a [Zero Width Space](https://en.wikipedia.org/wiki/Zero-width_space) will be added\nto the end of the content\n\n@param content - The content to wrap"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 25,
              "name": "C",
              "constraint": {
                "kind": "intrinsic",
                "type": "string"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 26,
              "name": "content",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 25,
                "name": "C",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "templateLiteral",
            "head": "```\n",
            "tail": [
              {
                "type": {
                  "kind": "reference",
                  "id": 25,
                  "name": "C",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "text": "\n```"
              }
            ]
          }
        },
        {
          "id": 27,
          "name": "codeBlock",
          "comment": {
            "description": "Wraps the content inside a codeblock with the specified language",
            "blockTags": [
              {
                "name": "remark",
                "text": "If the provided content includes 3 backticks (```) then those backticks will be escaped\nby adding a [Zero Width Space](https://en.wikipedia.org/wiki/Zero-width_space) between the first and second backtick\n\n@remark If the provided content ends with a backtick then a [Zero Width Space](https://en.wikipedia.org/wiki/Zero-width_space) will be added\nto the end of the content\n\n@param language The codeblock language\n@param content The expression to be wrapped in the codeblock"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 28,
              "name": "L",
              "constraint": {
                "kind": "intrinsic",
                "type": "string"
              },
              "default": null
            },
            {
              "id": 29,
              "name": "C",
              "constraint": {
                "kind": "intrinsic",
                "type": "string"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 30,
              "name": "language",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 28,
                "name": "L",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 31,
              "name": "content",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 29,
                "name": "C",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "templateLiteral",
            "head": "```",
            "tail": [
              {
                "type": {
                  "kind": "reference",
                  "id": 28,
                  "name": "L",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "text": "\n"
              },
              {
                "type": {
                  "kind": "reference",
                  "id": 29,
                  "name": "C",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "text": "\n```"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 32,
      "name": "cutText",
      "source": {
        "line": 10,
        "file": "cutText.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/cutText.ts#L10"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 33,
          "name": "cutText",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 34,
              "name": "str",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            },
            {
              "id": 35,
              "name": "length",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 36,
      "name": "debounce",
      "source": {
        "line": 67,
        "file": "debounce.ts",
        "path": "debounce",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L67"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 37,
          "name": "debounce",
          "comment": {
            "description": "Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since\nthe last time the debounced function was invoked. The debounced function comes with a cancel method to\ncancel delayed invocations and a flush method to immediately invoke them. Provide an options object to\nindicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent\ncalls to the debounced function return the result of the last func invocation.\n\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only\nif the the debounced function is invoked more than once during the wait timeout.\n\nSee David Corbacho’s article for details over the differences between _.debounce and _.throttle.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new debounced function."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 38,
              "name": "FnArgumentsType",
              "constraint": {
                "kind": "array",
                "type": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              },
              "default": null
            },
            {
              "id": 39,
              "name": "FnReturnType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 40,
              "name": "func",
              "comment": {
                "description": "The function to debounce.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 42,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 43,
                        "name": "args",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": true,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 38,
                          "name": "FnArgumentsType",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 39,
                      "name": "FnReturnType",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 44,
              "name": "options",
              "comment": {
                "description": "The options object.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 45,
                "name": "DebounceSettings",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 48,
            "name": "DebouncedFunc",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 38,
                "name": "FnArgumentsType",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 39,
                "name": "FnReturnType",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 57,
      "name": "deepClone",
      "source": {
        "line": 18,
        "file": "deepClone.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/deepClone.ts#L18"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 58,
          "name": "deepClone",
          "comment": {
            "description": "Deep clone an object",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 59,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 60,
              "name": "source",
              "comment": {
                "description": "The object to clone",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 59,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 59,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 61,
      "name": "filterNullAndUndefined",
      "source": {
        "line": 19,
        "file": "filterNullAndUndefined.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/filterNullAndUndefined.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 62,
          "name": "filterNullAndUndefined",
          "comment": {
            "description": "Checks whether a value is not `null` nor `undefined`.\nThis can be used in {@link Array.filter} to remove `null` and `undefined` from the array type",
            "blockTags": [
              {
                "name": "returns",
                "text": "A boolean that is `true` if the value is neither `null` nor `undefined`, false otherwise."
              },
              {
                "name": "example",
                "text": "```typescript\n// TypeScript Type: (string | undefined | null)[]\nconst someArray = ['one', 'two', undefined, null, 'five'];\n\n// TypeScript Type: string[]\nconst filteredArray = someArray.filter(filterNullAndUndefined);\n// Result: ['one', 'two', 'five']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 63,
              "name": "TValue",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 64,
              "name": "value",
              "comment": {
                "description": "The value to verify that is neither `null` nor `undefined`",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 391,
                    "name": "Nullish",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 63,
                    "name": "TValue",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 63,
              "name": "TValue",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 66,
      "name": "filterNullAndUndefinedAndEmpty",
      "source": {
        "line": 19,
        "file": "filterNullAndUndefinedAndEmpty.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/filterNullAndUndefinedAndEmpty.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 67,
          "name": "filterNullAndUndefinedAndEmpty",
          "comment": {
            "description": "Checks whether a value is not `null` nor `undefined` nor `''` (empty string).\nThis can be used in {@link Array.filter} to remove `null`, `undefined` from the array type",
            "blockTags": [
              {
                "name": "returns",
                "text": "A boolean that is `true` if the value is neither `null`, `undefined` nor `''` (empty string), false otherwise."
              },
              {
                "name": "example",
                "text": "```typescript\n// TypeScript Type: (string | undefined | null)[]\nconst someArray = ['one', 'two', undefined, null, ''];\n\n// TypeScript Type: string[]\nconst filteredArray = someArray.filter(filterNullAndUndefinedAndEmpty);\n// Result: ['one', 'two']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 68,
              "name": "TValue",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 69,
              "name": "value",
              "comment": {
                "description": "The value to verify that is neither `null`, `undefined` nor `''` (empty string)",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "literal",
                    "value": ""
                  },
                  {
                    "kind": "reference",
                    "id": 391,
                    "name": "Nullish",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 68,
                    "name": "TValue",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 68,
              "name": "TValue",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 72,
      "name": "filterNullAndUndefinedAndZero",
      "source": {
        "line": 19,
        "file": "filterNullAndUndefinedAndZero.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/filterNullAndUndefinedAndZero.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 73,
          "name": "filterNullAndUndefinedAndZero",
          "comment": {
            "description": "Checks whether a value is not `null` nor `undefined` nor `0`.\nThis can be used in {@link Array.filter} to remove `null`, `undefined` from the array type",
            "blockTags": [
              {
                "name": "returns",
                "text": "A boolean that is `true` if the value is neither `null`, `undefined` nor `0`, false otherwise."
              },
              {
                "name": "example",
                "text": "```typescript\n// TypeScript Type: (string | number | undefined | null)[]\nconst someArray = ['one', 'two', undefined, null, 0, 1];\n\n// TypeScript Type: (string | number)[]\nconst filteredArray = someArray.filter(filterNullAndUndefinedAndZero);\n// Result: ['one', 'two', 1]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 74,
              "name": "TValue",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 75,
              "name": "value",
              "comment": {
                "description": "The value to verify that is neither `null`, `undefined` nor `0`",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "literal",
                    "value": "0"
                  },
                  {
                    "kind": "reference",
                    "id": 391,
                    "name": "Nullish",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 74,
                    "name": "TValue",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 74,
              "name": "TValue",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 78,
      "name": "getDeepObjectKeys",
      "source": {
        "line": 14,
        "file": "getDeepObjectKeys.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/getDeepObjectKeys.ts#L14"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 79,
          "name": "getDeepObjectKeys",
          "comment": {
            "description": "Flattens an object to a list of its keys, traversing deeply into nested objects and arrays of objects.",
            "blockTags": [
              {
                "name": "note",
                "text": "By default Nested array values are flattened to `arrayKey.${index}.subKey`.\nThis can be changed to `arrayKey[${index}].subKey` by setting `options.arrayKeysIndexStyle` to `'braces-with-dot'`.\nOr it can also be changed to `arrayKey[${index}]subKey` by setting `options.arrayKeysIndexStyle` to `'braces'`."
              },
              {
                "name": "returns",
                "text": "An array of strings holding the keys of the object"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 80,
              "name": "obj",
              "comment": {
                "description": "The object of which to deeply retrieve its keys",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "object"
              }
            },
            {
              "id": 81,
              "name": "options",
              "comment": {
                "description": "The options with which to customize the output of this function",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 82,
                "name": "GetDeepObjectKeysOptions",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          }
        }
      ]
    },
    {
      "id": 84,
      "name": "hasAtLeastOneKeyInMap",
      "source": {
        "line": 7,
        "file": "hasAtLeastOneKeyInMap.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/hasAtLeastOneKeyInMap.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 85,
          "name": "hasAtLeastOneKeyInMap",
          "comment": {
            "description": "Checks whether any of the {@link keys} are in the {@link map}",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if at least one of the {@link keys} is in the {@link map}, `false` otherwise."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 86,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 87,
              "name": "map",
              "comment": {
                "description": "The map to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "ReadonlyMap",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 86,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            },
            {
              "id": 88,
              "name": "keys",
              "comment": {
                "description": "The keys to find in the map",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 86,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 89,
      "name": "hasAtLeastOneKeyInObject",
      "source": {
        "line": 16,
        "file": "hasAtLeastOneKeyInObject.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/hasAtLeastOneKeyInObject.ts#L16"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 90,
          "name": "hasAtLeastOneKeyInObject",
          "comment": {
            "description": "Checks whether any of the {@link keys} are in the {@link obj}",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if at least one of the {@link keys} is in the {@link obj}, `false` otherwise."
              },
              {
                "name": "example",
                "text": "```typescript\nconst obj = { a: 1, b: 2, c: 3 };\nconsole.log(hasAtLeastOneKeyInObject(obj, ['a'])); // true\nconsole.log(hasAtLeastOneKeyInObject(obj, ['d'])); // false\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 91,
              "name": "T",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            },
            {
              "id": 92,
              "name": "K",
              "constraint": {
                "kind": "reference",
                "id": null,
                "name": "PropertyKey",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 93,
              "name": "obj",
              "comment": {
                "description": "The object to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 91,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 94,
              "name": "keys",
              "comment": {
                "description": "The keys to find in the object",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 92,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "obj",
            "type": {
              "kind": "intersection",
              "types": [
                {
                  "kind": "reference",
                  "id": 91,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                {
                  "kind": "mapped",
                  "parameter": "key",
                  "parameterType": {
                    "kind": "reference",
                    "id": null,
                    "name": "PropertyKey",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "nameType": null,
                  "templateType": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  },
                  "readonly": null,
                  "optional": "-"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 95,
      "name": "inlineCodeBlock",
      "source": {
        "line": 7,
        "file": "inlineCodeBlock.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/inlineCodeBlock.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 96,
          "name": "inlineCodeBlock",
          "comment": {
            "description": "Wraps text in a markdown inline codeblock",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 97,
              "name": "C",
              "constraint": {
                "kind": "intrinsic",
                "type": "string"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 98,
              "name": "content",
              "comment": {
                "description": "The expression to be wrapped in the codeblock",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 97,
                "name": "C",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "templateLiteral",
            "head": "`",
            "tail": [
              {
                "type": {
                  "kind": "reference",
                  "id": 97,
                  "name": "C",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "text": "`"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 99,
      "name": "isClass",
      "source": {
        "line": 7,
        "file": "isClass.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isClass.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 100,
          "name": "isClass",
          "comment": {
            "description": "Verify if the input is a class constructor.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 101,
              "name": "input",
              "comment": {
                "description": "The function to verify",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "reference",
              "id": 354,
              "name": "Ctor",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 102,
      "name": "isFunction",
      "source": {
        "line": 6,
        "file": "isFunction.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isFunction.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 103,
          "name": "isFunction",
          "comment": {
            "description": "Verify if the input is a function.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 104,
              "name": "input",
              "comment": {
                "description": "The function to verify",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "Function",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 105,
      "name": "isNullOrUndefined",
      "source": {
        "line": 7,
        "file": "isNullOrUndefined.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isNullOrUndefined.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 106,
          "name": "isNullOrUndefined",
          "comment": {
            "description": "Checks whether or not a value is `null` or `undefined`",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 107,
              "name": "value",
              "comment": {
                "description": "The value to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 391,
              "name": "Nullish",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 109,
      "name": "isNullOrUndefinedOrEmpty",
      "source": {
        "line": 8,
        "file": "isNullOrUndefinedOrEmpty.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isNullOrUndefinedOrEmpty.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 110,
          "name": "isNullOrUndefinedOrEmpty",
          "comment": {
            "description": "Checks whether or not a value is `null`, `undefined` or `''`, `[]`",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 111,
              "name": "value",
              "comment": {
                "description": "The value to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "union",
              "types": [
                {
                  "kind": "literal",
                  "value": ""
                },
                {
                  "kind": "reference",
                  "id": 391,
                  "name": "Nullish",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 113,
      "name": "isNullOrUndefinedOrZero",
      "source": {
        "line": 8,
        "file": "isNullOrUndefinedOrZero.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isNullOrUndefinedOrZero.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 114,
          "name": "isNullOrUndefinedOrZero",
          "comment": {
            "description": "Checks whether or not a value is `null`, `undefined` or `0`",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 115,
              "name": "value",
              "comment": {
                "description": "The value to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "value",
            "type": {
              "kind": "union",
              "types": [
                {
                  "kind": "literal",
                  "value": "0"
                },
                {
                  "kind": "reference",
                  "id": 391,
                  "name": "Nullish",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 117,
      "name": "isNumber",
      "source": {
        "line": 5,
        "file": "isNumber.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isNumber.ts#L5"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 118,
          "name": "isNumber",
          "comment": {
            "description": "Verify if a number is a finite number.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 119,
              "name": "input",
              "comment": {
                "description": "The number to verify",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "intrinsic",
              "type": "number"
            }
          }
        }
      ]
    },
    {
      "id": 120,
      "name": "isObject",
      "source": {
        "line": 8,
        "file": "isObject.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isObject.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 121,
          "name": "isObject",
          "comment": {
            "description": "Verify if the input is an object literal (or class).",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 122,
              "name": "input",
              "comment": {
                "description": "The object to verify",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            },
            {
              "id": 123,
              "name": "constructorType",
              "comment": {
                "description": "The type of the constructor of the object. Use this if you want a `class` of your choosing to pass the check as well.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "ObjectConstructor",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "intrinsic",
              "type": "object"
            }
          }
        },
        {
          "id": 124,
          "name": "isObject",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 125,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 366,
                "name": "Constructor",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 126,
              "name": "input",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            },
            {
              "id": 127,
              "name": "constructorType",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 125,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "InstanceType",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 125,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 128,
      "name": "isPrimitive",
      "source": {
        "line": 7,
        "file": "isPrimitive.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isPrimitive.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 129,
          "name": "isPrimitive",
          "comment": {
            "description": "Check whether a value is a primitive",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 130,
              "name": "input",
              "comment": {
                "description": "The input to check",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "union",
              "types": [
                {
                  "kind": "intrinsic",
                  "type": "string"
                },
                {
                  "kind": "intrinsic",
                  "type": "number"
                },
                {
                  "kind": "intrinsic",
                  "type": "bigint"
                },
                {
                  "kind": "intrinsic",
                  "type": "boolean"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 131,
      "name": "isThenable",
      "source": {
        "line": 21,
        "file": "isThenable.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isThenable.ts#L21"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 132,
          "name": "isThenable",
          "comment": {
            "description": "Verify if an object is a promise.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 133,
              "name": "input",
              "comment": {
                "description": "The promise to verify",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "input",
            "type": {
              "kind": "reference",
              "id": 134,
              "name": "Thenable",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 137,
      "name": "lazy",
      "source": {
        "line": 6,
        "file": "lazy.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/lazy.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 138,
          "name": "lazy",
          "comment": {
            "description": "Lazily creates a constant or load a module and caches it internally",
            "blockTags": [
              {
                "name": "returns",
                "text": "The value returned by the callback, or the cached value if it was already initialised once."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 139,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 140,
              "name": "cb",
              "comment": {
                "description": "The callback to lazily run",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 142,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [],
                    "returnType": {
                      "kind": "reference",
                      "id": 139,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 144,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [],
                "returnType": {
                  "kind": "reference",
                  "id": 139,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            ],
            "methods": null
          }
        }
      ]
    },
    {
      "id": 145,
      "name": "makeObject",
      "source": {
        "line": 7,
        "file": "makeObject.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/makeObject.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 146,
          "name": "makeObject",
          "comment": {
            "description": "Turn a dotted path into a json object.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 147,
              "name": "path",
              "comment": {
                "description": "The dotted path",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            },
            {
              "id": 148,
              "name": "value",
              "comment": {
                "description": "The value",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            },
            {
              "id": 149,
              "name": "obj",
              "comment": {
                "description": "The object to edit",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "Record",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Record",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              },
              {
                "kind": "intrinsic",
                "type": "unknown"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 150,
      "name": "mergeDefault",
      "source": {
        "line": 43,
        "file": "mergeDefault.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/mergeDefault.ts#L43"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 151,
          "name": "mergeDefault",
          "comment": {
            "description": "Deep merges 2 objects. Properties from the second parameter are applied to the first.",
            "blockTags": [
              {
                "name": "remark",
                "text": "`overwrites` is also mutated!"
              },
              {
                "name": "remark",
                "text": "If the value of a key in `overwrites` is `undefined` then the value of that same key in `base` is used instead!"
              },
              {
                "name": "remark",
                "text": "This is essentially `{ ...base, ...overwrites }` but recursively"
              },
              {
                "name": "example",
                "text": "```typescript\nconst base = { a: 0, b: 1 };\nconst overwrites = {}; // will be { a: 0, b: 1 } after merge\nmergeDefault(base, overwrites) // { a: 0, b: 1 }\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst base = { a: 0, b: 1 };\nconst overwrites = { a: 2, i: 3 };\nmergeDefault(base, overwrites) // { a: 2, i: 3, b: 1 };\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst base = { a: 0, b: 1 };\nconst overwrites = { a: null };\nmergeDefault(base, overwrites) // { a: null, b: 1 };\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst base = { a: 0, b: 1 };\nconst overwrites = { a: undefined };\nmergeDefault(base, overwrites) // { a: 0, b: 1 };\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst base = { a: null };\nconst overwrites = { a: { b: 5 } };\nmergeDefault(base, overwrites) // { a: { b: 5 } };\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 152,
              "name": "A",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            },
            {
              "id": 153,
              "name": "B",
              "constraint": {
                "kind": "reference",
                "id": null,
                "name": "Partial",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 152,
                    "name": "A",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 154,
              "name": "base",
              "comment": {
                "description": "Base object",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 152,
                "name": "A",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 155,
              "name": "overwrites",
              "comment": {
                "description": "Overwrites to apply",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 153,
                "name": "B",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 334,
            "name": "DeepRequired",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intersection",
                "types": [
                  {
                    "kind": "reference",
                    "id": 152,
                    "name": "A",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 153,
                    "name": "B",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 156,
      "name": "mergeObjects",
      "source": {
        "line": 8,
        "file": "mergeObjects.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/mergeObjects.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 157,
          "name": "mergeObjects",
          "comment": {
            "description": "Merges two objects",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 158,
              "name": "A",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            },
            {
              "id": 159,
              "name": "B",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 160,
              "name": "objTarget",
              "comment": {
                "description": "The object to be merged",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 158,
                "name": "A",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 161,
              "name": "objSource",
              "comment": {
                "description": "The object to merge",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "Readonly",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 159,
                    "name": "B",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intersection",
            "types": [
              {
                "kind": "reference",
                "id": 158,
                "name": "A",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 159,
                "name": "B",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 162,
      "name": "noop",
      "source": {
        "line": 2,
        "file": "noop.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/noop.ts#L2"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 163,
          "name": "noop",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [],
          "returnType": {
            "kind": "intrinsic",
            "type": "void"
          }
        }
      ]
    },
    {
      "id": 164,
      "name": "objectEntries",
      "source": {
        "line": 1,
        "file": "objectEntries.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/objectEntries.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 165,
          "name": "objectEntries",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 166,
              "name": "T",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 167,
              "name": "obj",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 166,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 166,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ArrayLike",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "Values"
                }
              ]
            },
            "trueType": {
              "kind": "array",
              "type": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "templateLiteral",
                    "head": "",
                    "tail": [
                      {
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        },
                        "text": ""
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "Values",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            },
            "falseType": {
              "kind": "array",
              "type": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 166,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  },
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 166,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 166,
                        "name": "T",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    {
      "id": 168,
      "name": "objectKeys",
      "source": {
        "line": 1,
        "file": "objectKeys.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/objectKeys.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 169,
          "name": "objectKeys",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 170,
              "name": "T",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 171,
              "name": "obj",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 170,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 170,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ArrayLike",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "intrinsic",
                  "type": "any"
                }
              ]
            },
            "trueType": {
              "kind": "array",
              "type": {
                "kind": "templateLiteral",
                "head": "",
                "tail": [
                  {
                    "type": {
                      "kind": "intrinsic",
                      "type": "number"
                    },
                    "text": ""
                  }
                ]
              }
            },
            "falseType": {
              "kind": "array",
              "type": {
                "kind": "typeOperator",
                "operator": "keyof",
                "type": {
                  "kind": "reference",
                  "id": 170,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            }
          }
        }
      ]
    },
    {
      "id": 172,
      "name": "objectToTuples",
      "source": {
        "line": 8,
        "file": "objectToTuples.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/objectToTuples.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 173,
          "name": "objectToTuples",
          "comment": {
            "description": "Convert an object to a tuple",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 174,
              "name": "T",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 175,
              "name": "obj",
              "comment": {
                "description": "The object to convert",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 174,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 176,
              "name": "prefix",
              "comment": {
                "description": "The prefix for the key",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "tuple",
              "types": [
                {
                  "kind": "typeOperator",
                  "operator": "keyof",
                  "type": {
                    "kind": "reference",
                    "id": 174,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                },
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 174,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 174,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 177,
      "name": "objectValues",
      "source": {
        "line": 1,
        "file": "objectValues.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/objectValues.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 178,
          "name": "objectValues",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 179,
              "name": "T",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 180,
              "name": "obj",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 179,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 179,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ArrayLike",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "Values"
                }
              ]
            },
            "trueType": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": null,
                "name": "Values",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            "falseType": {
              "kind": "array",
              "type": {
                "kind": "indexedAccess",
                "objectType": {
                  "kind": "reference",
                  "id": 179,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "indexType": {
                  "kind": "typeOperator",
                  "operator": "keyof",
                  "type": {
                    "kind": "reference",
                    "id": 179,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "id": 181,
      "name": "omitKeysFromObject",
      "source": {
        "line": 13,
        "file": "omitKeysFromObject.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/omitKeysFromObject.ts#L13"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 182,
          "name": "omitKeysFromObject",
          "comment": {
            "description": "Clones the source object using {@link deepClone} then deletes the specified keys with {@link Reflect.deleteProperty}",
            "blockTags": [
              {
                "name": "returns",
                "text": "A new object without the specified keys."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 183,
              "name": "Object",
              "constraint": {
                "kind": "intrinsic",
                "type": "object"
              },
              "default": null
            },
            {
              "id": 184,
              "name": "ObjectKeys",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "symbol"
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 185,
              "name": "source",
              "comment": {
                "description": "The input object.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 183,
                "name": "Object",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 186,
              "name": "keys",
              "comment": {
                "description": "The keys to omit from the object.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 184,
                    "name": "ObjectKeys",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Omit",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 183,
                "name": "Object",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 184,
                "name": "ObjectKeys",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 187,
      "name": "partition",
      "source": {
        "line": 12,
        "file": "partition.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/partition.ts#L12"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 188,
          "name": "partition",
          "comment": {
            "description": "Partitions `array` into a tuple of two arrays,\nwhere one array contains all elements that satisfies `predicate`,\nand the other contains all elements that do not satisfy `predicate`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "A tuple of two arrays."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 189,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 190,
              "name": "array",
              "comment": {
                "description": "The array to partition. This array is not mutated.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 189,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            },
            {
              "id": 191,
              "name": "predicate",
              "comment": {
                "description": "The predicate function to determine in which partition the item should be placed.\nThe function should return true for items that should be placed in the first partition, and false for those that should be placed in the second partition.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 193,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 194,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 189,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 195,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": 189,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          }
        }
      ]
    },
    {
      "id": 196,
      "name": "pickRandom",
      "source": {
        "line": 6,
        "file": "pickRandom.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/pickRandom.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 197,
          "name": "pickRandom",
          "comment": {
            "description": "Picks a random element from an array",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 198,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 199,
              "name": "array",
              "comment": {
                "description": "The array to pick a random element from",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 198,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            },
            {
              "id": 200,
              "name": "amount",
              "comment": {
                "description": "Amount of values to obtain randomly (default: 1)",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "literal",
                "value": "1"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 198,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 201,
          "name": "pickRandom",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 202,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 203,
              "name": "array",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 202,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              }
            },
            {
              "id": 204,
              "name": "amount",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 202,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 205,
      "name": "poll",
      "source": {
        "line": 41,
        "file": "poll.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L41"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 206,
          "name": "poll",
          "comment": {
            "description": "Executes a function {@link cb} and validates the result with function {@link cbCondition},\nand repeats this until {@link cbCondition} returns `true` or the {@link timeout} is reached.\n\nFor a synchronous variant, see [pollSync](./pollSync.d.ts).",
            "blockTags": [
              {
                "name": "returns",
                "text": "The result of {@link cb} as soon as {@link cbCondition} returns `true`, or an error if {@link timeout} is reached."
              },
              {
                "name": "throws",
                "text": "If {@link timeout} is reached."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 207,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 208,
              "name": "cb",
              "comment": {
                "description": "The function that should be executed.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 210,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 211,
                        "name": "signal",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "union",
                          "types": [
                            {
                              "kind": "intrinsic",
                              "type": "undefined"
                            },
                            {
                              "kind": "reference",
                              "id": null,
                              "name": "AbortSignal",
                              "packageName": "typescript",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 389,
                      "name": "Awaitable",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 207,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 212,
              "name": "cbCondition",
              "comment": {
                "description": "A function that when given the result of `cb` should return `true` if the polling should stop and should return `false` if the polling should continue.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 214,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 215,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": null,
                          "name": "Awaited",
                          "packageName": "typescript",
                          "packageVersion": null,
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 207,
                              "name": "T",
                              "packageName": "@sapphire/utilities",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      },
                      {
                        "id": 216,
                        "name": "signal",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "union",
                          "types": [
                            {
                              "kind": "intrinsic",
                              "type": "undefined"
                            },
                            {
                              "kind": "reference",
                              "id": null,
                              "name": "AbortSignal",
                              "packageName": "typescript",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 389,
                      "name": "Awaitable",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      ]
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 217,
              "name": "options",
              "comment": {
                "description": "Options to provide further modifying behaviour.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 218,
                "name": "PollOptions",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Promise",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 389,
                "name": "Awaitable",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 207,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 223,
      "name": "pollSync",
      "source": {
        "line": 29,
        "file": "pollSync.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/pollSync.ts#L29"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 224,
          "name": "pollSync",
          "comment": {
            "description": "Executes a function {@link cb} and validates the result with function {@link cbCondition},\nand repeats this until {@link cbCondition} returns `true` or the {@link timeout} is reached.\n\nFor an asynchronous variant, see [poll](./poll.d.ts).",
            "blockTags": [
              {
                "name": "returns",
                "text": "The result of {@link cb} as soon as {@link cbCondition} returns `true`, or an error if {@link timeout} is reached."
              },
              {
                "name": "throws",
                "text": "If {@link timeout} is reached."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 225,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 226,
              "name": "cb",
              "comment": {
                "description": "The function that should be executed.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 228,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [],
                    "returnType": {
                      "kind": "reference",
                      "id": 225,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 229,
              "name": "cbCondition",
              "comment": {
                "description": "A function that when given the result of `fn` should return `true` if the polling should stop and should return `false` if the polling should continue.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 231,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 232,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 225,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 233,
              "name": "options",
              "comment": {
                "description": "Options to provide further modifying behaviour.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 234,
                "name": "SyncPollOptions",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 225,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 239,
      "name": "range",
      "source": {
        "line": 7,
        "file": "range.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/range.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 240,
          "name": "range",
          "comment": {
            "description": "Get an array of numbers with the selected range",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 241,
              "name": "min",
              "comment": {
                "description": "The minimum value",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 242,
              "name": "max",
              "comment": {
                "description": "The maximum value",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 243,
              "name": "step",
              "comment": {
                "description": "The step value",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "intrinsic",
              "type": "number"
            }
          }
        }
      ]
    },
    {
      "id": 244,
      "name": "regExpEsc",
      "source": {
        "line": 7,
        "file": "regExpEsc.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/regExpEsc.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 245,
          "name": "regExpEsc",
          "comment": {
            "description": "Cleans a string from regex injection",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 246,
              "name": "str",
              "comment": {
                "description": "The string to clean",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 247,
      "name": "retry",
      "source": {
        "line": 10,
        "file": "retry.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/retry.ts#L10"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 248,
          "name": "retry",
          "comment": {
            "description": "Asynchronously calls the callback function until it either succeeds or it runs out of retries.\nFor a synchronous variant, see [retrySync](./retrySync.d.ts).",
            "blockTags": [
              {
                "name": "returns",
                "text": "The result of the callback function is returned."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 249,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 250,
              "name": "cb",
              "comment": {
                "description": "The function to be retried is passed in as a callback function.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 252,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [],
                    "returnType": {
                      "kind": "reference",
                      "id": 389,
                      "name": "Awaitable",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 249,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 253,
              "name": "retries",
              "comment": {
                "description": "The number of retries is also passed in as a parameter. Minimum of 0.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Promise",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 249,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 254,
      "name": "retrySync",
      "source": {
        "line": 8,
        "file": "retrySync.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/retrySync.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 255,
          "name": "retrySync",
          "comment": {
            "description": "Synchronously calls the callback function until it either succeeds or it runs out of retries.\nFor an asynchronous variant, see [retry](./retry.d.ts).",
            "blockTags": [
              {
                "name": "returns",
                "text": "The result of the callback function is returned."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 256,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 257,
              "name": "cb",
              "comment": {
                "description": "The function to be retried is passed in as a callback function.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 259,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [],
                    "returnType": {
                      "kind": "reference",
                      "id": 256,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 260,
              "name": "retries",
              "comment": {
                "description": "The number of retries is also passed in as a parameter. Minimum of 0.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 256,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 261,
      "name": "roundNumber",
      "source": {
        "line": 7,
        "file": "roundNumber.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/roundNumber.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 262,
          "name": "roundNumber",
          "comment": {
            "description": "Rounds a number to a specified amount of decimal places.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 263,
              "name": "input",
              "comment": {
                "description": "The number to round off",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  }
                ]
              }
            },
            {
              "id": 264,
              "name": "decimals",
              "comment": {
                "description": "The amount of decimals to retain",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 265,
      "name": "sleep",
      "source": {
        "line": 22,
        "file": "sleep.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/sleep.ts#L22"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 266,
          "name": "sleep",
          "comment": {
            "description": "Sleeps for the specified number of milliseconds.\nFor a synchronous variant, see [sleepSync](./sleepSync.d.ts).",
            "blockTags": [
              {
                "name": "see",
                "text": "{@link sleepSync} for a synchronous version."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 267,
              "name": "T",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "undefined"
              }
            }
          ],
          "parameters": [
            {
              "id": 268,
              "name": "ms",
              "comment": {
                "description": "The number of milliseconds to sleep.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 269,
              "name": "value",
              "comment": {
                "description": "A value with which the promise is fulfilled.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 267,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 270,
              "name": "options",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 271,
                "name": "SleepOptions",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Promise",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 267,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 274,
      "name": "sleepSync",
      "source": {
        "line": 12,
        "file": "sleepSync.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/sleepSync.ts#L12"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 275,
          "name": "sleepSync",
          "comment": {
            "description": "Sleeps for the specified number of milliseconds synchronously.\nWe should probably note that unlike {@link sleep} (which uses CPU tick times),\nsleepSync uses wall clock times, so the precision is near-absolute by comparison.\nThat, and that synchronous means that nothing else in the thread will run for the length of the timer.\n\nFor an asynchronous variant, see [sleep](./sleep.d.ts).",
            "blockTags": [
              {
                "name": "see",
                "text": "{@link sleep} for an asynchronous version."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 276,
              "name": "T",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "undefined"
              }
            }
          ],
          "parameters": [
            {
              "id": 277,
              "name": "ms",
              "comment": {
                "description": "The number of milliseconds to sleep.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 278,
              "name": "value",
              "comment": {
                "description": "A value to return.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 276,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 276,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 279,
      "name": "snakeToCamelCase",
      "source": {
        "line": 11,
        "file": "snakeToCamelCase.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/snakeToCamelCase.ts#L11"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 280,
          "name": "snakeToCamelCase",
          "comment": {
            "description": "Transforms text from `snAkE_cASE` to `camelCase`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "the input `st_R` as `stR`"
              },
              {
                "name": "example",
                "text": "```ts\nsnakeToCamelCase('hello_world') // 'helloWorld'\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 281,
              "name": "str",
              "comment": {
                "description": "Text to transform",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 283,
      "name": "splitText",
      "source": {
        "line": 9,
        "file": "splitText.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/splitText.ts#L9"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 284,
          "name": "splitText",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 285,
              "name": "str",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            },
            {
              "id": 286,
              "name": "length",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 287,
              "name": "char",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 288,
      "name": "throttle",
      "source": {
        "line": 13,
        "file": "throttle.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/throttle.ts#L13"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 289,
          "name": "throttle",
          "comment": {
            "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds. The throttled function comes with a `flush` method to\nreset the last time the throttled function was invoked.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new throttled function."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 290,
              "name": "T",
              "constraint": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 292,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 293,
                        "name": "args",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": true,
                        "optional": false,
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "any"
                    }
                  }
                ],
                "methods": null
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 294,
              "name": "func",
              "comment": {
                "description": "The function to throttle.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 290,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 295,
              "name": "wait",
              "comment": {
                "description": "The number of milliseconds to throttle invocations to.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 296,
            "name": "ThrottleFn",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 290,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 305,
      "name": "toTitleCase",
      "source": {
        "line": 35,
        "file": "toTitleCase.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/toTitleCase.ts#L35"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 306,
          "name": "toTitleCase",
          "comment": {
            "description": "Converts a string to Title Case",
            "blockTags": [
              {
                "name": "description",
                "text": "This is designed to also ensure common Discord PascalCased strings\nare put in their TitleCase {@link toTitleCaseDiscordJsVariants}.\n\nYou can also provide your own variants to merge with the {@link toTitleCaseDiscordJsVariants} for\nyour own functionality use."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 307,
              "name": "str",
              "comment": {
                "description": "The string to title case",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            },
            {
              "id": 308,
              "name": "options",
              "comment": {
                "description": "The options to use when converting the string",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 310,
                "name": "ToTitleCaseOptions",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ]
    },
    {
      "id": 313,
      "name": "tryParseJSON",
      "source": {
        "line": 6,
        "file": "tryParseJSON.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/tryParseJSON.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 314,
          "name": "tryParseJSON",
          "comment": {
            "description": "Try parse a stringified JSON string.",
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 315,
              "name": "value",
              "comment": {
                "description": "The string to parse as JSON.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            },
            {
              "id": 316,
              "name": "reviver",
              "comment": {
                "description": "A function that transforms the results. This function is recursively called for each member of the object.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 318,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 319,
                        "name": "this",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "object"
                        }
                      },
                      {
                        "id": 320,
                        "name": "key",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "string"
                        }
                      },
                      {
                        "id": 321,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "intrinsic",
                "type": "object"
              },
              {
                "kind": "intrinsic",
                "type": "string"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              },
              {
                "kind": "intrinsic",
                "type": "boolean"
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 323,
      "name": "tryParseURL",
      "source": {
        "line": 6,
        "file": "tryParseURL.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/tryParseURL.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 324,
          "name": "tryParseURL",
          "comment": {
            "description": "Tries parse a string to a {@link URL} object",
            "blockTags": [
              {
                "name": "returns",
                "text": "an URL object if it was a valid URL or `null` if it was not."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 325,
              "name": "value",
              "comment": {
                "description": "The possible URL to parse",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": null,
                "name": "URL",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [
    {
      "id": 48,
      "name": "DebouncedFunc",
      "source": {
        "line": 24,
        "file": "debounce.ts",
        "path": "debounce",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 53,
          "name": "FnArgumentsType",
          "constraint": {
            "kind": "array",
            "type": {
              "kind": "intrinsic",
              "type": "any"
            }
          },
          "default": null
        },
        {
          "id": 54,
          "name": "FnReturnType",
          "constraint": null,
          "default": null
        }
      ],
      "properties": [],
      "methods": [
        {
          "id": 49,
          "name": "cancel",
          "source": {
            "line": 39,
            "file": "debounce.ts",
            "path": "debounce",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L39"
          },
          "parentId": 48,
          "signatures": [
            {
              "id": 50,
              "name": "cancel",
              "comment": {
                "description": "Throw away any pending invocation of the debounced function.",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        },
        {
          "id": 51,
          "name": "flush",
          "source": {
            "line": 48,
            "file": "debounce.ts",
            "path": "debounce",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L48"
          },
          "parentId": 48,
          "signatures": [
            {
              "id": 52,
              "name": "flush",
              "comment": {
                "description": "If there is a pending invocation of the debounced function, invoke it immediately and return\nits return value.\n\nOtherwise, return the value from the last invocation, or undefined if the debounced function\nwas never invoked.",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "undefined"
                  },
                  {
                    "kind": "reference",
                    "id": 54,
                    "name": "DebouncedFunc.FnReturnType",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": 45,
      "name": "DebounceSettings",
      "source": {
        "line": 10,
        "file": "debounce.ts",
        "path": "debounce",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L10"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "lodash (Custom Build) https://lodash.com/\nBuild: `lodash modularize exports=\"npm\" -o ./`\nCopyright jQuery Foundation and other contributors https://jquery.org/\nReleased under MIT license https://lodash.com/license\nBased on Underscore.js 1.8.3 http://underscorejs.org/LICENSE\nCopyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 47,
          "name": "maxWait",
          "source": {
            "line": 21,
            "file": "debounce.ts",
            "path": "debounce",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L21"
          },
          "comment": {
            "description": "The maximum time `func` is allowed to be delayed before it's invoked",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nnull\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 45,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": 46,
          "name": "wait",
          "source": {
            "line": 15,
            "file": "debounce.ts",
            "path": "debounce",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/debounce/debounce.ts#L15"
          },
          "comment": {
            "description": "The number of milliseconds to delay.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\n0\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 45,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ],
      "methods": []
    },
    {
      "id": 82,
      "name": "GetDeepObjectKeysOptions",
      "source": {
        "line": 67,
        "file": "getDeepObjectKeys.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/getDeepObjectKeys.ts#L67"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The options for {@link getDeepObjectKeys}",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 83,
          "name": "arrayKeysIndexStyle",
          "source": {
            "line": 72,
            "file": "getDeepObjectKeys.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/getDeepObjectKeys.ts#L72"
          },
          "comment": {
            "description": "Whether to use `.${index}.` (`'dotted'`), `[${index}].`, (`'braces-with-dot'`) or `[${index}]` (`'braces'`) to separate array keys",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\n'dotted'\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 82,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "dotted"
              },
              {
                "kind": "literal",
                "value": "braces-with-dot"
              },
              {
                "kind": "literal",
                "value": "braces"
              }
            ]
          }
        }
      ],
      "methods": []
    },
    {
      "id": 218,
      "name": "PollOptions",
      "source": {
        "line": 5,
        "file": "poll.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L5"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The options for the {@link poll} function",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 220,
          "name": "maximumRetries",
          "source": {
            "line": 15,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L15"
          },
          "comment": {
            "description": "The amount of attempts to try, if any.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nInfinite\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 218,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": 219,
          "name": "signal",
          "source": {
            "line": 9,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L9"
          },
          "comment": {
            "description": "An optional AbortSignal to abort the polling.",
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 218,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "AbortSignal",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 222,
          "name": "verbose",
          "source": {
            "line": 27,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L27"
          },
          "comment": {
            "description": "Whether to log to the console on each polling interval, allowing the tracing of the amount of required attempts.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nfalse\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 218,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        },
        {
          "id": 221,
          "name": "waitBetweenRetries",
          "source": {
            "line": 21,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L21"
          },
          "comment": {
            "description": "The amount of time to wait between each poll.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\n0\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 218,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        }
      ],
      "methods": []
    },
    {
      "id": 271,
      "name": "SleepOptions",
      "source": {
        "line": 1,
        "file": "sleep.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/sleep.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 273,
          "name": "ref",
          "source": {
            "line": 12,
            "file": "sleep.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/sleep.ts#L12"
          },
          "comment": {
            "description": "Set to `false` to indicate that the scheduled `Timeout`\nshould not require the Node.js event loop to remain active.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\ntrue\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 271,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        },
        {
          "id": 272,
          "name": "signal",
          "source": {
            "line": 5,
            "file": "sleep.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/sleep.ts#L5"
          },
          "comment": {
            "description": "When provided the corresponding `AbortController` can be used to cancel an asynchronous action.",
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 271,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "AbortSignal",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ],
      "methods": []
    },
    {
      "id": 234,
      "name": "SyncPollOptions",
      "source": {
        "line": 5,
        "file": "pollSync.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/pollSync.ts#L5"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The options for the {@link pollSync} function",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 236,
          "name": "maximumRetries",
          "source": {
            "line": 15,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L15"
          },
          "comment": {
            "description": "The amount of attempts to try, if any.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nInfinite\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 234,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": 235,
          "name": "timeout",
          "source": {
            "line": 10,
            "file": "pollSync.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/pollSync.ts#L10"
          },
          "comment": {
            "description": "The amount of milliseconds before throwing an AbortError.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nInfinite\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 234,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        },
        {
          "id": 238,
          "name": "verbose",
          "source": {
            "line": 27,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L27"
          },
          "comment": {
            "description": "Whether to log to the console on each polling interval, allowing the tracing of the amount of required attempts.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\nfalse\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 234,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        },
        {
          "id": 237,
          "name": "waitBetweenRetries",
          "source": {
            "line": 21,
            "file": "poll.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/poll.ts#L21"
          },
          "comment": {
            "description": "The amount of time to wait between each poll.",
            "blockTags": [
              {
                "name": "default",
                "text": "```ts\n0\n```"
              }
            ],
            "modifierTags": []
          },
          "parentId": 234,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        }
      ],
      "methods": []
    },
    {
      "id": 134,
      "name": "Thenable",
      "source": {
        "line": 4,
        "file": "isThenable.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isThenable.ts#L4"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 136,
          "name": "catch",
          "source": {
            "line": 6,
            "file": "isThenable.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isThenable.ts#L6"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 134,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Function",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 135,
          "name": "then",
          "source": {
            "line": 5,
            "file": "isThenable.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/isThenable.ts#L5"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 134,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Function",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      ],
      "methods": []
    },
    {
      "id": 310,
      "name": "ToTitleCaseOptions",
      "source": {
        "line": 56,
        "file": "toTitleCase.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/toTitleCase.ts#L56"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The options to use when converting a string to title case",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "properties": [
        {
          "id": 311,
          "name": "additionalVariants",
          "source": {
            "line": 60,
            "file": "toTitleCase.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/toTitleCase.ts#L60"
          },
          "comment": {
            "description": "The optional additional variants to use when converting the string",
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 310,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Record",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              },
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        },
        {
          "id": 312,
          "name": "caseSensitive",
          "source": {
            "line": 65,
            "file": "toTitleCase.ts",
            "path": ".",
            "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/toTitleCase.ts#L65"
          },
          "comment": {
            "description": "Whether to convert the string to title case in a case sensitive manner.",
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 310,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ],
      "methods": []
    }
  ],
  "namespaces": [],
  "typeAliases": [
    {
      "id": 371,
      "name": "AbstractConstructor",
      "source": {
        "line": 84,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L84"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A generic abstract constructor without parameters",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 375,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "reflection",
        "properties": null,
        "signatures": [
          {
            "id": 373,
            "name": "__type",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "typeParameters": [],
            "parameters": [
              {
                "id": 374,
                "name": "args",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "rest": true,
                "optional": false,
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              }
            ],
            "returnType": {
              "kind": "reference",
              "id": 375,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ],
        "methods": null
      }
    },
    {
      "id": 360,
      "name": "AbstractCtor",
      "source": {
        "line": 74,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L74"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A generic abstract constructor with parameters",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 364,
          "name": "A",
          "constraint": {
            "kind": "reference",
            "id": 353,
            "name": "AnyReadonlyArray",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "default": {
            "kind": "typeOperator",
            "operator": "readonly",
            "type": {
              "kind": "array",
              "type": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          }
        },
        {
          "id": 365,
          "name": "R",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      ],
      "type": {
        "kind": "reflection",
        "properties": null,
        "signatures": [
          {
            "id": 362,
            "name": "__type",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "typeParameters": [],
            "parameters": [
              {
                "id": 363,
                "name": "args",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "rest": true,
                "optional": false,
                "type": {
                  "kind": "reference",
                  "id": 364,
                  "name": "A",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            ],
            "returnType": {
              "kind": "reference",
              "id": 365,
              "name": "R",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ],
        "methods": null
      }
    },
    {
      "id": 396,
      "name": "AnyObject",
      "source": {
        "line": 130,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L130"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "An object that can have any structure, this is an alternative to {@link NonNullObject} for situations where\nthat leads to unexpected type resolutions.\n\nNote that this is still a strictly typed type, it is not simply aliasing `any`",
        "blockTags": [
          {
            "name": "deprecated",
            "text": "Use the `object` type instead."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 397,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "K",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 397,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "indexedAccess",
          "objectType": {
            "kind": "reference",
            "id": 397,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "indexType": {
            "kind": "reference",
            "id": null,
            "name": "K",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "readonly": null,
        "optional": null
      }
    },
    {
      "id": 353,
      "name": "AnyReadonlyArray",
      "source": {
        "line": 64,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L64"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A readonly array of any values.",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "typeOperator",
        "operator": "readonly",
        "type": {
          "kind": "array",
          "type": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      }
    },
    {
      "id": 345,
      "name": "ArgumentTypes",
      "source": {
        "line": 59,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L59"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 349,
          "name": "F",
          "constraint": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 351,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 352,
                    "name": "args",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": true,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "unknown"
                }
              }
            ],
            "methods": null
          },
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 349,
          "name": "F",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reflection",
          "properties": null,
          "signatures": [
            {
              "id": 347,
              "name": "__type",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 348,
                  "name": "args",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": true,
                  "optional": false,
                  "type": {
                    "kind": "inferred",
                    "type": "A"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          ],
          "methods": null
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "A",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "intrinsic",
          "type": "never"
        }
      }
    },
    {
      "id": 407,
      "name": "ArrayElementType",
      "source": {
        "line": 237,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L237"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Gets a union type of all the keys that are in an array.",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\nconst sample = [1, 2, '3', true];\n\ntype arrayUnion = ArrayElementType<typeof sample>;\n// Expected: string | number | boolean\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 408,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 408,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "array",
          "type": {
            "kind": "inferred",
            "type": "K"
          }
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "K",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 408,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "extendsType": {
            "kind": "typeOperator",
            "operator": "readonly",
            "type": {
              "kind": "array",
              "type": {
                "kind": "inferred",
                "type": "RK"
              }
            }
          },
          "trueType": {
            "kind": "reference",
            "id": null,
            "name": "RK",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "falseType": {
            "kind": "reference",
            "id": 408,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        }
      }
    },
    {
      "id": 389,
      "name": "Awaitable",
      "source": {
        "line": 99,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L99"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "ReturnType for a function that can return either a value or a `Promise` with that value",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 390,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": null,
            "name": "PromiseLike",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 390,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": 390,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 328,
      "name": "Builtin",
      "source": {
        "line": 4,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L4"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": 327,
            "name": "Primitive",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Function",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Date",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Error",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": null,
            "name": "RegExp",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 366,
      "name": "Constructor",
      "source": {
        "line": 79,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L79"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A generic constructor without parameters",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 370,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "reflection",
        "properties": null,
        "signatures": [
          {
            "id": 368,
            "name": "__type",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "typeParameters": [],
            "parameters": [
              {
                "id": 369,
                "name": "args",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "rest": true,
                "optional": false,
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              }
            ],
            "returnType": {
              "kind": "reference",
              "id": 370,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ],
        "methods": null
      }
    },
    {
      "id": 354,
      "name": "Ctor",
      "source": {
        "line": 69,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L69"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A generic constructor with parameters",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 358,
          "name": "A",
          "constraint": {
            "kind": "reference",
            "id": 353,
            "name": "AnyReadonlyArray",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "default": {
            "kind": "typeOperator",
            "operator": "readonly",
            "type": {
              "kind": "array",
              "type": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          }
        },
        {
          "id": 359,
          "name": "R",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      ],
      "type": {
        "kind": "reflection",
        "properties": null,
        "signatures": [
          {
            "id": 356,
            "name": "__type",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "typeParameters": [],
            "parameters": [
              {
                "id": 357,
                "name": "args",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "rest": true,
                "optional": false,
                "type": {
                  "kind": "reference",
                  "id": 358,
                  "name": "A",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            ],
            "returnType": {
              "kind": "reference",
              "id": 359,
              "name": "R",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ],
        "methods": null
      }
    },
    {
      "id": 343,
      "name": "DeepPartial",
      "source": {
        "line": 51,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L51"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 344,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "P",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 344,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "conditional",
          "checkType": {
            "kind": "indexedAccess",
            "objectType": {
              "kind": "reference",
              "id": 344,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "indexType": {
              "kind": "reference",
              "id": null,
              "name": "P",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          },
          "extendsType": {
            "kind": "array",
            "type": {
              "kind": "inferred",
              "type": "U"
            }
          },
          "trueType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 343,
              "name": "DeepPartial",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": null,
                  "name": "U",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              ]
            }
          },
          "falseType": {
            "kind": "conditional",
            "checkType": {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": 344,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "reference",
                "id": null,
                "name": "P",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyArray",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "U"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyArray",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 343,
                  "name": "DeepPartial",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "U",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              ]
            },
            "falseType": {
              "kind": "reference",
              "id": 343,
              "name": "DeepPartial",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 344,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ]
            }
          }
        },
        "readonly": null,
        "optional": "+"
      }
    },
    {
      "id": 329,
      "name": "DeepReadonly",
      "source": {
        "line": 6,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L6"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 333,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 333,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reference",
          "id": 328,
          "name": "Builtin",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "trueType": {
          "kind": "reference",
          "id": 333,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 333,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "extendsType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 371,
                "name": "AbstractConstructor",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              },
              {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 331,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 332,
                        "name": "args",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": true,
                        "optional": false,
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  }
                ],
                "methods": null
              }
            ]
          },
          "trueType": {
            "kind": "reference",
            "id": 333,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "falseType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 333,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyMap",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "K"
                },
                {
                  "kind": "inferred",
                  "type": "V"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyMap",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 329,
                  "name": "DeepReadonly",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "K",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                },
                {
                  "kind": "reference",
                  "id": 329,
                  "name": "DeepReadonly",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "V",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              ]
            },
            "falseType": {
              "kind": "conditional",
              "checkType": {
                "kind": "reference",
                "id": 333,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "extendsType": {
                "kind": "reference",
                "id": null,
                "name": "ReadonlySet",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "inferred",
                    "type": "U"
                  }
                ]
              },
              "trueType": {
                "kind": "reference",
                "id": null,
                "name": "ReadonlySet",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 329,
                    "name": "DeepReadonly",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "U",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              },
              "falseType": {
                "kind": "conditional",
                "checkType": {
                  "kind": "reference",
                  "id": 333,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "extendsType": {
                  "kind": "union",
                  "types": [
                    {
                      "kind": "typeOperator",
                      "operator": "readonly",
                      "type": {
                        "kind": "tuple",
                        "types": []
                      }
                    },
                    {
                      "kind": "typeOperator",
                      "operator": "readonly",
                      "type": {
                        "kind": "tuple",
                        "types": [
                          {
                            "kind": "rest",
                            "type": {
                              "kind": "array",
                              "type": {
                                "kind": "intrinsic",
                                "type": "never"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "trueType": {
                  "kind": "typeOperator",
                  "operator": "readonly",
                  "type": {
                    "kind": "tuple",
                    "types": []
                  }
                },
                "falseType": {
                  "kind": "conditional",
                  "checkType": {
                    "kind": "reference",
                    "id": 333,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "extendsType": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "tuple",
                      "types": [
                        {
                          "kind": "inferred",
                          "type": "U"
                        },
                        {
                          "kind": "rest",
                          "type": {
                            "kind": "inferred",
                            "type": "V"
                          }
                        }
                      ]
                    }
                  },
                  "trueType": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "tuple",
                      "types": [
                        {
                          "kind": "reference",
                          "id": 329,
                          "name": "DeepReadonly",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": null,
                              "name": "U",
                              "packageName": "@sapphire/utilities",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        },
                        {
                          "kind": "rest",
                          "type": {
                            "kind": "reference",
                            "id": 329,
                            "name": "DeepReadonly",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "V",
                                "packageName": "@sapphire/utilities",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "falseType": {
                    "kind": "conditional",
                    "checkType": {
                      "kind": "reference",
                      "id": 333,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    "extendsType": {
                      "kind": "typeOperator",
                      "operator": "readonly",
                      "type": {
                        "kind": "tuple",
                        "types": [
                          {
                            "kind": "rest",
                            "type": {
                              "kind": "inferred",
                              "type": "U"
                            }
                          },
                          {
                            "kind": "inferred",
                            "type": "V"
                          }
                        ]
                      }
                    },
                    "trueType": {
                      "kind": "typeOperator",
                      "operator": "readonly",
                      "type": {
                        "kind": "tuple",
                        "types": [
                          {
                            "kind": "rest",
                            "type": {
                              "kind": "reference",
                              "id": 329,
                              "name": "DeepReadonly",
                              "packageName": "@sapphire/utilities",
                              "packageVersion": null,
                              "typeArguments": [
                                {
                                  "kind": "unknown",
                                  "name": "..."
                                }
                              ]
                            }
                          },
                          {
                            "kind": "reference",
                            "id": 329,
                            "name": "DeepReadonly",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "V",
                                "packageName": "@sapphire/utilities",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "falseType": {
                      "kind": "conditional",
                      "checkType": {
                        "kind": "reference",
                        "id": 333,
                        "name": "T",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      "extendsType": {
                        "kind": "reference",
                        "id": null,
                        "name": "ReadonlyArray",
                        "packageName": "typescript",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "inferred",
                            "type": "U"
                          }
                        ]
                      },
                      "trueType": {
                        "kind": "reference",
                        "id": null,
                        "name": "ReadonlyArray",
                        "packageName": "typescript",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 329,
                            "name": "DeepReadonly",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "U",
                                "packageName": "@sapphire/utilities",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      "falseType": {
                        "kind": "conditional",
                        "checkType": {
                          "kind": "reference",
                          "id": 333,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        "extendsType": {
                          "kind": "intrinsic",
                          "type": "object"
                        },
                        "trueType": {
                          "kind": "mapped",
                          "parameter": "K",
                          "parameterType": {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "unknown",
                              "name": "..."
                            }
                          },
                          "nameType": null,
                          "templateType": {
                            "kind": "reference",
                            "id": 329,
                            "name": "DeepReadonly",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "unknown",
                                "name": "..."
                              }
                            ]
                          },
                          "readonly": "+",
                          "optional": null
                        },
                        "falseType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "id": 334,
      "name": "DeepRequired",
      "source": {
        "line": 27,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L27"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 336,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 336,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reference",
          "id": 328,
          "name": "Builtin",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "NonNullable",
          "packageName": "typescript",
          "packageVersion": null,
          "typeArguments": [
            {
              "kind": "reference",
              "id": 336,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          ]
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 336,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "extendsType": {
            "kind": "reference",
            "id": null,
            "name": "Map",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "inferred",
                "type": "K"
              },
              {
                "kind": "inferred",
                "type": "V"
              }
            ]
          },
          "trueType": {
            "kind": "reference",
            "id": null,
            "name": "Map",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 334,
                "name": "DeepRequired",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              },
              {
                "kind": "reference",
                "id": 334,
                "name": "DeepRequired",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "V",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          },
          "falseType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 336,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyMap",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "K"
                },
                {
                  "kind": "inferred",
                  "type": "V"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "ReadonlyMap",
              "packageName": "typescript",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 334,
                  "name": "DeepRequired",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "K",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                },
                {
                  "kind": "reference",
                  "id": 334,
                  "name": "DeepRequired",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "V",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              ]
            },
            "falseType": {
              "kind": "conditional",
              "checkType": {
                "kind": "reference",
                "id": 336,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "extendsType": {
                "kind": "reference",
                "id": null,
                "name": "WeakMap",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "inferred",
                    "type": "K"
                  },
                  {
                    "kind": "inferred",
                    "type": "V"
                  }
                ]
              },
              "trueType": {
                "kind": "reference",
                "id": null,
                "name": "WeakMap",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 334,
                    "name": "DeepRequired",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "K",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 334,
                    "name": "DeepRequired",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "V",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              },
              "falseType": {
                "kind": "conditional",
                "checkType": {
                  "kind": "reference",
                  "id": 336,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "extendsType": {
                  "kind": "reference",
                  "id": null,
                  "name": "Set",
                  "packageName": "typescript",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "inferred",
                      "type": "U"
                    }
                  ]
                },
                "trueType": {
                  "kind": "reference",
                  "id": null,
                  "name": "Set",
                  "packageName": "typescript",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 334,
                      "name": "DeepRequired",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": null,
                          "name": "U",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    }
                  ]
                },
                "falseType": {
                  "kind": "conditional",
                  "checkType": {
                    "kind": "reference",
                    "id": 336,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "extendsType": {
                    "kind": "reference",
                    "id": null,
                    "name": "ReadonlySet",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "inferred",
                        "type": "U"
                      }
                    ]
                  },
                  "trueType": {
                    "kind": "reference",
                    "id": null,
                    "name": "ReadonlySet",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 334,
                        "name": "DeepRequired",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "U",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  },
                  "falseType": {
                    "kind": "conditional",
                    "checkType": {
                      "kind": "reference",
                      "id": 336,
                      "name": "T",
                      "packageName": "@sapphire/utilities",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    "extendsType": {
                      "kind": "reference",
                      "id": null,
                      "name": "WeakSet",
                      "packageName": "typescript",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "inferred",
                          "type": "U"
                        }
                      ]
                    },
                    "trueType": {
                      "kind": "reference",
                      "id": null,
                      "name": "WeakSet",
                      "packageName": "typescript",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 334,
                          "name": "DeepRequired",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": null,
                              "name": "U",
                              "packageName": "@sapphire/utilities",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      ]
                    },
                    "falseType": {
                      "kind": "conditional",
                      "checkType": {
                        "kind": "reference",
                        "id": 336,
                        "name": "T",
                        "packageName": "@sapphire/utilities",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      "extendsType": {
                        "kind": "reference",
                        "id": null,
                        "name": "Promise",
                        "packageName": "typescript",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "inferred",
                            "type": "U"
                          }
                        ]
                      },
                      "trueType": {
                        "kind": "reference",
                        "id": null,
                        "name": "Promise",
                        "packageName": "typescript",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 334,
                            "name": "DeepRequired",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "U",
                                "packageName": "@sapphire/utilities",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      "falseType": {
                        "kind": "conditional",
                        "checkType": {
                          "kind": "reference",
                          "id": 336,
                          "name": "T",
                          "packageName": "@sapphire/utilities",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        "extendsType": {
                          "kind": "reflection",
                          "properties": null,
                          "signatures": null,
                          "methods": null
                        },
                        "trueType": {
                          "kind": "mapped",
                          "parameter": "K",
                          "parameterType": {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "unknown",
                              "name": "..."
                            }
                          },
                          "nameType": null,
                          "templateType": {
                            "kind": "reference",
                            "id": 334,
                            "name": "DeepRequired",
                            "packageName": "@sapphire/utilities",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "unknown",
                                "name": "..."
                              }
                            ]
                          },
                          "readonly": null,
                          "optional": "-"
                        },
                        "falseType": {
                          "kind": "reference",
                          "id": null,
                          "name": "NonNullable",
                          "packageName": "typescript",
                          "packageVersion": null,
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 336,
                              "name": "T",
                              "packageName": "@sapphire/utilities",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "id": 376,
      "name": "FirstArgument",
      "source": {
        "line": 89,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L89"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Gets the first argument of any given function",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 381,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 381,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reflection",
          "properties": null,
          "signatures": [
            {
              "id": 378,
              "name": "__type",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 379,
                  "name": "arg1",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "inferred",
                    "type": "U"
                  }
                },
                {
                  "id": 380,
                  "name": "args",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": true,
                  "optional": false,
                  "type": {
                    "kind": "array",
                    "type": {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "methods": null
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "U",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "intrinsic",
          "type": "unknown"
        }
      }
    },
    {
      "id": 409,
      "name": "If",
      "source": {
        "line": 258,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L258"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type utility that allows branching of types depending on the `Value` parameter.",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ndeclare function get<const GetValues extends boolean = false>(\n  getValues?: GetValues\n): If<GetValues, string, string[]>;\n\nconst a = get(true);\n//    ^? string\n\nconst b = get(false);\n//    ^? string[]\n\ndeclare const someBoolean: boolean;\nconst c = get(someBoolean);\n//    ^? string | string[]\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 410,
          "name": "Value",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": null
        },
        {
          "id": 411,
          "name": "TrueResult",
          "constraint": null,
          "default": null
        },
        {
          "id": 412,
          "name": "FalseResult",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 410,
          "name": "Value",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "literal",
          "value": "true"
        },
        "trueType": {
          "kind": "reference",
          "id": 411,
          "name": "TrueResult",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 410,
            "name": "Value",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "extendsType": {
            "kind": "literal",
            "value": "false"
          },
          "trueType": {
            "kind": "reference",
            "id": 412,
            "name": "FalseResult",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "falseType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 411,
                "name": "TrueResult",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 412,
                "name": "FalseResult",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      }
    },
    {
      "id": 403,
      "name": "Mutable",
      "source": {
        "line": 200,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L200"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Transforms a `readonly` type to be mutable",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ninterface Sample {\n\tid: string;\n\thobbies: readonly string[];\n}\n\ntype BB = Mutable<Sample>;\n// Expected:\n// {\n//    id: string;\n//    hobbies: string[];\n// }\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 404,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "P",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 404,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "conditional",
          "checkType": {
            "kind": "indexedAccess",
            "objectType": {
              "kind": "reference",
              "id": 404,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "indexType": {
              "kind": "reference",
              "id": null,
              "name": "P",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          },
          "extendsType": {
            "kind": "union",
            "types": [
              {
                "kind": "array",
                "type": {
                  "kind": "intrinsic",
                  "type": "unknown"
                }
              },
              {
                "kind": "intrinsic",
                "type": "object"
              }
            ]
          },
          "trueType": {
            "kind": "reference",
            "id": 403,
            "name": "Mutable",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "indexedAccess",
                "objectType": {
                  "kind": "reference",
                  "id": 404,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "indexType": {
                  "kind": "reference",
                  "id": null,
                  "name": "P",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            ]
          },
          "falseType": {
            "kind": "indexedAccess",
            "objectType": {
              "kind": "reference",
              "id": 404,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            },
            "indexType": {
              "kind": "reference",
              "id": null,
              "name": "P",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        },
        "readonly": "-",
        "optional": null
      }
    },
    {
      "id": 392,
      "name": "NonNullableProperties",
      "source": {
        "line": 110,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L110"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Similar to the built in {@link NonNullable}, but properly removes `null` from all keys in the class or interface\nThis does not recurse deeply, for that use {@link DeepRequired}",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 393,
          "name": "T",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "P",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 393,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "reference",
          "id": null,
          "name": "NonNullable",
          "packageName": "typescript",
          "packageVersion": null,
          "typeArguments": [
            {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": 393,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "reference",
                "id": null,
                "name": "P",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ]
        },
        "readonly": null,
        "optional": null
      }
    },
    {
      "id": 394,
      "name": "NonNullObject",
      "source": {
        "line": 120,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L120"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "An object that is non nullable, to bypass TypeScript not easily working with `Record<PropertyKey, unknown>` in various instances.",
        "blockTags": [
          {
            "name": "deprecated",
            "text": "Use the `object` type instead."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "intersection",
        "types": [
          {
            "kind": "reflection",
            "properties": null,
            "signatures": null,
            "methods": null
          },
          {
            "kind": "intrinsic",
            "type": "object"
          }
        ]
      }
    },
    {
      "id": 391,
      "name": "Nullish",
      "source": {
        "line": 104,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L104"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Type union for the full 2 billion dollar mistake in the JavaScript ecosystem",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "literal",
            "value": "null"
          },
          {
            "kind": "intrinsic",
            "type": "undefined"
          }
        ]
      }
    },
    {
      "id": 340,
      "name": "PartialRequired",
      "source": {
        "line": 49,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L49"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 341,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 342,
          "name": "K",
          "constraint": {
            "kind": "typeOperator",
            "operator": "keyof",
            "type": {
              "kind": "reference",
              "id": 341,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          },
          "default": null
        }
      ],
      "type": {
        "kind": "intersection",
        "types": [
          {
            "kind": "reference",
            "id": null,
            "name": "Partial",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Omit",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 341,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 342,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Required",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Pick",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 341,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 342,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "id": 400,
      "name": "PickByValue",
      "source": {
        "line": 178,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L178"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Gets all the keys (as a string union) from a type `T` that match value `V`",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ninterface Sample {\n\tid: string;\n\tname: string | null;\n\tmiddleName?: string;\n\tlastName: string;\n\thobbies: readonly string[];\n}\n\ntype BB = PickByValue<Sample, string>;\n// Expected:\n// \"id\" | \"lastName\"\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 401,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 402,
          "name": "V",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "intersection",
        "types": [
          {
            "kind": "indexedAccess",
            "objectType": {
              "kind": "mapped",
              "parameter": "P",
              "parameterType": {
                "kind": "typeOperator",
                "operator": "keyof",
                "type": {
                  "kind": "reference",
                  "id": 401,
                  "name": "T",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                }
              },
              "nameType": null,
              "templateType": {
                "kind": "conditional",
                "checkType": {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 401,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                },
                "extendsType": {
                  "kind": "reference",
                  "id": 402,
                  "name": "V",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "trueType": {
                  "kind": "reference",
                  "id": null,
                  "name": "P",
                  "packageName": "@sapphire/utilities",
                  "packageVersion": null,
                  "typeArguments": []
                },
                "falseType": {
                  "kind": "intrinsic",
                  "type": "never"
                }
              },
              "readonly": null,
              "optional": null
            },
            "indexType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 401,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          },
          {
            "kind": "typeOperator",
            "operator": "keyof",
            "type": {
              "kind": "reference",
              "id": 401,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ]
      }
    },
    {
      "id": 398,
      "name": "PrettifyObject",
      "source": {
        "line": 157,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L157"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "An utility type that fuses intersections of objects.",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ntype Objects = {\n  foo: string;\n  bar: number;\n} & {\n  hello: boolean;\n  world: bigint;\n};\n\ntype PrettyObjects = PrettifyObject<Objects>;\n// {\n//   foo: string;\n//   bar: number;\n//   hello: boolean;\n//   world: bigint\n// }\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 399,
          "name": "T",
          "constraint": {
            "kind": "intrinsic",
            "type": "object"
          },
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "K",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 399,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "indexedAccess",
          "objectType": {
            "kind": "reference",
            "id": 399,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          "indexType": {
            "kind": "reference",
            "id": null,
            "name": "K",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "readonly": null,
        "optional": null
      }
    },
    {
      "id": 327,
      "name": "Primitive",
      "source": {
        "line": 1,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "intrinsic",
            "type": "string"
          },
          {
            "kind": "intrinsic",
            "type": "number"
          },
          {
            "kind": "intrinsic",
            "type": "boolean"
          },
          {
            "kind": "intrinsic",
            "type": "bigint"
          },
          {
            "kind": "intrinsic",
            "type": "symbol"
          },
          {
            "kind": "intrinsic",
            "type": "undefined"
          },
          {
            "kind": "literal",
            "value": "null"
          }
        ]
      }
    },
    {
      "id": 337,
      "name": "RequiredExcept",
      "source": {
        "line": 47,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L47"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 338,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 339,
          "name": "K",
          "constraint": {
            "kind": "typeOperator",
            "operator": "keyof",
            "type": {
              "kind": "reference",
              "id": 338,
              "name": "T",
              "packageName": "@sapphire/utilities",
              "packageVersion": null,
              "typeArguments": []
            }
          },
          "default": null
        }
      ],
      "type": {
        "kind": "intersection",
        "types": [
          {
            "kind": "reference",
            "id": null,
            "name": "Partial",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Pick",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 338,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 339,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Required",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Omit",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 338,
                    "name": "T",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 339,
                    "name": "K",
                    "packageName": "@sapphire/utilities",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "id": 413,
      "name": "RequiredIf",
      "source": {
        "line": 283,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L283"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type utility that allows branching of an union type on the `Value` parameter.",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ndeclare function get<const Required extends boolean = false>(\n  required?: Required\n): If<Required, string>;\n\nconst a = get(true);\n//    ^? string\n\nconst b = get(false);\n//    ^? string | null\n\ndeclare const someBoolean: boolean;\nconst c = get(someBoolean);\n//    ^? string | null\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 414,
          "name": "Value",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": null
        },
        {
          "id": 415,
          "name": "ValueType",
          "constraint": null,
          "default": null
        },
        {
          "id": 416,
          "name": "FallbackType",
          "constraint": null,
          "default": {
            "kind": "literal",
            "value": "null"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 409,
        "name": "If",
        "packageName": "@sapphire/utilities",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 414,
            "name": "Value",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 415,
            "name": "ValueType",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 415,
                "name": "ValueType",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 416,
                "name": "FallbackType",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        ]
      }
    },
    {
      "id": 382,
      "name": "SecondArgument",
      "source": {
        "line": 94,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L94"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Gets the second argument of any given function",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 388,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 388,
          "name": "T",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reflection",
          "properties": null,
          "signatures": [
            {
              "id": 384,
              "name": "__type",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 385,
                  "name": "arg1",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                },
                {
                  "id": 386,
                  "name": "arg2",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "inferred",
                    "type": "U"
                  }
                },
                {
                  "id": 387,
                  "name": "args",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": true,
                  "optional": false,
                  "type": {
                    "kind": "array",
                    "type": {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "methods": null
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "U",
          "packageName": "@sapphire/utilities",
          "packageVersion": null,
          "typeArguments": []
        },
        "falseType": {
          "kind": "intrinsic",
          "type": "unknown"
        }
      }
    },
    {
      "id": 405,
      "name": "StrictRequired",
      "source": {
        "line": 223,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/types.ts#L223"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "Transforms every key in an object to be strictly required, essentially removing `undefined` and `null` from the type.",
        "blockTags": [
          {
            "name": "example",
            "text": "```typescript\ninterface Sample {\n\tid: string;\n\tname: string | null;\n\tmiddleName?: string;\n}\n\ntype BB = StrictRequired<Sample>;\n// Expected:\n// {\n//    id: string;\n//    name: string;\n//    middleName: string;\n// }\n```"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 406,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "P",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 406,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "reference",
          "id": null,
          "name": "NonNullable",
          "packageName": "typescript",
          "packageVersion": null,
          "typeArguments": [
            {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": 406,
                "name": "T",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "reference",
                "id": null,
                "name": "P",
                "packageName": "@sapphire/utilities",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ]
        },
        "readonly": null,
        "optional": "-"
      }
    },
    {
      "id": 296,
      "name": "ThrottleFn",
      "source": {
        "line": 1,
        "file": "throttle.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/throttle.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 301,
          "name": "T",
          "constraint": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 303,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 304,
                    "name": "args",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": true,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              }
            ],
            "methods": null
          },
          "default": null
        }
      ],
      "type": {
        "kind": "intersection",
        "types": [
          {
            "kind": "reference",
            "id": 301,
            "name": "T",
            "packageName": "@sapphire/utilities",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reflection",
            "properties": [
              {
                "id": 298,
                "name": "flush",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "readonly": false,
                "optional": false,
                "type": {
                  "kind": "reflection",
                  "properties": null,
                  "signatures": [
                    {
                      "id": 300,
                      "name": "__type",
                      "comment": {
                        "description": null,
                        "blockTags": [],
                        "modifierTags": []
                      },
                      "typeParameters": [],
                      "parameters": [],
                      "returnType": {
                        "kind": "intrinsic",
                        "type": "void"
                      }
                    }
                  ],
                  "methods": null
                }
              }
            ],
            "signatures": null,
            "methods": null
          }
        ]
      }
    }
  ],
  "variables": [
    {
      "id": 309,
      "name": "toTitleCaseDiscordJsVariants",
      "source": {
        "line": 16,
        "file": "toTitleCase.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/6abc55224deb9de8f54896227b4906b133c5a2b6/packages/utilities/src/lib/toTitleCase.ts#L16"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The variants that will not strictly follow the `toTitleCase` algorithm\nand will instead return the value matched with the key.\n\nThis table lists how certain terms are converted.\nAny terms not included are converted to regular `Titlecase`.\n|       Term       |   Converted To   |\n|:---------------- |:---------------- |\n| textchannel      | TextChannel      |\n| voicechannel     | VoiceChannel     |\n| categorychannel  | CategoryChannel  |\n| guildmember      | GuildMember      |",
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "type": {
        "kind": "reference",
        "id": null,
        "name": "Record",
        "packageName": "typescript",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "intrinsic",
            "type": "string"
          },
          {
            "kind": "intrinsic",
            "type": "string"
          }
        ]
      },
      "value": "..."
    }
  ]
}