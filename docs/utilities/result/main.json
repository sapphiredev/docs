{
  "typeDocJsonParserVersion": "5.2.0",
  "id": 0,
  "name": "@sapphire/result",
  "version": "2.5.0",
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://cdn.skyra.pw/gh-assets/sapphire-banner.png)\n\n# @sapphire/result\n\n**A TypeScript port of Nightly Rust's Result and Option structs**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/utilities/branch/main/graph/badge.svg?token=OEGIV6RFDO)](https://codecov.io/gh/sapphiredev/utilities)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/result?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/result)\n[![npm](https://img.shields.io/npm/v/@sapphire/result?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/result)\n\n</div>\n\n## Description\n\nWhen having many `try-catch` blocks after one another, or multiple `try-catch` blocks nested in one another then code can become very chaotic very quickly. To alleviate that issue we have made the `@sapphire/result` which offers two structures based on Rust's [`Result<T, E>`](https://doc.rust-lang.org/std/result/index.html) and [`Option<T>`](https://doc.rust-lang.org/std/option/enum.Option.html) with full Nightly coverage and extra convenience methods. This code has been branched off of `@sapphire/framework` into its own package after we saw great success with the code there.\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Full feature parity with Nightly Rust's `Result<T, E>` and `Option<T>`\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/result\n```\n\n## Usage\n\n**Note:** While this section uses `require`, the imports match 1:1 with ESM imports. For example `const { Result } = require('@sapphire/result')` equals `import { Result } from '@sapphire/result'`.\n\n### Wrapping synchronous `try-catch` blocks\n\n**Old code without `Result.from`:**\n\n```typescript\ntry {\n\tconst returnCode = someFunctionThatMightThrow();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.from`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = Result.from(() => someFunctionThatMightThrow());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n### Wrapping asynchronous `try-catch` blocks\n\n**Old code without `Result.fromAsync`:**\n\n```typescript\ntry {\n\tconst returnCode = await someFunctionThatReturnsAPromiseAndMightReject();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.fromAsync`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = await Result.fromAsync(async () => someFunctionThatReturnsAPromiseAndMightReject());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n---\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://favware.tech/\"><img src=\"https://avatars3.githubusercontent.com/u/4019718?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeroen Claassens</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=favna\" title=\"Code\">💻</a> <a href=\"#infra-favna\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#projectManagement-favna\" title=\"Project Management\">📆</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=favna\" title=\"Documentation\">📖</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=favna\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kyranet\"><img src=\"https://avatars0.githubusercontent.com/u/24852502?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aura Román</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=kyranet\" title=\"Code\">💻</a> <a href=\"#projectManagement-kyranet\" title=\"Project Management\">📆</a> <a href=\"https://github.com/sapphiredev/utilities/pulls?q=is%3Apr+reviewed-by%3Akyranet\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=kyranet\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/PyroTechniac\"><img src=\"https://avatars2.githubusercontent.com/u/39341355?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gryffon Bellish</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=PyroTechniac\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/utilities/pulls?q=is%3Apr+reviewed-by%3APyroTechniac\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=PyroTechniac\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/vladfrangu\"><img src=\"https://avatars3.githubusercontent.com/u/17960496?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Frangu</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=vladfrangu\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/utilities/issues?q=author%3Avladfrangu\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/sapphiredev/utilities/pulls?q=is%3Apr+reviewed-by%3Avladfrangu\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#userTesting-vladfrangu\" title=\"User Testing\">📓</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=vladfrangu\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Stitch07\"><img src=\"https://avatars0.githubusercontent.com/u/29275227?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Stitch07</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Stitch07\" title=\"Code\">💻</a> <a href=\"#projectManagement-Stitch07\" title=\"Project Management\">📆</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=Stitch07\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/depfu\"><img src=\"https://avatars3.githubusercontent.com/in/715?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>depfu[bot]</b></sub></a><br /><a href=\"#maintenance-depfu[bot]\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/allcontributors\"><img src=\"https://avatars0.githubusercontent.com/in/23186?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>allcontributors[bot]</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=allcontributors[bot]\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Nytelife26\"><img src=\"https://avatars1.githubusercontent.com/u/22531310?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tyler J Russell</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Nytelife26\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Alcremie\"><img src=\"https://avatars0.githubusercontent.com/u/54785334?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ivan Lieder</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Alcremie\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/utilities/issues?q=author%3AAlcremie\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/RealShadowNova\"><img src=\"https://avatars3.githubusercontent.com/u/46537907?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hezekiah Hendry</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=RealShadowNova\" title=\"Code\">💻</a> <a href=\"#tool-RealShadowNova\" title=\"Tools\">🔧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Vetlix\"><img src=\"https://avatars.githubusercontent.com/u/31412314?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vetlix</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Vetlix\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ethamitc\"><img src=\"https://avatars.githubusercontent.com/u/27776796?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ethan Mitchell</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=ethamitc\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/noftaly\"><img src=\"https://avatars.githubusercontent.com/u/34779161?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=noftaly\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://jurien.dev\"><img src=\"https://avatars.githubusercontent.com/u/5418114?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jurien Hamaker</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=jurienhamaker\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://fanoulis.dev/\"><img src=\"https://avatars.githubusercontent.com/u/38255093?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charalampos Fanoulis</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=cfanoulis\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/dependabot\"><img src=\"https://avatars.githubusercontent.com/in/29110?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>dependabot[bot]</b></sub></a><br /><a href=\"#maintenance-dependabot[bot]\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://kaname.netlify.app/\"><img src=\"https://avatars.githubusercontent.com/u/56084970?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kaname</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=kaname-png\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nandhagk\"><img src=\"https://avatars.githubusercontent.com/u/62976649?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>nandhagk</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/issues?q=author%3Anandhagk\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://megatank58.me/\"><img src=\"https://avatars.githubusercontent.com/u/51410502?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>megatank58</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=megatank58\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/UndiedGamer\"><img src=\"https://avatars.githubusercontent.com/u/84702365?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>UndiedGamer</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=UndiedGamer\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Lioness100\"><img src=\"https://avatars.githubusercontent.com/u/65814829?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Lioness100</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Lioness100\" title=\"Documentation\">📖</a> <a href=\"https://github.com/sapphiredev/utilities/commits?author=Lioness100\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://gitlab.com/DavidPH/\"><img src=\"https://avatars.githubusercontent.com/u/44669930?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>David</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=DavidPHH\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/renovate\"><img src=\"https://avatars.githubusercontent.com/in/2740?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>renovate[bot]</b></sub></a><br /><a href=\"#maintenance-renovate[bot]\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://renovate.whitesourcesoftware.com/\"><img src=\"https://avatars.githubusercontent.com/u/25180681?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>WhiteSource Renovate</b></sub></a><br /><a href=\"#maintenance-renovate-bot\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://fc5570.me/\"><img src=\"https://avatars.githubusercontent.com/u/68158483?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>FC</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=FC5570\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Tokipudi\"><img src=\"https://avatars.githubusercontent.com/u/29551076?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jérémy de Saint Denis</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Tokipudi\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ItsMrCube\"><img src=\"https://avatars.githubusercontent.com/u/25201357?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>MrCube</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=ItsMrCube\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/bitomic\"><img src=\"https://avatars.githubusercontent.com/u/35199700?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>bitomic</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=bitomic\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://c43721.dev/\"><img src=\"https://avatars.githubusercontent.com/u/55610086?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>c43721</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=c43721\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://commandtechno.com/\"><img src=\"https://avatars.githubusercontent.com/u/68407783?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Commandtechno</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Commandtechno\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dhruv-kaushikk\"><img src=\"https://avatars.githubusercontent.com/u/73697546?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aura</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=dhruv-kaushikk\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://axis.moe/\"><img src=\"https://avatars.githubusercontent.com/u/54381371?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jonathan</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=axisiscool\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/imranbarbhuiya\"><img src=\"https://avatars.githubusercontent.com/u/74945038?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Parbez</b></sub></a><br /><a href=\"#maintenance-imranbarbhuiya\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/NotKaskus\"><img src=\"https://avatars.githubusercontent.com/u/75168528?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Paul Andrew</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=NotKaskus\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://linktr.ee/mzato0001\"><img src=\"https://avatars.githubusercontent.com/u/62367547?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mzato</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=Mzato0001\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/utilities/issues?q=author%3AMzato0001\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MajesticString\"><img src=\"https://avatars.githubusercontent.com/u/66224939?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Harry Allen</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=MajesticString\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EvolutionX-10\"><img src=\"https://avatars.githubusercontent.com/u/85353424?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Evo</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=EvolutionX-10\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://enes.ovh/\"><img src=\"https://avatars.githubusercontent.com/u/61084101?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Enes Genç</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=enxg\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/muchnameless\"><img src=\"https://avatars.githubusercontent.com/u/12682826?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>muchnameless</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=muchnameless\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/r-priyam\"><img src=\"https://avatars.githubusercontent.com/u/50884372?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Priyam</b></sub></a><br /><a href=\"https://github.com/sapphiredev/utilities/commits?author=r-priyam\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n[lexure]: https://github.com/1Computer1/lexure\n[1computer1]: https://github.com/1Computer1\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/result@2.5.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.1...@sapphire/result@2.5.0) - (2022-10-01)\n\n## 🏠 Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## 📝 Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n- Update @RealShadowNova as a contributor ([a869ba0](https://github.com/sapphiredev/utilities/commit/a869ba0abfad041610b9115187d426aebe671af6))\n\n## 🚀 Features\n\n- **result:** Add `Result.unwrapRaw` (#475) ([82fe79e](https://github.com/sapphiredev/utilities/commit/82fe79ec6bff4979be615f322b6d1392016d9622))\n\n# [@sapphire/result@2.4.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.0...@sapphire/result@2.4.1) - (2022-08-29)\n\n## 🧪 Testing\n\n- **result:** Add full coverage (#436) ([3f06ac5](https://github.com/sapphiredev/utilities/commit/3f06ac500b8e96312a5fe04be2817753ce219d37))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## 🚀 Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## 🚀 Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.3.3](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.2...@sapphire/result@2.3.3) - (2022-08-06)\n\n## 🐛 Bug Fixes\n\n- **result:** Better `unwrapOr*`, added more tests (#416) ([ec088a8](https://github.com/sapphiredev/utilities/commit/ec088a88a878c7d230c51b148593a85d258075f9))\n\n# [@sapphire/result@2.3.2](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.1...@sapphire/result@2.3.2) - (2022-08-05)\n\n## 🐛 Bug Fixes\n\n- Revert \"make unwrap methods generic (#415) (v2.3.1)\" ([a963396](https://github.com/sapphiredev/utilities/commit/a9633967d5c4659f26c54fa660796bae18fdaf07))\n\n# [@sapphire/result@2.3.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.0...@sapphire/result@2.3.1) - (2022-08-05)\n\n## 🐛 Bug Fixes\n\n- **result:** Make unwrap methods generic (#415) ([76e95b3](https://github.com/sapphiredev/utilities/commit/76e95b3c18ecdff53bfa07d541ed1bc1809c7f72))\n\n# [@sapphire/result@2.3.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.2.0...@sapphire/result@2.3.0) - (2022-08-05)\n\n## 🚀 Features\n\n- **result:** Add `inspect*Async` methods (#414) ([fca7a80](https://github.com/sapphiredev/utilities/commit/fca7a8010ae8c368513de2eca56f9f5bfe2756a3))\n\n# [@sapphire/result@2.2.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.1...@sapphire/result@2.2.0) - (2022-08-04)\n\n## 🐛 Bug Fixes\n\n- **result:** Resolve Unwrap type issues (#411) ([3c2159c](https://github.com/sapphiredev/utilities/commit/3c2159cac18df0925cd71393698ed7d9f98fd6ef))\n\n## 🚀 Features\n\n- **result:** Export `ok`, `err`, `some`, `none`, and improve docs (#412) ([c978864](https://github.com/sapphiredev/utilities/commit/c978864d91d950c611c073a5c34ef01311e9d8f0))\n\n# [@sapphire/result@2.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.0...@sapphire/result@2.1.1) - (2022-07-29)\n\n## 🐛 Bug Fixes\n\n- **Result:** Type `IResult.mapInto`'s return correctly (#405) ([14ddf5f](https://github.com/sapphiredev/utilities/commit/14ddf5fc35d1186f9fdc78a3d2b3b465acbd36ac))\n\n# [@sapphire/result@2.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.1...@sapphire/result@2.1.0) - (2022-07-29)\n\n## 📝 Documentation\n\n- Add @muchnameless as a contributor ([a1221fe](https://github.com/sapphiredev/utilities/commit/a1221fea68506e99591d5d00ec552a07c26833f9))\n- Add @enxg as a contributor ([d2382f0](https://github.com/sapphiredev/utilities/commit/d2382f04e3909cb4ad11798a0a10e683f6cf5383))\n- Add @EvolutionX-10 as a contributor ([efc3a32](https://github.com/sapphiredev/utilities/commit/efc3a320a72ae258996dd62866d206c33f8d4961))\n\n## 🚀 Features\n\n- **Result:** Add new convenience methods (#404) ([7c3ec61](https://github.com/sapphiredev/utilities/commit/7c3ec6168dde544578e5016120c9975009889391))\n\n# [@sapphire/result@2.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.0...@sapphire/result@2.0.1) - (2022-07-03)\n\n## 🏠 Refactor\n\n- **result:** Fixed types (#391) ([a1934e1](https://github.com/sapphiredev/utilities/commit/a1934e10cc7d81c71354deb153a4f3bb83e50e65))\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([84af0db](https://github.com/sapphiredev/utilities/commit/84af0db2db749223b036aa99fe19a2e9af5681c6))\n\n# [@sapphire/result@2.0.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.1...@sapphire/result@2.0.0) - (2022-06-26)\n\n## 🏠 Refactor\n\n- Rewrite @sapphire/result from scratch (#364) ([d5b57ff](https://github.com/sapphiredev/utilities/commit/d5b57ff52402bfd261372bf4486e46f39bb41b6d))\n\n   ### 💥 Breaking Changes:\n   - Removed `Maybe` type, the substitute is `Option`\n   - Removed `maybe` function, the substitute is `Option.from`\n   - Removed `some` function, the substitute is `Option.some`\n   - Removed `none` function, the substitute is `Option.none`\n   - Removed `isSome` function, the substitute is `option.isSome`\n   - Removed `isNone` function, the substitute is `option.isNone`\n   - Removed `isMaybe` function, the substitute is `Option.is`\n   - Removed `UnwrapMaybeValue` type, the substitute is `Option.UnwrapSome`\n   - Removed `None` type, the substitute is `Option.None`\n   - Removed `Some` type, the substitute is `Option.Some`\n   - Removed `Err` type, the substitute is `Result.Err`\n   - Removed `Ok` type, the substitute is `Result.Ok`\n   - Removed `from` function, the substitute is `Result.from`\n   - Removed `fromAsync` function, the substitute is `Result.fromAsync`\n\n\n## 🐛 Bug Fixes\n\n- **deps:** Update all non-major dependencies ([50cd8de](https://github.com/sapphiredev/utilities/commit/50cd8dea593b6f5ae75571209456b3421e2ca59a))\n\n## 📝 Documentation\n\n- Add @MajesticString as a contributor ([295b3e9](https://github.com/sapphiredev/utilities/commit/295b3e9849a4b0fe64074bae02f6426378a303c3))\n- Add @Mzato0001 as a contributor ([c790ef2](https://github.com/sapphiredev/utilities/commit/c790ef25df2d7e22888fa9f8169167aa555e9e19))\n- Add @NotKaskus as a contributor ([00da8f1](https://github.com/sapphiredev/utilities/commit/00da8f199137b9277119823f322d1f2d168d928a))\n- Add @imranbarbhuiya as a contributor ([fb674c2](https://github.com/sapphiredev/utilities/commit/fb674c2c5594d41e71662263553dcb4bac9e37f4))\n- Add @axisiscool as a contributor ([ce1aa31](https://github.com/sapphiredev/utilities/commit/ce1aa316871a88d3663efbdf2a42d3d8dfe6a27f))\n- Add @dhruv-kaushikk as a contributor ([ebbf43f](https://github.com/sapphiredev/utilities/commit/ebbf43f63617daba96e72c50a234bf8b64f6ddc4))\n- Add @Commandtechno as a contributor ([f1d69fa](https://github.com/sapphiredev/utilities/commit/f1d69fabe1ee0abe4be08b19e63dbec03102f7ce))\n- Fix typedoc causing OOM crashes ([63ba41c](https://github.com/sapphiredev/utilities/commit/63ba41c4b6678554b1c7043a22d3296db4f59360))\n\n## 🧪 Testing\n\n- Migrate to vitest (#380) ([075ec73](https://github.com/sapphiredev/utilities/commit/075ec73c7a8e3374fad3ada612d37eb4ac36ec8d))\n\n## [1.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.0...@sapphire/result@1.1.1) (2022-04-01)\n\n**Note:** Version bump only for package @sapphire/result\n\n# [1.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.0.0...@sapphire/result@1.1.0) (2022-03-06)\n\n### Features\n\n-   allow module: NodeNext ([#306](https://github.com/sapphiredev/utilities/issues/306)) ([9dc6dd6](https://github.com/sapphiredev/utilities/commit/9dc6dd619efab879bb2b0b3c9e64304e10a67ed6))\n\n# 1.0.0 (2022-02-06)\n\n### Features\n\n-   **package:** add @sapphire/result package ([#274](https://github.com/sapphiredev/utilities/issues/274)) ([8a86826](https://github.com/sapphiredev/utilities/commit/8a8682607c2aa4c845e814816fa2b4478c23aa84))\n",
  "classes": [
    {
      "id": 218,
      "name": "OptionError",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 1,
        "file": "OptionError.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/OptionError.ts#L1"
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "typeArguments": []
      },
      "implementsType": [],
      "construct": {
        "id": 229,
        "name": "constructor",
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "source": {
          "line": 1046,
          "file": "lib.es5.d.ts",
          "path": "node_modules/typescript/lib",
          "url": null
        },
        "parentId": 218,
        "parameters": [
          {
            "id": 231,
            "name": "message",
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          }
        ]
      },
      "properties": [
        {
          "id": 239,
          "name": "cause",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 26,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 237,
          "name": "message",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 1041,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 238,
          "name": "stack",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 1042,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 223,
          "name": "prepareStackTrace",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 11,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "reflection": {
              "id": 224,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "node_modules/@types/node/ts4.8/globals.d.ts",
                  "line": 11,
                  "character": 25
                }
              ],
              "signatures": [
                {
                  "id": 225,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Optional override for formatting stack traces"
                      }
                    ],
                    "blockTags": [
                      {
                        "tag": "@see",
                        "content": [
                          {
                            "kind": "text",
                            "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
                          }
                        ]
                      }
                    ]
                  },
                  "parameters": [
                    {
                      "id": 226,
                      "name": "err",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "name": "Error",
                        "qualifiedName": "Error",
                        "package": "typescript"
                      }
                    },
                    {
                      "id": 227,
                      "name": "stackTraces",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "CallSite",
                          "qualifiedName": "NodeJS.CallSite",
                          "package": "@types/node"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 228,
          "name": "stackTraceLimit",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 13,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 236,
          "name": "name",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 2,
            "file": "OptionError.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/OptionError.ts#L2"
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 219,
          "name": "captureStackTrace",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 4,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 218,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 220,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 221,
                  "name": "targetObject",
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 222,
                  "name": "constructorOpt",
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    },
    {
      "id": 491,
      "name": "ResultError",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 1,
        "file": "ResultError.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/ResultError.ts#L1"
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "typeArguments": []
      },
      "implementsType": [],
      "construct": {
        "id": 502,
        "name": "constructor",
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "source": {
          "line": 4,
          "file": "ResultError.ts",
          "path": "packages/result/src/lib/Result",
          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/ResultError.ts#L4"
        },
        "parentId": 491,
        "parameters": [
          {
            "id": 505,
            "name": "message",
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          },
          {
            "id": 506,
            "name": "value",
            "type": {
              "kind": "reference",
              "id": 504,
              "name": "E",
              "packageName": null,
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 512,
          "name": "cause",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 26,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 510,
          "name": "message",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 1041,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 511,
          "name": "stack",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 1042,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 507,
          "name": "value",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 2,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/ResultError.ts#L2"
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 504,
            "name": "E",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 496,
          "name": "prepareStackTrace",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 11,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "reflection": {
              "id": 497,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "node_modules/@types/node/ts4.8/globals.d.ts",
                  "line": 11,
                  "character": 25
                }
              ],
              "signatures": [
                {
                  "id": 498,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Optional override for formatting stack traces"
                      }
                    ],
                    "blockTags": [
                      {
                        "tag": "@see",
                        "content": [
                          {
                            "kind": "text",
                            "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
                          }
                        ]
                      }
                    ]
                  },
                  "parameters": [
                    {
                      "id": 499,
                      "name": "err",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "name": "Error",
                        "qualifiedName": "Error",
                        "package": "typescript"
                      }
                    },
                    {
                      "id": 500,
                      "name": "stackTraces",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "CallSite",
                          "qualifiedName": "NodeJS.CallSite",
                          "package": "@types/node"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 501,
          "name": "stackTraceLimit",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 13,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 509,
          "name": "name",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 9,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/ResultError.ts#L9"
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 492,
          "name": "captureStackTrace",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 4,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node/ts4.8",
            "url": null
          },
          "parentId": 491,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 493,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 494,
                  "name": "targetObject",
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 495,
                  "name": "constructorOpt",
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    }
  ],
  "constants": [
    {
      "id": 5,
      "name": "none",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 169,
        "file": "None.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/None.ts#L169"
      },
      "external": false,
      "type": {
        "kind": "reference",
        "id": null,
        "name": "None",
        "packageName": null,
        "typeArguments": []
      },
      "value": "..."
    }
  ],
  "enums": [],
  "functions": [
    {
      "id": 245,
      "name": "err",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 191,
        "file": "Err.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/Err.ts#L191"
      },
      "external": false,
      "signatures": [
        {
          "id": 246,
          "name": "err",
          "comment": {
            "description": "Creates an Err with no error.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An erroneous Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Err",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "unknown"
              }
            ]
          }
        },
        {
          "id": 247,
          "name": "err",
          "comment": {
            "description": "Creates an Err.",
            "blockTags": [
              {
                "name": "typeparam",
                "text": "E The error's type."
              },
              {
                "name": "returns",
                "text": "An erroneous Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 248,
              "name": "E",
              "type": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 249,
              "name": "x",
              "type": {
                "kind": "reference",
                "id": 248,
                "name": "E",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Err",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 248,
                "name": "E",
                "packageName": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 240,
      "name": "ok",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 197,
        "file": "Ok.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/Ok.ts#L197"
      },
      "external": false,
      "signatures": [
        {
          "id": 241,
          "name": "ok",
          "comment": {
            "description": "Creates an Ok with no value.",
            "blockTags": [
              {
                "name": "returns",
                "text": "A successful Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Ok",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "unknown"
              }
            ]
          }
        },
        {
          "id": 242,
          "name": "ok",
          "comment": {
            "description": "Creates an Ok.",
            "blockTags": [
              {
                "name": "typeparam",
                "text": "T The result's type."
              },
              {
                "name": "returns",
                "text": "A successful Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 243,
              "name": "T",
              "type": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 244,
              "name": "x",
              "type": {
                "kind": "reference",
                "id": 243,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Ok",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 243,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 1,
      "name": "some",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 186,
        "file": "Some.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/Some.ts#L186"
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "some",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 3,
              "name": "T",
              "type": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 4,
              "name": "value",
              "type": {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Some",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [
    {
      "id": 49,
      "name": "IOption",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 7,
        "file": "IOption.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L7"
      },
      "external": false,
      "properties": [],
      "methods": [
        {
          "id": 215,
          "name": "[iterator]",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 738,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L738"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 216,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 137,
          "name": "and",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 397,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L397"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 138,
              "name": "and",
              "comment": {
                "description": "Returns `None` if the option is `None`, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), some('foo'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 139,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 140,
                  "name": "option",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 139,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 139,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 141,
          "name": "andThen",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 418,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L418"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 142,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? none : some(4 / value);\n}\n\nassert.equal(some(2).andThen(fractionOf4), some(4));\nassert.equal(some(0).andThen(fractionOf4), none);\nassert.equal(none.andThen(fractionOf4), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 143,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 144,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 145,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 418,
                          "character": 16,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L418"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 146,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 147,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 6,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 143,
                                "name": "U"
                              }
                            ],
                            "name": "Option"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 143,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 165,
          "name": "contains",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 550,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L550"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 166,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value containing the given value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 167,
                  "name": "value",
                  "type": {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 198,
          "name": "eq",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 680,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L680"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 199,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 200,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 60,
          "name": "expect",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 89,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L89"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 61,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'OptionError',\n  message: 'Whoops'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 62,
                  "name": "message",
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 217,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 159,
          "name": "filter",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 526,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L526"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 160,
              "name": "filter",
              "comment": {
                "description": "Returns None if the option is None, otherwise calls `predicate` with the wrapped value and returns:\n\n- `Some(t)` if `predicate` returns `true` (where t is the wrapped value), and\n- `None` if `predicate` returns `false`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction isEven(value: number) {\n  return n % 2 === 0;\n}\n\nassert.equal(none.filter(isEven), none);\nassert.equal(some(3).filter(isEven), none);\nassert.equal(some(4).filter(isEven), some(4));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.filter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 161,
                  "name": "predicate",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 162,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 526,
                          "character": 19,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L526"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 163,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 164,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 192,
          "name": "flatten",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 659,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L659"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 193,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(some(6));\nassert.equal(x.flatten(), some(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(none);\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = none;\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 194,
                  "name": "IT",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 195,
                  "name": "this",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 6,
                        "name": "Option",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 194,
                            "name": "IT",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 194,
                    "name": "IT",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 113,
          "name": "inspect",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 276,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L276"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 114,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nsome(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nnone.inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 115,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 116,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 276,
                          "character": 13,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L276"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 117,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 118,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 49,
                "name": "IOption",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 119,
          "name": "inspectAsync",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 296,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L296"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 120,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait some(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait none.inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 121,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 122,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 296,
                          "character": 18,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L296"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 123,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 124,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "void"
                              }
                            ],
                            "name": "Awaitable"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 49,
                    "name": "IOption",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 196,
          "name": "intoPromise",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 672,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L672"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 197,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Some`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = some(Promise.resolve(3));\nassert.equal(await x.intoPromise(), some(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 217,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 58,
          "name": "isNone",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 66,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L66"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 59,
              "name": "isNone",
              "comment": {
                "description": "Returns `true` if the option is a `None` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isNone(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isNone(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "None",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 50,
          "name": "isSome",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 24,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L24"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 51,
              "name": "isSome",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSome(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSome(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "Some",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 217,
                      "name": "T",
                      "packageName": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 52,
          "name": "isSomeAnd",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 48,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L48"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 53,
              "name": "isSomeAnd",
              "comment": {
                "description": "Returns `true` if the option is a `Some` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSomeAnd((x) => x > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(0);\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 54,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 55,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 48,
                          "character": 15,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L48"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 56,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 57,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 135,
          "name": "iter",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 364,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L364"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 136,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link Option.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 75,
          "name": "map",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 165,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L165"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 76,
              "name": "map",
              "comment": {
                "description": "Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst maybeSomeString = some('Hello, world!');\nconst maybeSomeLength = maybeSomeString.map((value) => value.length);\n\nassert.equal(maybeSomeLength, some(13));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 77,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 78,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 79,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 165,
                          "character": 12,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L165"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 80,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 81,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 77,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 77,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 82,
          "name": "mapInto",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 189,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L189"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 83,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Some<T>` to the returned `Option<U>` by applying a function to a contained value, leaving `None`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, none);\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 84,
                  "name": "Inner",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 85,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 86,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 189,
                          "character": 20,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L189"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 87,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 88,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 6,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 84,
                                "name": "Inner"
                              }
                            ],
                            "name": "Option"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 84,
                    "name": "Inner",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 107,
          "name": "mapNoneInto",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 256,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L256"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 108,
              "name": "mapNoneInto",
              "comment": {
                "description": "Maps a `None` to the returned `Option<U>` by applying a function to a contained value, leaving `Some<T>`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some('Hello, world!'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 109,
                  "name": "Inner",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 110,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 111,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 256,
                          "character": 24,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L256"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 112,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 6,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 109,
                                "name": "Inner"
                              }
                            ],
                            "name": "Option"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 109,
                        "name": "Inner",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 89,
          "name": "mapOr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 212,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L212"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 90,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link mapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 91,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 92,
                  "name": "defaultValue",
                  "type": {
                    "kind": "reference",
                    "id": 91,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  }
                },
                {
                  "id": 93,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 94,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 212,
                          "character": 31,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L212"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 95,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 96,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 91,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 91,
                "name": "U",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 97,
          "name": "mapOrElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 232,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L232"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 98,
              "name": "mapOrElse",
              "comment": {
                "description": "Computes a default function result (if none), or applies a different function to the contained value (if any).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 99,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 100,
                  "name": "defaultValue",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 101,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 232,
                          "character": 28,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L232"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 102,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 99,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "id": 103,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 104,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 232,
                          "character": 41,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L232"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 105,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 106,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 99,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 99,
                "name": "U",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 204,
          "name": "match",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 711,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L711"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 205,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = some(4).match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = none.match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 206,
                  "name": "SomeValue",
                  "type": null,
                  "default": null
                },
                {
                  "id": 207,
                  "name": "NoneValue",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 208,
                  "name": "branches",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 209,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "children": [
                        {
                          "id": 213,
                          "name": "none",
                          "kind": 2048,
                          "kindString": "Method",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Option/IOption.ts",
                              "line": 711,
                              "character": 68,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L711"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 214,
                              "name": "none",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 207,
                                "name": "NoneValue"
                              }
                            }
                          ]
                        },
                        {
                          "id": 210,
                          "name": "some",
                          "kind": 2048,
                          "kindString": "Method",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Option/IOption.ts",
                              "line": 711,
                              "character": 41,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L711"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 211,
                              "name": "some",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "parameters": [
                                {
                                  "id": 212,
                                  "name": "value",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {},
                                  "type": {
                                    "type": "reference",
                                    "id": 217,
                                    "name": "T"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "id": 206,
                                "name": "SomeValue"
                              }
                            }
                          ]
                        }
                      ],
                      "groups": [
                        {
                          "title": "Methods",
                          "children": [
                            213,
                            210
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 711,
                          "character": 39,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L711"
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 206,
                    "name": "SomeValue",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 207,
                    "name": "NoneValue",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 201,
          "name": "ne",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 688,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L688"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 202,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 203,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 125,
          "name": "okOr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 318,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L318"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 126,
              "name": "okOr",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err)`.\n\nArguments passed to `okOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link okOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOr(0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOr(0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 127,
                  "name": "E",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 128,
                  "name": "err",
                  "type": {
                    "kind": "reference",
                    "id": 127,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 127,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 129,
          "name": "okOrElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 337,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L337"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 130,
              "name": "okOrElse",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err())`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOrElse(() => 0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOrElse(() => 0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 131,
                  "name": "E",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 132,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 133,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 337,
                          "character": 17,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L337"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 134,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 131,
                            "name": "E"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 131,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 148,
          "name": "or",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 451,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L451"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 149,
              "name": "or",
              "comment": {
                "description": "Returns the option if it contains a value, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(100));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.or(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 150,
                  "name": "option",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 151,
          "name": "orElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 471,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L471"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 152,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst nobody = (): Option<string> => none;\nconst vikings = (): Option<string> => some('vikings');\n\nassert.equal(some('barbarians').orElse(vikings), some('barbarians'));\nassert.equal(none.orElse(vikings), some('vikings'));\nassert.equal(none.orElse(nobody), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 153,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 154,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 471,
                          "character": 12,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L471"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 155,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 6,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            ],
                            "name": "Option"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 187,
          "name": "transpose",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 636,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L636"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 188,
              "name": "transpose",
              "comment": {
                "description": "Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n\n`none` will be mapped to `ok(none)`. `some(ok(v))` and `some(err(e))` will be mapped to `ok(some(v))` and `err(e)`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Result<number, Error>> = some(ok(5));\nconst y: Result<Option<number>, Error> = ok(some(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 189,
                  "name": "IT",
                  "type": null,
                  "default": null
                },
                {
                  "id": 190,
                  "name": "E",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 191,
                  "name": "this",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 189,
                            "name": "IT",
                            "packageName": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 190,
                            "name": "E",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 189,
                        "name": "IT",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 190,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 63,
          "name": "unwrap",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 114,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L114"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 64,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Some` value.\n\nIf the value is an `Err`, it throws an {@link OptionError} with the message.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.unwrap(), {\n  name: 'OptionError',\n  message: 'Unwrap failed'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 217,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 65,
          "name": "unwrapOr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 133,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L133"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 66,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Some` value or a provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOr(0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOr(0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 67,
                  "name": "V",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 68,
                  "name": "defaultValue",
                  "type": {
                    "kind": "reference",
                    "id": 67,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 67,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 69,
          "name": "unwrapOrElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 149,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L149"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 70,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained Some value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOrElse(() => 0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOrElse(() => 0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 71,
                  "name": "V",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 72,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 73,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 149,
                          "character": 21,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L149"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 74,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 71,
                            "name": "V"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 71,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 182,
          "name": "unzip",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 620,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L620"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 183,
              "name": "unzip",
              "comment": {
                "description": "Unzips an option containing a tuple of two options.\n\nIf self is `Some((a, b))` this method returns `[Some(a), Some(b)]`. Otherwise, `[None, None]` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = some([1, 'hi']);\nassert.equal(x.unzip(), [some(1), some('hi')]);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = none;\nassert.equal(x.unzip(), [none, none]);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unzip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 184,
                  "name": "Inner",
                  "type": null,
                  "default": null
                },
                {
                  "id": 185,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 186,
                  "name": "this",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "typeOperator",
                        "operator": "readonly",
                        "type": {
                          "kind": "tuple",
                          "types": [
                            {
                              "kind": "reference",
                              "id": 184,
                              "name": "Inner",
                              "packageName": null,
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 185,
                              "name": "U",
                              "packageName": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 184,
                        "name": "Inner",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 185,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 156,
          "name": "xor",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 504,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L504"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 157,
              "name": "xor",
              "comment": {
                "description": "Returns `Some` if exactly one of self or `option` is `Some`, otherwise returns `None`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.xor}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 158,
                  "name": "option",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 168,
          "name": "zip",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 570,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L570"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 169,
              "name": "zip",
              "comment": {
                "description": "Zips self with another `Option`.\n\nIf self is `Some(s)` and `other` is `Some(o)`, this method returns `Some([s, o])`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(1);\nconst y = some('hi');\nconst z = none;\n\nassert.equal(x.zip(y), some([1, 'hi']));\nassert.equal(x.zip(z), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 170,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 171,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 170,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 170,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 172,
          "name": "zipWith",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 600,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L600"
          },
          "parentId": 49,
          "signatures": [
            {
              "id": 173,
              "name": "zipWith",
              "comment": {
                "description": "Zips self and another `Option` with function `f`.\n\nIf self is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nclass Point {\n  public readonly x: number;\n  public readonly y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst x = some(17.5);\nconst y = some(42.7);\n\nassert.equal(x.zipWith(y, (s, o) => new Point(s, o)), some(new Point(17.5, 42.7)));\nassert.equal(x.zipWith(none, (s, o) => new Point(s, o)), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip_with}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 174,
                  "name": "U",
                  "type": null,
                  "default": null
                },
                {
                  "id": 175,
                  "name": "R",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 176,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 174,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                },
                {
                  "id": 177,
                  "name": "f",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 178,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Option/IOption.ts",
                          "line": 600,
                          "character": 36,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option/IOption.ts#L600"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 179,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 180,
                              "name": "s",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 217,
                                "name": "T"
                              }
                            },
                            {
                              "id": 181,
                              "name": "o",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 174,
                                "name": "U"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 175,
                            "name": "R"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 175,
                    "name": "R",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": 308,
      "name": "IResult",
      "comment": {
        "description": "A type used to express computations that can fail, it can be used for returning and propagating errors. This is a\ntype union with the variants `Ok(T)`, representing success and containing a value, and `Err(E)`, representing error\nand containing an error value.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          },
          {
            "name": "see",
            "text": "{@link https://doc.rust-lang.org/std/result/index.html}"
          }
        ],
        "modifierTags": []
      },
      "source": {
        "line": 17,
        "file": "IResult.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L17"
      },
      "external": false,
      "properties": [],
      "methods": [
        {
          "id": 487,
          "name": "[iterator]",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 863,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L863"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 488,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link iter}\n - {@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 429,
          "name": "and",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 601,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L601"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 430,
              "name": "and",
              "comment": {
                "description": "Returns `result` if the result is `Ok`, otherwise returns the `Err` value of itself.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Early error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = ok('Hello');\nassert.equal(x.and(y), ok('Hello'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 431,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 432,
                  "name": "result",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 431,
                        "name": "U",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 431,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 433,
          "name": "andThen",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 622,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L622"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 434,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? err('overflowed') : ok(4 / value);\n}\n\nassert.equal(ok(2).andThen(fractionOf4), ok(4));\nassert.equal(ok(0).andThen(fractionOf4), err('overflowed'));\nassert.equal(err('not a number').andThen(fractionOf4), err('not a number'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 435,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 436,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 437,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 622,
                          "character": 16,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L622"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 438,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 439,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 250,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 435,
                                "name": "U"
                              },
                              {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            ],
                            "name": "Result"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 435,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 451,
          "name": "contains",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 703,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L703"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 452,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the result is an `Ok` and the given value strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 453,
                  "name": "value",
                  "type": {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 454,
          "name": "containsErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 727,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L727"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 455,
              "name": "containsErr",
              "comment": {
                "description": "Returns `true` if the result is an `Err` and the given error strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.containsErr('Some error message'), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some other error message');\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 456,
                  "name": "error",
                  "type": {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 469,
          "name": "eq",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 805,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L805"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 470,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 471,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 329,
          "name": "err",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 139,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L139"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 330,
              "name": "err",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<E>`.\n\nConverts itself into an `Option<E>`, and discarding the successful value, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.err(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.err(), 'Some error message');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 406,
          "name": "expect",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 419,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L419"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 407,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the given message and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 408,
                  "name": "message",
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 489,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 409,
          "name": "expectErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 444,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L444"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 410,
              "name": "expectErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the given message and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.expectErr('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.expectErr('Whoops!'), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 411,
                  "name": "message",
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 490,
                "name": "E",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 461,
          "name": "flatten",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 766,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L766"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 462,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(ok('Hello'));\nassert.equal(x.flatten(), ok('Hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(err(6));\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = err(6);\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 463,
                  "name": "IT",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 464,
                  "name": "this",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 463,
                            "name": "IT",
                            "packageName": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 490,
                            "name": "E",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 463,
                    "name": "IT",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 380,
          "name": "inspect",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 308,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L308"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 381,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 382,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 383,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 308,
                          "character": 13,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L308"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 384,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 385,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 308,
                "name": "IResult",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 386,
          "name": "inspectAsync",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 328,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L328"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 387,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 388,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 389,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 328,
                          "character": 18,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L328"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 390,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 391,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "void"
                              }
                            ],
                            "name": "Awaitable"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 308,
                    "name": "IResult",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 392,
          "name": "inspectErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 348,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L348"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 393,
              "name": "inspectErr",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErrAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspectErr(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspectErr(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 394,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 395,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 348,
                          "character": 16,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L348"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 396,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 397,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 308,
                "name": "IResult",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 398,
          "name": "inspectErrAsync",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 368,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L368"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 399,
              "name": "inspectErrAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErr} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectErrAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectErrAsync(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 400,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 401,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 368,
                          "character": 21,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L368"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 402,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 403,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "void"
                              }
                            ],
                            "name": "Awaitable"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 308,
                    "name": "IResult",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 465,
          "name": "intoOkOrErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 784,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L784"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 466,
              "name": "intoOkOrErr",
              "comment": {
                "description": "Returns the `Ok` value if self is `Ok`, and the `Err` value if self is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = ok(3);\nassert.equal(x.intoOkOrErr(), 3);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = err(4);\nassert.equal(x.intoOkOrErr(), 4);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.into_ok_or_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 467,
          "name": "intoPromise",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 797,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L797"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 468,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Ok`) or the awaited error (if `Err`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = ok(Promise.resolve(3));\nassert.equal(await x.intoPromise(), ok(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 489,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 490,
                            "name": "E",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 318,
          "name": "isErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 75,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L75"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 319,
              "name": "isErr",
              "comment": {
                "description": "Returns `true` if the result is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isErr(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isErr(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "Err",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 490,
                      "name": "E",
                      "packageName": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 320,
          "name": "isErrAnd",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 99,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L99"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 321,
              "name": "isErrAnd",
              "comment": {
                "description": "Returns `true` if the result is `Err` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new Error('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new TypeError('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 322,
                  "name": "R",
                  "type": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 323,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 324,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 99,
                          "character": 33,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L99"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 325,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 326,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 322,
                            "name": "R"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "Err",
                      "packageName": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 490,
                          "name": "E",
                          "packageName": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 322,
                      "name": "R",
                      "packageName": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 309,
          "name": "isOk",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 34,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L34"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 310,
              "name": "isOk",
              "comment": {
                "description": "Returns `true` if the result is `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isOk(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOk(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "Ok",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 489,
                      "name": "T",
                      "packageName": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 311,
          "name": "isOkAnd",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 57,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L57"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 312,
              "name": "isOkAnd",
              "comment": {
                "description": "Returns `true` if the result is `Ok` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isOkAnd((value) => value > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(0);\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 313,
                  "name": "R",
                  "type": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 314,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 315,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 57,
                          "character": 32,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L57"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 316,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 317,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 313,
                            "name": "R"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": null,
                      "name": "Ok",
                      "packageName": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 489,
                          "name": "T",
                          "packageName": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 313,
                      "name": "R",
                      "packageName": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 404,
          "name": "iter",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 394,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L394"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 405,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 331,
          "name": "map",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 159,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L159"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 332,
              "name": "map",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.map((value) => value * 2), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.map((value) => value * 2), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 333,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 334,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 335,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 159,
                          "character": 12,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L159"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 336,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 337,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 333,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 333,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 490,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 365,
          "name": "mapErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 258,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L258"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 366,
              "name": "mapErr",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErr((error) => error.message), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErr((error) => error.message), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 367,
                  "name": "F",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 368,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 369,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 258,
                          "character": 15,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L258"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 370,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 371,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 367,
                            "name": "F"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 367,
                    "name": "F",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 372,
          "name": "mapErrInto",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 288,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L288"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 373,
              "name": "mapErrInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\nUnlike {@link mapErr}, this method does not wrap the returned value inside `Err`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErrInto((error) => err(error.message)), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => err(error.message)), err('Some error message'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => ok(4)), ok(4));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 374,
                  "name": "IT",
                  "type": null,
                  "default": null
                },
                {
                  "id": 375,
                  "name": "IE",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 376,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 377,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 288,
                          "character": 24,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L288"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 378,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 379,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 250,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 374,
                                "name": "IT"
                              },
                              {
                                "type": "reference",
                                "id": 375,
                                "name": "IE"
                              }
                            ],
                            "name": "Result"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 374,
                        "name": "IT",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 375,
                    "name": "IE",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 338,
          "name": "mapInto",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 190,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L190"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 339,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.\n\nUnlike {@link map}, this method does not wrap the returned value inside `Ok`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.mapInto((value) => ok(value * value)), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(0);\nassert.equal(\n  x.mapInto((value) => (value === 0 ? err('zero is not divisible') : ok(1 / value))),\n  err('zero is not divisible')\n);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.mapInto((value) => ok(4)), err('Some error message'));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 340,
                  "name": "IT",
                  "type": null,
                  "default": null
                },
                {
                  "id": 341,
                  "name": "IE",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 342,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 343,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 190,
                          "character": 21,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L190"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 344,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 345,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 250,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 340,
                                "name": "IT"
                              },
                              {
                                "type": "reference",
                                "id": 341,
                                "name": "IE"
                              }
                            ],
                            "name": "Result"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 340,
                    "name": "IT",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 341,
                        "name": "IE",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 346,
          "name": "mapOr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 213,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L213"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 347,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 348,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 349,
                  "name": "defaultValue",
                  "type": {
                    "kind": "reference",
                    "id": 348,
                    "name": "U",
                    "packageName": null,
                    "typeArguments": []
                  }
                },
                {
                  "id": 350,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 351,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 213,
                          "character": 31,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L213"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 352,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 353,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 348,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 348,
                "name": "U",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 354,
          "name": "mapOrElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 236,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L236"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 355,
              "name": "mapOrElse",
              "comment": {
                "description": "Maps a `Result<T, E>` to `U` by applying fallback function default to a contained `Err` value, or function `cb`\nto a contained `Ok` value.\n\nThis function can be used to unpack a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = ok('hello');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = err('Some error message');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 18);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 356,
                  "name": "U",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 357,
                  "name": "op",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 358,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 236,
                          "character": 18,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L236"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 359,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 360,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 356,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "id": 361,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 362,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 236,
                          "character": 39,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L236"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 363,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 364,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 356,
                            "name": "U"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 356,
                "name": "U",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 475,
          "name": "match",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 836,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L836"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 476,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = ok(4).match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = err('Hello').match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 477,
                  "name": "OkValue",
                  "type": null,
                  "default": null
                },
                {
                  "id": 478,
                  "name": "ErrValue",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 479,
                  "name": "branches",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 480,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "children": [
                        {
                          "id": 484,
                          "name": "err",
                          "kind": 2048,
                          "kindString": "Method",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Result/IResult.ts",
                              "line": 836,
                              "character": 61,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L836"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 485,
                              "name": "err",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "parameters": [
                                {
                                  "id": 486,
                                  "name": "error",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {},
                                  "type": {
                                    "type": "reference",
                                    "id": 490,
                                    "name": "E"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "id": 478,
                                "name": "ErrValue"
                              }
                            }
                          ]
                        },
                        {
                          "id": 481,
                          "name": "ok",
                          "kind": 2048,
                          "kindString": "Method",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Result/IResult.ts",
                              "line": 836,
                              "character": 38,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L836"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 482,
                              "name": "ok",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "parameters": [
                                {
                                  "id": 483,
                                  "name": "value",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {},
                                  "type": {
                                    "type": "reference",
                                    "id": 489,
                                    "name": "T"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "id": 477,
                                "name": "OkValue"
                              }
                            }
                          ]
                        }
                      ],
                      "groups": [
                        {
                          "title": "Methods",
                          "children": [
                            484,
                            481
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 836,
                          "character": 36,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L836"
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 477,
                    "name": "OkValue",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 478,
                    "name": "ErrValue",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 472,
          "name": "ne",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 813,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L813"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 473,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 474,
                  "name": "other",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 327,
          "name": "ok",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 119,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L119"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 328,
              "name": "ok",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<T>`.\n\nConverts itself into an `Option<T>`, and discarding the error, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.ok(), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.ok(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 440,
          "name": "or",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 658,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L658"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 441,
              "name": "or",
              "comment": {
                "description": "Return `result` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nArguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended\nto use {@link orElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = ok(2);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = ok(100);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 442,
                  "name": "F",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 443,
                  "name": "result",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 489,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 442,
                        "name": "F",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 442,
                    "name": "F",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 444,
          "name": "orElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 679,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L679"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 445,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nThis function can be used for control flow based on result values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst square = (x: number): Result<number, string> => ok(x * x);\nconst wrapErr = (x: number): Result<number, string> => err(x);\n\nassert.equal(ok(2).orElse(square).orElse(square), ok(2));\nassert.equal(ok(2).orElse(wrapErr).orElse(square), ok(2));\nassert.equal(err(3).orElse(square).orElse(wrapErr), ok(9));\nassert.equal(err(3).orElse(wrapErr).orElse(wrapErr), err(3));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 446,
                  "name": "F",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 447,
                  "name": "cb",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 448,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 679,
                          "character": 15,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L679"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 449,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 450,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 250,
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 489,
                                "name": "T"
                              },
                              {
                                "type": "reference",
                                "id": 446,
                                "name": "F"
                              }
                            ],
                            "name": "Result"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 446,
                    "name": "F",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 457,
          "name": "transpose",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 743,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L743"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 458,
              "name": "transpose",
              "comment": {
                "description": "Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n\n`ok(none)` will be mapped to `none`. `ok(some(v))` and `err(e)` will be mapped to `some(ok(v))` and `some(err(e))`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Option<number>, Error> = ok(some(5));\nconst y: Option<Result<number, Error>> = some(ok(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 459,
                  "name": "IT",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 460,
                  "name": "this",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 6,
                        "name": "Option",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 459,
                            "name": "IT",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 459,
                        "name": "IT",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 490,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 412,
          "name": "unwrap",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 472,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L472"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 413,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the message, and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrap(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 489,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 414,
          "name": "unwrapErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 500,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L500"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 415,
              "name": "unwrapErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the message, and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.unwrapErr(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.unwrapErr(), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 490,
                "name": "E",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 416,
          "name": "unwrapOr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 527,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L527"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 417,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Ok` value or the provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(9);\nassert.equal(x.unwrapOr(2), 9);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Error');\nassert.equal(x.unwrapOr(2), 2);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 418,
                  "name": "V",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 419,
                  "name": "defaultValue",
                  "type": {
                    "kind": "reference",
                    "id": 418,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 418,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 420,
          "name": "unwrapOrElse",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 548,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L548"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 421,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained `Ok` value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst count = (x: string) => x.length;\n\nassert.equal(ok(2).unwrapOrElse(count), 2);\nassert.equal(err('hello').unwrapOrElse(count), 5);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 422,
                  "name": "V",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 423,
                  "name": "op",
                  "type": {
                    "kind": "reflection",
                    "reflection": {
                      "id": 424,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "packages/result/src/lib/Result/IResult.ts",
                          "line": 548,
                          "character": 21,
                          "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L548"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 425,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 426,
                              "name": "error",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 490,
                                "name": "E"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 422,
                            "name": "V"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 489,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 422,
                    "name": "V",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 427,
          "name": "unwrapRaw",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 574,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result/IResult.ts#L574"
          },
          "parentId": 308,
          "signatures": [
            {
              "id": 428,
              "name": "unwrapRaw",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws the contained error.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrapRaw(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrapRaw(), {\n  name: 'Error',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 489,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            }
          ]
        }
      ]
    }
  ],
  "namespaces": [
    {
      "id": 8,
      "name": "Option",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 13,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L13"
      },
      "external": false,
      "classes": [],
      "constants": [
        {
          "id": 37,
          "name": "none",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 89,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L89"
          },
          "external": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "None",
            "packageName": null,
            "typeArguments": []
          },
          "value": "_none"
        }
      ],
      "enums": [],
      "functions": [
        {
          "id": 27,
          "name": "all",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 61,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L61"
          },
          "external": false,
          "signatures": [
            {
              "id": 28,
              "name": "all",
              "comment": {
                "description": "Creates a {@link Some} that is the combination of all collected {@link Some} values as an array, or the first\n{@link None} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Option}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 29,
                  "name": "T",
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 6,
                        "name": "Option",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 30,
                  "name": "options",
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 29,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 47,
                    "name": "UnwrapSomeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 29,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 31,
          "name": "any",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 79,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L79"
          },
          "external": false,
          "signatures": [
            {
              "id": 32,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Some}, or a {@link None} if none was found.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Option}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 33,
                  "name": "T",
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 6,
                        "name": "Option",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 34,
                  "name": "options",
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 33,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 47,
                      "name": "UnwrapSomeArray",
                      "packageName": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 33,
                          "name": "T",
                          "packageName": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 15,
          "name": "from",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 33,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L33"
          },
          "external": false,
          "signatures": [
            {
              "id": 16,
              "name": "from",
              "comment": {
                "description": "Creates an {@link Option} out of a value or callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 17,
                  "name": "T",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 18,
                  "name": "op",
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 35,
                        "name": "Resolvable",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 17,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "reflection": {
                          "id": 19,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Option.ts",
                              "line": 33,
                              "character": 46,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L33"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 20,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 35,
                                "typeArguments": [
                                  {
                                    "type": "reference",
                                    "id": 17,
                                    "name": "T"
                                  }
                                ],
                                "name": "Resolvable"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 17,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 21,
          "name": "fromAsync",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 47,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L47"
          },
          "external": false,
          "signatures": [
            {
              "id": 22,
              "name": "fromAsync",
              "comment": {
                "description": "Creates an {@link Option} out of a value or callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 23,
                  "name": "T",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 24,
                  "name": "op",
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 35,
                            "name": "Resolvable",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 23,
                                "name": "T",
                                "packageName": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "reflection": {
                          "id": 25,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Option.ts",
                              "line": 47,
                              "character": 68,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L47"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 26,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "reference",
                                    "id": 35,
                                    "typeArguments": [
                                      {
                                        "type": "reference",
                                        "id": 23,
                                        "name": "T"
                                      }
                                    ],
                                    "name": "Resolvable"
                                  }
                                ],
                                "name": "Awaitable"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 23,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 9,
          "name": "is",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 23,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L23"
          },
          "external": false,
          "signatures": [
            {
              "id": 10,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 11,
                  "name": "T",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 12,
                  "name": "value",
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "Option",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 11,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 13,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 14,
                  "name": "value",
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "value",
                "type": {
                  "kind": "reference",
                  "id": 6,
                  "name": "Option",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 38,
          "name": "some",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 90,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L90"
          },
          "external": false,
          "signatures": [
            {
              "id": 39,
              "name": "some",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 40,
                  "name": "T",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 41,
                  "name": "value",
                  "type": {
                    "kind": "reference",
                    "id": 3,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Some",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 3,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 44,
          "name": "None",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 93,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L93"
          },
          "external": false,
          "typeParameters": [],
          "type": {
            "kind": "reference",
            "id": null,
            "name": "None",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 35,
          "name": "Resolvable",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 16,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L16"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 36,
              "name": "T",
              "type": null,
              "default": null
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 36,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              },
              {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 36,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 42,
          "name": "Some",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 92,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L92"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 43,
              "name": "T",
              "type": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Some",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 45,
          "name": "UnwrapSome",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 95,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L95"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 46,
              "name": "T",
              "type": {
                "kind": "reference",
                "id": 6,
                "name": "Option",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 46,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 42,
              "name": "Some",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 47,
          "name": "UnwrapSomeArray",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 96,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L96"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 48,
              "name": "T",
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 6,
                        "name": "Option",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 48,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 45,
              "name": "UnwrapSome",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 48,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ]
    },
    {
      "id": 253,
      "name": "Result",
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "source": {
        "line": 14,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L14"
      },
      "external": false,
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        {
          "id": 275,
          "name": "all",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 63,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L63"
          },
          "external": false,
          "signatures": [
            {
              "id": 276,
              "name": "all",
              "comment": {
                "description": "Creates an {@link Ok} that is the combination of all collected {@link Ok} values as an array, or the first\n{@link Err} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 277,
                  "name": "T",
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 278,
                  "name": "results",
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 277,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 304,
                    "name": "UnwrapOkArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 277,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 306,
                      "name": "UnwrapErrArray",
                      "packageName": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 277,
                          "name": "T",
                          "packageName": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 279,
          "name": "any",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 81,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L81"
          },
          "external": false,
          "signatures": [
            {
              "id": 280,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Ok}, or an {@link Err} that is the combination of all collected error values.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 281,
                  "name": "T",
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 282,
                  "name": "results",
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 281,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 304,
                      "name": "UnwrapOkArray",
                      "packageName": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 281,
                          "name": "T",
                          "packageName": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  },
                  {
                    "kind": "reference",
                    "id": 306,
                    "name": "UnwrapErrArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 281,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 286,
          "name": "err",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 94,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L94"
          },
          "external": false,
          "signatures": [
            {
              "id": 287,
              "name": "err",
              "comment": {
                "description": "Creates an Err with no error.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "An erroneous Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Err",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            },
            {
              "id": 288,
              "name": "err",
              "comment": {
                "description": "Creates an Err.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  },
                  {
                    "name": "returns",
                    "text": "An erroneous Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 289,
                  "name": "E",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 290,
                  "name": "x",
                  "type": {
                    "kind": "reference",
                    "id": 248,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Err",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 248,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 261,
          "name": "from",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 34,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L34"
          },
          "external": false,
          "signatures": [
            {
              "id": 262,
              "name": "from",
              "comment": {
                "description": "Creates a {@link Result} out of a callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 263,
                  "name": "T",
                  "type": null,
                  "default": null
                },
                {
                  "id": 264,
                  "name": "E",
                  "type": null,
                  "default": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 265,
                  "name": "op",
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 283,
                        "name": "Resolvable",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 263,
                            "name": "T",
                            "packageName": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 264,
                            "name": "E",
                            "packageName": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "reflection": {
                          "id": 266,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Result.ts",
                              "line": 34,
                              "character": 62,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L34"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 267,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 283,
                                "typeArguments": [
                                  {
                                    "type": "reference",
                                    "id": 263,
                                    "name": "T"
                                  },
                                  {
                                    "type": "reference",
                                    "id": 264,
                                    "name": "E"
                                  }
                                ],
                                "name": "Resolvable"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 263,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 264,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 268,
          "name": "fromAsync",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 49,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L49"
          },
          "external": false,
          "signatures": [
            {
              "id": 269,
              "name": "fromAsync",
              "comment": {
                "description": "Creates a {@link Result} out of a promise or async callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 270,
                  "name": "T",
                  "type": null,
                  "default": null
                },
                {
                  "id": 271,
                  "name": "E",
                  "type": null,
                  "default": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 272,
                  "name": "op",
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 283,
                            "name": "Resolvable",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 270,
                                "name": "T",
                                "packageName": null,
                                "typeArguments": []
                              },
                              {
                                "kind": "reference",
                                "id": 271,
                                "name": "E",
                                "packageName": null,
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "reflection": {
                          "id": 273,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "packages/result/src/lib/Result.ts",
                              "line": 49,
                              "character": 84,
                              "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L49"
                            }
                          ],
                          "signatures": [
                            {
                              "id": 274,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "reference",
                                    "id": 283,
                                    "typeArguments": [
                                      {
                                        "type": "reference",
                                        "id": 270,
                                        "name": "T"
                                      },
                                      {
                                        "type": "reference",
                                        "id": 271,
                                        "name": "E"
                                      }
                                    ],
                                    "name": "Resolvable"
                                  }
                                ],
                                "name": "Awaitable"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 270,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 271,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 254,
          "name": "is",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 23,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L23"
          },
          "external": false,
          "signatures": [
            {
              "id": 255,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 256,
                  "name": "T",
                  "type": null,
                  "default": null
                },
                {
                  "id": 257,
                  "name": "E",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 258,
                  "name": "value",
                  "type": {
                    "kind": "reference",
                    "id": 250,
                    "name": "Result",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 256,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 257,
                        "name": "E",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 259,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 260,
                  "name": "value",
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "value",
                "type": {
                  "kind": "reference",
                  "id": 250,
                  "name": "Result",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    },
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 291,
          "name": "ok",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 95,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L95"
          },
          "external": false,
          "signatures": [
            {
              "id": 292,
              "name": "ok",
              "comment": {
                "description": "Creates an Ok with no value.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A successful Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Ok",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            },
            {
              "id": 293,
              "name": "ok",
              "comment": {
                "description": "Creates an Ok.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "returns",
                    "text": "A successful Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 294,
                  "name": "T",
                  "type": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 295,
                  "name": "x",
                  "type": {
                    "kind": "reference",
                    "id": 243,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Ok",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 243,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 296,
          "name": "Err",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 97,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L97"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 297,
              "name": "E",
              "type": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Err",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 298,
          "name": "Ok",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 98,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L98"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 299,
              "name": "T",
              "type": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": null,
            "name": "Ok",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 283,
          "name": "Resolvable",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 17,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L17"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 284,
              "name": "T",
              "type": null,
              "default": null
            },
            {
              "id": 285,
              "name": "E",
              "type": null,
              "default": null
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 284,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 284,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 285,
                    "name": "E",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 302,
          "name": "UnwrapErr",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 101,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L101"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 303,
              "name": "T",
              "type": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 303,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 296,
              "name": "Err",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 306,
          "name": "UnwrapErrArray",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 106,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L106"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 307,
              "name": "T",
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 307,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 302,
              "name": "UnwrapErr",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 307,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        },
        {
          "id": 300,
          "name": "UnwrapOk",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 100,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L100"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 301,
              "name": "T",
              "type": {
                "kind": "reference",
                "id": 250,
                "name": "Result",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 301,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 298,
              "name": "Ok",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 304,
          "name": "UnwrapOkArray",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "source": {
            "line": 103,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L103"
          },
          "external": false,
          "typeParameters": [
            {
              "id": 305,
              "name": "T",
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 250,
                        "name": "Result",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 305,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 300,
              "name": "UnwrapOk",
              "packageName": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 305,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ]
    }
  ],
  "typeAliases": [
    {
      "id": 6,
      "name": "Option",
      "comment": {
        "description": "The union of the two variations of `Option`.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The value's type."
          }
        ],
        "modifierTags": []
      },
      "source": {
        "line": 13,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Option.ts#L13"
      },
      "external": false,
      "typeParameters": [
        {
          "id": 7,
          "name": "T",
          "type": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": 42,
            "name": "Option.Some",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 7,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": 44,
            "name": "Option.None",
            "packageName": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 250,
      "name": "Result",
      "comment": {
        "description": "The union of the two variations of `Result`.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          }
        ],
        "modifierTags": []
      },
      "source": {
        "line": 14,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/1e4531e/packages/result/src/lib/Result.ts#L14"
      },
      "external": false,
      "typeParameters": [
        {
          "id": 251,
          "name": "T",
          "type": null,
          "default": null
        },
        {
          "id": 252,
          "name": "E",
          "type": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": 298,
            "name": "Result.Ok",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 251,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": 296,
            "name": "Result.Err",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 252,
                "name": "E",
                "packageName": null,
                "typeArguments": []
              }
            ]
          }
        ]
      }
    }
  ]
}