{
  "typeDocJsonParserVersion": "10.0.0",
  "id": 0,
  "name": "@sapphire/result",
  "version": "2.6.6",
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://raw.githubusercontent.com/sapphiredev/assets/main/banners/SapphireCommunity.png)\n\n# @sapphire/result\n\n**A TypeScript port of Nightly Rust's Result and Option structs**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/utilities/branch/main/graph/badge.svg?token=OEGIV6RFDO)](https://codecov.io/gh/sapphiredev/utilities)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/result?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/result)\n[![npm](https://img.shields.io/npm/v/@sapphire/result?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/result)\n\n</div>\n\n## Description\n\nWhen having many `try-catch` blocks after one another, or multiple `try-catch` blocks nested in one another then code can become very chaotic very quickly. To alleviate that issue we have made the `@sapphire/result` which offers two structures based on Rust's [`Result<T, E>`](https://doc.rust-lang.org/std/result/index.html) and [`Option<T>`](https://doc.rust-lang.org/std/option/enum.Option.html) with full Nightly coverage and extra convenience methods. This code has been branched off of `@sapphire/framework` into its own package after we saw great success with the code there.\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Full feature parity with Nightly Rust's `Result<T, E>` and `Option<T>`\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/result\n```\n\n## Usage\n\n**Note 1:** While this section uses `require`, the imports match 1:1 with ESM imports. For example `const { Result } = require('@sapphire/result')` equals `import { Result } from '@sapphire/result'`.\n\n**Note 2:** For more thorough examples check out the generated documentation on [our website here](https://www.sapphirejs.dev/docs/Documentation/api-utilities/@sapphire/result/interfaces/IResult)\n\n### Wrapping synchronous `try-catch` blocks\n\n**Old code without `Result.from`:**\n\n```typescript\ntry {\n\tconst returnCode = someFunctionThatMightThrow();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.from`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = Result.from(() => someFunctionThatMightThrow());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n### Wrapping asynchronous `try-catch` blocks\n\n**Old code without `Result.fromAsync`:**\n\n```typescript\ntry {\n\tconst returnCode = await someFunctionThatReturnsAPromiseAndMightReject();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.fromAsync`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = await Result.fromAsync(async () => someFunctionThatReturnsAPromiseAndMightReject());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n---\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n[lexure]: https://github.com/1Computer1/lexure\n[1computer1]: https://github.com/1Computer1\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/result@2.6.6](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.6...@sapphire/result@2.6.6) - (2024-01-19)\n\n## üêõ Bug Fixes\n\n- Fixed commonjs typings export mapping (#707) ([216ff02](https://github.com/sapphiredev/utilities/commit/216ff0260d63a9590357f9a5069f1ae2b34eaf5d))\n\n# [@sapphire/result@2.6.5](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.5...@sapphire/result@2.6.5) - (2023-12-04)\n\n## üêõ Bug Fixes\n\n- **result:** Properly split CJS, ESM and IIFE ([1f8f52e](https://github.com/sapphiredev/utilities/commit/1f8f52efd78a76553bd3c0a516c4a629f098496e))\n- Update export mapping for proper ESM/CJS split ([dd0cff8](https://github.com/sapphiredev/utilities/commit/dd0cff8e9b03a15812f25f7a1180501a92422629))\n- **deps:** Update all non-major dependencies (#607) ([9cc8bd0](https://github.com/sapphiredev/utilities/commit/9cc8bd0d4b5d650deab2c913e6c3d713861bae28))\n\n## üìù Documentation\n\n- **readme:** Add link to examples ([e33b5b9](https://github.com/sapphiredev/utilities/commit/e33b5b9408bf0f48f427291de5bd56bfc4250644))\n\n## üß™ Testing\n\n- Update vitest to coverage v8 ([a4bc6e4](https://github.com/sapphiredev/utilities/commit/a4bc6e4f24ea60143a150ecc76fda6484f172ab9))\n\n# [@sapphire/result@2.6.4](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.3...@sapphire/result@2.6.4) - (2023-05-12)\n\n## üêõ Bug Fixes\n\n- **result:** Remove unnecessary tslib import ([ec40daa](https://github.com/sapphiredev/utilities/commit/ec40daa55fce58202f06401bb1a8ee0414f28962))\n\n# [@sapphire/result@2.6.3](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.2...@sapphire/result@2.6.3) - (2023-05-02)\n\n## üè† Refactor\n\n- **result:** Internally rework code to ensure typings can be generated without conflicts ([83d698e](https://github.com/sapphiredev/utilities/commit/83d698e5b0f3e552a3c97e1d9146fc74426b7609))\n\n# [@sapphire/result@2.6.2](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.1...@sapphire/result@2.6.2) - (2023-04-17)\n\n## üêõ Bug Fixes\n\n- **result:** Add tslib dependency to fix __exportStar not being defined ([4c51387](https://github.com/sapphiredev/utilities/commit/4c51387b83ce363752528d45da9ca9772ed80552))\n\n# [@sapphire/result@2.6.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.0...@sapphire/result@2.6.1) - (2023-04-10)\n\n## üêõ Bug Fixes\n\n- **result:** Add missing type modifier ([deb93b7](https://github.com/sapphiredev/utilities/commit/deb93b7a27d8f0646544bd6b9e5135903f7b94a7))\n- **deps:** Update all non-major dependencies (#577) ([291dd67](https://github.com/sapphiredev/utilities/commit/291dd6783e57d8f075ce566218ba076ef6c4bbbd))\n- **deps:** Update all non-major dependencies (#545) ([40ca040](https://github.com/sapphiredev/utilities/commit/40ca040a21d8a0949682051a3a974538183a400e))\n- **deps:** Update all non-major dependencies (#544) ([cc78f17](https://github.com/sapphiredev/utilities/commit/cc78f17390c7f3db08af92bf46a5a70a9c11dd5f))\n- **deps:** Update all non-major dependencies (#532) ([8033d1f](https://github.com/sapphiredev/utilities/commit/8033d1ff7a5a1974134c61f424f171cccb2915e1))\n- **deps:** Update all non-major dependencies (#514) ([21b07d5](https://github.com/sapphiredev/utilities/commit/21b07d5db529a0d982647a60de98e46f36f1ac93))\n\n## üìù Documentation\n\n- Add @06000208 as a contributor ([fa3349e](https://github.com/sapphiredev/utilities/commit/fa3349e55ce4ad008785211dec7bf8e2b5d933df))\n- Add @didinele as a contributor ([42ef7b6](https://github.com/sapphiredev/utilities/commit/42ef7b656c48fd0e720119db1d622c8bba2791e9))\n- Add @goestav as a contributor ([0e56a92](https://github.com/sapphiredev/utilities/commit/0e56a92a4e2d0942bfa207f81a8cb03b32312034))\n- Add @CitTheDev as a contributor ([34169ea](https://github.com/sapphiredev/utilities/commit/34169eae1dc0476ccf5a6c4f36e28602a204829e))\n- Add @legendhimslef as a contributor ([059b6f1](https://github.com/sapphiredev/utilities/commit/059b6f1ab5362d46d58624d06c1aa39192b0716f))\n\n# [@sapphire/result@2.6.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.5.0...@sapphire/result@2.6.0) - (2022-10-16)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies (#505) ([6178296](https://github.com/sapphiredev/utilities/commit/617829649e1e4deeee02b14533b5377cd5bc1fb3))\n\n## üìù Documentation\n\n- Add @r-priyam as a contributor ([fb278ba](https://github.com/sapphiredev/utilities/commit/fb278bacf627ec6fc88752eafeb12df5f3177a2c))\n\n## üöÄ Features\n\n- Add `{Option,Result}.{any,all}` (#501) ([4c349bf](https://github.com/sapphiredev/utilities/commit/4c349bf6b3577ad85a1895f90c775c92c4016fa3))\n\n# [@sapphire/result@2.5.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.1...@sapphire/result@2.5.0) - (2022-10-01)\n\n## üè† Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## üìù Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n- Update @RealShadowNova as a contributor ([a869ba0](https://github.com/sapphiredev/utilities/commit/a869ba0abfad041610b9115187d426aebe671af6))\n\n## üöÄ Features\n\n- **result:** Add `Result.unwrapRaw` (#475) ([82fe79e](https://github.com/sapphiredev/utilities/commit/82fe79ec6bff4979be615f322b6d1392016d9622))\n\n# [@sapphire/result@2.4.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.0...@sapphire/result@2.4.1) - (2022-08-29)\n\n## üß™ Testing\n\n- **result:** Add full coverage (#436) ([3f06ac5](https://github.com/sapphiredev/utilities/commit/3f06ac500b8e96312a5fe04be2817753ce219d37))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## üöÄ Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## üöÄ Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.3.3](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.2...@sapphire/result@2.3.3) - (2022-08-06)\n\n## üêõ Bug Fixes\n\n- **result:** Better `unwrapOr*`, added more tests (#416) ([ec088a8](https://github.com/sapphiredev/utilities/commit/ec088a88a878c7d230c51b148593a85d258075f9))\n\n# [@sapphire/result@2.3.2](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.1...@sapphire/result@2.3.2) - (2022-08-05)\n\n## üêõ Bug Fixes\n\n- Revert \"make unwrap methods generic (#415) (v2.3.1)\" ([a963396](https://github.com/sapphiredev/utilities/commit/a9633967d5c4659f26c54fa660796bae18fdaf07))\n\n# [@sapphire/result@2.3.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.0...@sapphire/result@2.3.1) - (2022-08-05)\n\n## üêõ Bug Fixes\n\n- **result:** Make unwrap methods generic (#415) ([76e95b3](https://github.com/sapphiredev/utilities/commit/76e95b3c18ecdff53bfa07d541ed1bc1809c7f72))\n\n# [@sapphire/result@2.3.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.2.0...@sapphire/result@2.3.0) - (2022-08-05)\n\n## üöÄ Features\n\n- **result:** Add `inspect*Async` methods (#414) ([fca7a80](https://github.com/sapphiredev/utilities/commit/fca7a8010ae8c368513de2eca56f9f5bfe2756a3))\n\n# [@sapphire/result@2.2.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.1...@sapphire/result@2.2.0) - (2022-08-04)\n\n## üêõ Bug Fixes\n\n- **result:** Resolve Unwrap type issues (#411) ([3c2159c](https://github.com/sapphiredev/utilities/commit/3c2159cac18df0925cd71393698ed7d9f98fd6ef))\n\n## üöÄ Features\n\n- **result:** Export `ok`, `err`, `some`, `none`, and improve docs (#412) ([c978864](https://github.com/sapphiredev/utilities/commit/c978864d91d950c611c073a5c34ef01311e9d8f0))\n\n# [@sapphire/result@2.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.0...@sapphire/result@2.1.1) - (2022-07-29)\n\n## üêõ Bug Fixes\n\n- **Result:** Type `IResult.mapInto`'s return correctly (#405) ([14ddf5f](https://github.com/sapphiredev/utilities/commit/14ddf5fc35d1186f9fdc78a3d2b3b465acbd36ac))\n\n# [@sapphire/result@2.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.1...@sapphire/result@2.1.0) - (2022-07-29)\n\n## üìù Documentation\n\n- Add @muchnameless as a contributor ([a1221fe](https://github.com/sapphiredev/utilities/commit/a1221fea68506e99591d5d00ec552a07c26833f9))\n- Add @enxg as a contributor ([d2382f0](https://github.com/sapphiredev/utilities/commit/d2382f04e3909cb4ad11798a0a10e683f6cf5383))\n- Add @EvolutionX-10 as a contributor ([efc3a32](https://github.com/sapphiredev/utilities/commit/efc3a320a72ae258996dd62866d206c33f8d4961))\n\n## üöÄ Features\n\n- **Result:** Add new convenience methods (#404) ([7c3ec61](https://github.com/sapphiredev/utilities/commit/7c3ec6168dde544578e5016120c9975009889391))\n\n# [@sapphire/result@2.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.0...@sapphire/result@2.0.1) - (2022-07-03)\n\n## üè† Refactor\n\n- **result:** Fixed types (#391) ([a1934e1](https://github.com/sapphiredev/utilities/commit/a1934e10cc7d81c71354deb153a4f3bb83e50e65))\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([84af0db](https://github.com/sapphiredev/utilities/commit/84af0db2db749223b036aa99fe19a2e9af5681c6))\n\n# [@sapphire/result@2.0.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.1...@sapphire/result@2.0.0) - (2022-06-26)\n\n## üè† Refactor\n\n- Rewrite @sapphire/result from scratch (#364) ([d5b57ff](https://github.com/sapphiredev/utilities/commit/d5b57ff52402bfd261372bf4486e46f39bb41b6d))\n\n   ### üí• Breaking Changes:\n   - Removed `Maybe` type, the substitute is `Option`\n   - Removed `maybe` function, the substitute is `Option.from`\n   - Removed `some` function, the substitute is `Option.some`\n   - Removed `none` function, the substitute is `Option.none`\n   - Removed `isSome` function, the substitute is `option.isSome`\n   - Removed `isNone` function, the substitute is `option.isNone`\n   - Removed `isMaybe` function, the substitute is `Option.is`\n   - Removed `UnwrapMaybeValue` type, the substitute is `Option.UnwrapSome`\n   - Removed `None` type, the substitute is `Option.None`\n   - Removed `Some` type, the substitute is `Option.Some`\n   - Removed `Err` type, the substitute is `Result.Err`\n   - Removed `Ok` type, the substitute is `Result.Ok`\n   - Removed `from` function, the substitute is `Result.from`\n   - Removed `fromAsync` function, the substitute is `Result.fromAsync`\n\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([50cd8de](https://github.com/sapphiredev/utilities/commit/50cd8dea593b6f5ae75571209456b3421e2ca59a))\n\n## üìù Documentation\n\n- Add @MajesticString as a contributor ([295b3e9](https://github.com/sapphiredev/utilities/commit/295b3e9849a4b0fe64074bae02f6426378a303c3))\n- Add @Mzato0001 as a contributor ([c790ef2](https://github.com/sapphiredev/utilities/commit/c790ef25df2d7e22888fa9f8169167aa555e9e19))\n- Add @NotKaskus as a contributor ([00da8f1](https://github.com/sapphiredev/utilities/commit/00da8f199137b9277119823f322d1f2d168d928a))\n- Add @imranbarbhuiya as a contributor ([fb674c2](https://github.com/sapphiredev/utilities/commit/fb674c2c5594d41e71662263553dcb4bac9e37f4))\n- Add @axisiscool as a contributor ([ce1aa31](https://github.com/sapphiredev/utilities/commit/ce1aa316871a88d3663efbdf2a42d3d8dfe6a27f))\n- Add @dhruv-kaushikk as a contributor ([ebbf43f](https://github.com/sapphiredev/utilities/commit/ebbf43f63617daba96e72c50a234bf8b64f6ddc4))\n- Add @Commandtechno as a contributor ([f1d69fa](https://github.com/sapphiredev/utilities/commit/f1d69fabe1ee0abe4be08b19e63dbec03102f7ce))\n- Fix typedoc causing OOM crashes ([63ba41c](https://github.com/sapphiredev/utilities/commit/63ba41c4b6678554b1c7043a22d3296db4f59360))\n\n## üß™ Testing\n\n- Migrate to vitest (#380) ([075ec73](https://github.com/sapphiredev/utilities/commit/075ec73c7a8e3374fad3ada612d37eb4ac36ec8d))\n\n## [1.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.0...@sapphire/result@1.1.1) (2022-04-01)\n\n**Note:** Version bump only for package @sapphire/result\n\n# [1.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.0.0...@sapphire/result@1.1.0) (2022-03-06)\n\n### Features\n\n-   allow module: NodeNext ([#306](https://github.com/sapphiredev/utilities/issues/306)) ([9dc6dd6](https://github.com/sapphiredev/utilities/commit/9dc6dd619efab879bb2b0b3c9e64304e10a67ed6))\n\n# 1.0.0 (2022-02-06)\n\n### Features\n\n-   **package:** add @sapphire/result package ([#274](https://github.com/sapphiredev/utilities/issues/274)) ([8a86826](https://github.com/sapphiredev/utilities/commit/8a8682607c2aa4c845e814816fa2b4478c23aa84))\n",
  "classes": [
    {
      "id": 826,
      "name": "Err",
      "source": {
        "line": 9,
        "file": "Err.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L9"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type used to express computations that can fail, it can be used for returning and propagating errors. This is a\ntype union with the variants `Ok(T)`, representing success and containing a value, and `Err(E)`, representing error\nand containing an error value.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          },
          {
            "name": "see",
            "text": "{@link https://doc.rust-lang.org/std/result/index.html}"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [
        {
          "kind": "reference",
          "id": 1063,
          "name": "IResult",
          "packageName": "@sapphire/result",
          "typeArguments": [
            {
              "kind": "intrinsic",
              "type": "any"
            },
            {
              "kind": "reference",
              "id": 829,
              "name": "ResultErr.E",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          ]
        }
      ],
      "typeParameters": [
        {
          "id": 1004,
          "name": "E",
          "constraint": null,
          "default": null
        }
      ],
      "construct": {
        "id": 827,
        "name": "constructor",
        "source": {
          "line": 12,
          "file": "Err.ts",
          "path": "packages/result/src/lib/Result",
          "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L12"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 826,
        "accessibility": "public",
        "parameters": [
          {
            "id": 830,
            "name": "error",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 829,
              "name": "ResultErr.E",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 831,
          "name": "error",
          "source": {
            "line": 10,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L10"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 826,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 829,
            "name": "ResultErr.E",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        }
      ],
      "methods": [
        {
          "id": 1002,
          "name": "[iterator]",
          "source": {
            "line": 182,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L182"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 1003,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IResult.iter}\n - {@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 946,
          "name": "and",
          "source": {
            "line": 123,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L123"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 947,
              "name": "and",
              "comment": {
                "description": "Returns `result` if the result is `Ok`, otherwise returns the `Err` value of itself.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Early error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = ok('Hello');\nassert.equal(x.and(y), ok('Hello'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 948,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 949,
          "name": "andThen",
          "source": {
            "line": 128,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L128"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 950,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? err('overflowed') : ok(4 / value);\n}\n\nassert.equal(ok(2).andThen(fractionOf4), ok(4));\nassert.equal(ok(0).andThen(fractionOf4), err('overflowed'));\nassert.equal(err('not a number').andThen(fractionOf4), err('not a number'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 951,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 953,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 954,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            },
                            {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 966,
          "name": "contains",
          "source": {
            "line": 141,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L141"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 967,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the result is an `Ok` and the given value strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 968,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 969,
          "name": "containsErr",
          "source": {
            "line": 146,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L146"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 970,
              "name": "containsErr",
              "comment": {
                "description": "Returns `true` if the result is an `Err` and the given error strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.containsErr('Some error message'), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some other error message');\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 971,
                  "name": "error",
                  "comment": {
                    "description": "The error to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 829,
                    "name": "ResultErr.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 980,
          "name": "eq",
          "source": {
            "line": 166,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L166"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 981,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 982,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 983,
              "name": "eq",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 984,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 850,
          "name": "err",
          "source": {
            "line": 37,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L37"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 851,
              "name": "err",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<E>`.\n\nConverts itself into an `Option<E>`, and discarding the successful value, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.err(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.err(), 'Some error message');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 829,
                    "name": "ResultErr.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 923,
          "name": "expect",
          "source": {
            "line": 93,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L93"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 924,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the given message and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 925,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 926,
          "name": "expectErr",
          "source": {
            "line": 97,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L97"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 927,
              "name": "expectErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the given message and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.expectErr('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.expectErr('Whoops!'), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 928,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 829,
                "name": "ResultErr.E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 974,
          "name": "flatten",
          "source": {
            "line": 154,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L154"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 975,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(ok('Hello'));\nassert.equal(x.flatten(), ok('Hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(err(6));\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = err(6);\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 897,
          "name": "inspect",
          "source": {
            "line": 69,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L69"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 898,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 899,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 901,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 902,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 903,
          "name": "inspectAsync",
          "source": {
            "line": 74,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L74"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 904,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 905,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 907,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 908,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 909,
          "name": "inspectErr",
          "source": {
            "line": 79,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L79"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 910,
              "name": "inspectErr",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErrAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspectErr(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspectErr(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 911,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 913,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 914,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 915,
          "name": "inspectErrAsync",
          "source": {
            "line": 84,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L84"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 916,
              "name": "inspectErrAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErr} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectErrAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectErrAsync(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 917,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 919,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 920,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 976,
          "name": "intoOkOrErr",
          "source": {
            "line": 158,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L158"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 977,
              "name": "intoOkOrErr",
              "comment": {
                "description": "Returns the `Ok` value if self is `Ok`, and the `Err` value if self is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = ok(3);\nassert.equal(x.intoOkOrErr(), 3);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = err(4);\nassert.equal(x.intoOkOrErr(), 4);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.into_ok_or_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 829,
                "name": "ResultErr.E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 978,
          "name": "intoPromise",
          "source": {
            "line": 162,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L162"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 979,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Ok`) or the awaited error (if `Err`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = ok(Promise.resolve(3));\nassert.equal(await x.intoPromise(), ok(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 829,
                            "name": "ResultErr.E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 840,
          "name": "isErr",
          "source": {
            "line": 25,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L25"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 841,
              "name": "isErr",
              "comment": {
                "description": "Returns `true` if the result is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isErr(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isErr(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 826,
                  "name": "ResultErr",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 829,
                      "name": "ResultErr.E",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 842,
          "name": "isErrAnd",
          "source": {
            "line": 29,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L29"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 843,
              "name": "isErrAnd",
              "comment": {
                "description": "Returns `true` if the result is `Err` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new Error('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new TypeError('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 844,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 846,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 847,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 832,
          "name": "isOk",
          "source": {
            "line": 16,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L16"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 833,
              "name": "isOk",
              "comment": {
                "description": "Returns `true` if the result is `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isOk(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOk(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 834,
          "name": "isOkAnd",
          "source": {
            "line": 20,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L20"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 835,
              "name": "isOkAnd",
              "comment": {
                "description": "Returns `true` if the result is `Ok` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isOkAnd((value) => value > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(0);\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 836,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 838,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 839,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 921,
          "name": "iter",
          "source": {
            "line": 89,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L89"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 922,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 852,
          "name": "map",
          "source": {
            "line": 41,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L41"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 853,
              "name": "map",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.map((value) => value * 2), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.map((value) => value * 2), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 854,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 856,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 857,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 883,
          "name": "mapErr",
          "source": {
            "line": 61,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L61"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 884,
              "name": "mapErr",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErr((error) => error.message), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErr((error) => error.message), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 885,
                  "name": "F",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 886,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 888,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 889,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 885,
                          "name": "F",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 885,
                    "name": "F",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 890,
          "name": "mapErrInto",
          "source": {
            "line": 65,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L65"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 891,
              "name": "mapErrInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\nUnlike {@link mapErr}, this method does not wrap the returned value inside `Err`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErrInto((error) => err(error.message)), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => err(error.message)), err('Some error message'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => ok(4)), ok(4));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 892,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 893,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 895,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 896,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 892,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 892,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 858,
          "name": "mapInto",
          "source": {
            "line": 46,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L46"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 859,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.\n\nUnlike {@link map}, this method does not wrap the returned value inside `Ok`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.mapInto((value) => ok(value * value)), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(0);\nassert.equal(\n  x.mapInto((value) => (value === 0 ? err('zero is not divisible') : ok(1 / value))),\n  err('zero is not divisible')\n);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.mapInto((value) => ok(4)), err('Some error message'));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 860,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 862,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 863,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            },
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 864,
          "name": "mapOr",
          "source": {
            "line": 51,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L51"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 865,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 866,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 867,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 866,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 868,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 870,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 871,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 866,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 866,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 872,
          "name": "mapOrElse",
          "source": {
            "line": 56,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L56"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 873,
              "name": "mapOrElse",
              "comment": {
                "description": "Maps a `Result<T, E>` to `U` by applying fallback function default to a contained `Err` value, or function `cb`\nto a contained `Ok` value.\n\nThis function can be used to unpack a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = ok('hello');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = err('Some error message');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 18);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 874,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 875,
                  "name": "op",
                  "comment": {
                    "description": "The predicate that is run on `Err`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 877,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 878,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 874,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 879,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate that is run on `Ok`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 881,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 882,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 874,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 874,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 990,
          "name": "match",
          "source": {
            "line": 178,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L178"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 991,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = ok(4).match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = err('Hello').match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 992,
                  "name": "OkValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 993,
                  "name": "ErrValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 994,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 999,
                        "signatures": [
                          {
                            "id": 1000,
                            "name": "err",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 1001,
                                "name": "error",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 829,
                                  "name": "ResultErr.E",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 993,
                              "name": "ErrValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 996,
                        "signatures": [
                          {
                            "id": 997,
                            "name": "ok",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 998,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "intrinsic",
                                  "type": "never"
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 992,
                              "name": "OkValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 993,
                "name": "ErrValue",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 985,
          "name": "ne",
          "source": {
            "line": 172,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L172"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 986,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 987,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 988,
              "name": "ne",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 989,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 848,
          "name": "ok",
          "source": {
            "line": 33,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L33"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 849,
              "name": "ok",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<T>`.\n\nConverts itself into an `Option<T>`, and discarding the error, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.ok(), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.ok(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 955,
          "name": "or",
          "source": {
            "line": 133,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L133"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 956,
              "name": "or",
              "comment": {
                "description": "Return `result` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nArguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended\nto use {@link orElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = ok(2);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = ok(100);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 957,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 958,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 957,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 957,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 959,
          "name": "orElse",
          "source": {
            "line": 137,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L137"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 960,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nThis function can be used for control flow based on result values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst square = (x: number): Result<number, string> => ok(x * x);\nconst wrapErr = (x: number): Result<number, string> => err(x);\n\nassert.equal(ok(2).orElse(square).orElse(square), ok(2));\nassert.equal(ok(2).orElse(wrapErr).orElse(square), ok(2));\nassert.equal(err(3).orElse(square).orElse(wrapErr), ok(9));\nassert.equal(err(3).orElse(wrapErr).orElse(wrapErr), err(3));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 961,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 962,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 964,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 965,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 961,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 961,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 972,
          "name": "transpose",
          "source": {
            "line": 150,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L150"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 973,
              "name": "transpose",
              "comment": {
                "description": "Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n\n`ok(none)` will be mapped to `none`. `ok(some(v))` and `err(e)` will be mapped to `some(ok(v))` and `some(err(e))`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Option<number>, Error> = ok(some(5));\nconst y: Option<Result<number, Error>> = some(ok(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 829,
                        "name": "ResultErr.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 929,
          "name": "unwrap",
          "source": {
            "line": 102,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L102"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 930,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the message, and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrap(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 931,
          "name": "unwrapErr",
          "source": {
            "line": 106,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L106"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 932,
              "name": "unwrapErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the message, and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.unwrapErr(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.unwrapErr(), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 829,
                "name": "ResultErr.E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 933,
          "name": "unwrapOr",
          "source": {
            "line": 110,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L110"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 934,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Ok` value or the provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(9);\nassert.equal(x.unwrapOr(2), 9);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Error');\nassert.equal(x.unwrapOr(2), 2);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 935,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 936,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 935,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 935,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 937,
          "name": "unwrapOrElse",
          "source": {
            "line": 114,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L114"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 938,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained `Ok` value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst count = (x: string) => x.length;\n\nassert.equal(ok(2).unwrapOrElse(count), 2);\nassert.equal(err('hello').unwrapOrElse(count), 5);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 939,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 940,
                  "name": "op",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 942,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 943,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 829,
                              "name": "ResultErr.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 939,
                          "name": "T",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 939,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 944,
          "name": "unwrapRaw",
          "source": {
            "line": 118,
            "file": "Err.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L118"
          },
          "parentId": 826,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 945,
              "name": "unwrapRaw",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws the contained error.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrapRaw(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrapRaw(), {\n  name: 'Error',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        }
      ]
    },
    {
      "id": 6,
      "name": "None",
      "source": {
        "line": 9,
        "file": "None.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L9"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [
        {
          "kind": "reference",
          "id": 438,
          "name": "IOption",
          "packageName": "@sapphire/result",
          "typeArguments": [
            {
              "kind": "intrinsic",
              "type": "any"
            }
          ]
        }
      ],
      "typeParameters": [],
      "construct": {
        "id": 7,
        "name": "constructor",
        "source": null,
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 6,
        "accessibility": "public",
        "parameters": []
      },
      "properties": [],
      "methods": [
        {
          "id": 176,
          "name": "[iterator]",
          "source": {
            "line": 164,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L164"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 177,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IOption.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 94,
          "name": "and",
          "source": {
            "line": 85,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L85"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 95,
              "name": "and",
              "comment": {
                "description": "Returns `None` if the option is `None`, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), some('foo'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 96,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 97,
          "name": "andThen",
          "source": {
            "line": 90,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L90"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 98,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? none : some(4 / value);\n}\n\nassert.equal(some(2).andThen(fractionOf4), some(4));\nassert.equal(some(0).andThen(fractionOf4), none);\nassert.equal(none.andThen(fractionOf4), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 99,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 101,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 102,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 129,
          "name": "contains",
          "source": {
            "line": 115,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L115"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 130,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value containing the given value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 131,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 151,
          "name": "eq",
          "source": {
            "line": 146,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L146"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 152,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 153,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 154,
              "name": "eq",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 155,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 156,
              "name": "eq",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 157,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 19,
          "name": "expect",
          "source": {
            "line": 23,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L23"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 20,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'OptionError',\n  message: 'Whoops'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 21,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.\nIf the value is an `Err`, it throws an {@link OptionError} with the given message.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 123,
          "name": "filter",
          "source": {
            "line": 110,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L110"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 124,
              "name": "filter",
              "comment": {
                "description": "Returns None if the option is None, otherwise calls `predicate` with the wrapped value and returns:\n\n- `Some(t)` if `predicate` returns `true` (where t is the wrapped value), and\n- `None` if `predicate` returns `false`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction isEven(value: number) {\n  return n % 2 === 0;\n}\n\nassert.equal(none.filter(isEven), none);\nassert.equal(some(3).filter(isEven), none);\nassert.equal(some(4).filter(isEven), some(4));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.filter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 125,
                  "name": "predicate",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 127,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 128,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 147,
          "name": "flatten",
          "source": {
            "line": 138,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L138"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 148,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(some(6));\nassert.equal(x.flatten(), some(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(none);\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = none;\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 70,
          "name": "inspect",
          "source": {
            "line": 63,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L63"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 71,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nsome(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nnone.inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 72,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 74,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 75,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 76,
          "name": "inspectAsync",
          "source": {
            "line": 68,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L68"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 77,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait some(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait none.inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 78,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 80,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 81,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 149,
          "name": "intoPromise",
          "source": {
            "line": 142,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L142"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 150,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Some`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = some(Promise.resolve(3));\nassert.equal(await x.intoPromise(), some(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 17,
          "name": "isNone",
          "source": {
            "line": 19,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L19"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 18,
              "name": "isNone",
              "comment": {
                "description": "Returns `true` if the option is a `None` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isNone(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isNone(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 6,
                  "name": "OptionNone",
                  "packageName": "@sapphire/result",
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 9,
          "name": "isSome",
          "source": {
            "line": 10,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L10"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 10,
              "name": "isSome",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSome(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSome(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 11,
          "name": "isSomeAnd",
          "source": {
            "line": 14,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L14"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 12,
              "name": "isSomeAnd",
              "comment": {
                "description": "Returns `true` if the option is a `Some` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSomeAnd((x) => x > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(0);\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 13,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 15,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 16,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 92,
          "name": "iter",
          "source": {
            "line": 81,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L81"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 93,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link Option.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 34,
          "name": "map",
          "source": {
            "line": 39,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L39"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 35,
              "name": "map",
              "comment": {
                "description": "Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst maybeSomeString = some('Hello, world!');\nconst maybeSomeLength = maybeSomeString.map((value) => value.length);\n\nassert.equal(maybeSomeLength, some(13));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 36,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 38,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 39,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "any"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 40,
          "name": "mapInto",
          "source": {
            "line": 44,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L44"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 41,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Some<T>` to the returned `Option<U>` by applying a function to a contained value, leaving `None`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, none);\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 42,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 44,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 45,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 64,
          "name": "mapNoneInto",
          "source": {
            "line": 59,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L59"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 65,
              "name": "mapNoneInto",
              "comment": {
                "description": "Maps a `None` to the returned `Option<U>` by applying a function to a contained value, leaving `Some<T>`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some('Hello, world!'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 66,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 67,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 69,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 66,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 66,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 46,
          "name": "mapOr",
          "source": {
            "line": 49,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L49"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 47,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link mapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 48,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 49,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 48,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 50,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 52,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 53,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 48,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 48,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 54,
          "name": "mapOrElse",
          "source": {
            "line": 54,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L54"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 55,
              "name": "mapOrElse",
              "comment": {
                "description": "Computes a default function result (if none), or applies a different function to the contained value (if any).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 56,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 57,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 59,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 56,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 60,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 62,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 63,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 56,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 56,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 165,
          "name": "match",
          "source": {
            "line": 160,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L160"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 166,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = some(4).match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = none.match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 167,
                  "name": "SomeValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 168,
                  "name": "NoneValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 169,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 174,
                        "signatures": [
                          {
                            "id": 175,
                            "name": "none",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 168,
                              "name": "NoneValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 171,
                        "signatures": [
                          {
                            "id": 172,
                            "name": "some",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 173,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "intrinsic",
                                  "type": "never"
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 167,
                              "name": "SomeValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 168,
                "name": "NoneValue",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 158,
          "name": "ne",
          "source": {
            "line": 153,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L153"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 159,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 160,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 161,
              "name": "ne",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 162,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 163,
              "name": "ne",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 164,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 82,
          "name": "okOr",
          "source": {
            "line": 73,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L73"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 83,
              "name": "okOr",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err)`.\n\nArguments passed to `okOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link okOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOr(0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOr(0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 84,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 85,
                  "name": "error",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 84,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 84,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 86,
          "name": "okOrElse",
          "source": {
            "line": 77,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L77"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 87,
              "name": "okOrElse",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err())`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOrElse(() => 0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOrElse(() => 0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 88,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 89,
                  "name": "cb",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 91,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 88,
                          "name": "E",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 88,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 103,
          "name": "or",
          "source": {
            "line": 95,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L95"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 104,
              "name": "or",
              "comment": {
                "description": "Returns the option if it contains a value, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(100));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.or(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 105,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 106,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 105,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 105,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 107,
          "name": "orElse",
          "source": {
            "line": 99,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L99"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 108,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst nobody = (): Option<string> => none;\nconst vikings = (): Option<string> => some('vikings');\n\nassert.equal(some('barbarians').orElse(vikings), some('barbarians'));\nassert.equal(none.orElse(vikings), some('vikings'));\nassert.equal(none.orElse(nobody), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 109,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 110,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 112,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 109,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 109,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 145,
          "name": "transpose",
          "source": {
            "line": 134,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L134"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 146,
              "name": "transpose",
              "comment": {
                "description": "Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n\n`none` will be mapped to `ok(none)`. `some(ok(v))` and `some(err(e))` will be mapped to `ok(some(v))` and `err(e)`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Result<number, Error>> = some(ok(5));\nconst y: Result<Option<number>, Error> = ok(some(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 22,
          "name": "unwrap",
          "source": {
            "line": 27,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L27"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 23,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Some` value.\n\nIf the value is an `Err`, it throws an {@link OptionError} with the message.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.unwrap(), {\n  name: 'OptionError',\n  message: 'Unwrap failed'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 24,
          "name": "unwrapOr",
          "source": {
            "line": 31,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L31"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 25,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Some` value or a provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOr(0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOr(0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 26,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 27,
                  "name": "defaultValue",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 26,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 26,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 28,
          "name": "unwrapOrElse",
          "source": {
            "line": 35,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L35"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 29,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained Some value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOrElse(() => 0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOrElse(() => 0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 30,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 31,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 33,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 30,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 30,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 143,
          "name": "unzip",
          "source": {
            "line": 130,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L130"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 144,
              "name": "unzip",
              "comment": {
                "description": "Unzips an option containing a tuple of two options.\n\nIf self is `Some((a, b))` this method returns `[Some(a), Some(b)]`. Otherwise, `[None, None]` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = some([1, 'hi']);\nassert.equal(x.unzip(), [some(1), some('hi')]);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = none;\nassert.equal(x.unzip(), [none, none]);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unzip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 113,
          "name": "xor",
          "source": {
            "line": 103,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L103"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 114,
              "name": "xor",
              "comment": {
                "description": "Returns `Some` if exactly one of self or `option` is `Some`, otherwise returns `None`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.xor}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 115,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 116,
                  "name": "option",
                  "comment": {
                    "description": "The option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 117,
              "name": "xor",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 118,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 119,
                  "name": "option",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 118,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 118,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 120,
              "name": "xor",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 121,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 122,
                  "name": "option",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 121,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 121,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 132,
          "name": "zip",
          "source": {
            "line": 120,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L120"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 133,
              "name": "zip",
              "comment": {
                "description": "Zips self with another `Option`.\n\nIf self is `Some(s)` and `other` is `Some(o)`, this method returns `Some([s, o])`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(1);\nconst y = some('hi');\nconst z = none;\n\nassert.equal(x.zip(y), some([1, 'hi']));\nassert.equal(x.zip(z), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 134,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 135,
          "name": "zipWith",
          "source": {
            "line": 125,
            "file": "None.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L125"
          },
          "parentId": 6,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 136,
              "name": "zipWith",
              "comment": {
                "description": "Zips self and another `Option` with function `f`.\n\nIf self is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nclass Point {\n  public readonly x: number;\n  public readonly y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst x = some(17.5);\nconst y = some(42.7);\n\nassert.equal(x.zipWith(y, (s, o) => new Point(s, o)), some(new Point(17.5, 42.7)));\nassert.equal(x.zipWith(none, (s, o) => new Point(s, o)), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip_with}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 137,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                },
                {
                  "id": 138,
                  "name": "f",
                  "comment": {
                    "description": "The function that computes the returned value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 140,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 141,
                            "name": "s",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          },
                          {
                            "id": 142,
                            "name": "o",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "any"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        }
      ]
    },
    {
      "id": 639,
      "name": "Ok",
      "source": {
        "line": 10,
        "file": "Ok.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L10"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type used to express computations that can fail, it can be used for returning and propagating errors. This is a\ntype union with the variants `Ok(T)`, representing success and containing a value, and `Err(E)`, representing error\nand containing an error value.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          },
          {
            "name": "see",
            "text": "{@link https://doc.rust-lang.org/std/result/index.html}"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [
        {
          "kind": "reference",
          "id": 1063,
          "name": "IResult",
          "packageName": "@sapphire/result",
          "typeArguments": [
            {
              "kind": "reference",
              "id": 642,
              "name": "ResultOk.T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            {
              "kind": "intrinsic",
              "type": "any"
            }
          ]
        }
      ],
      "typeParameters": [
        {
          "id": 825,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "construct": {
        "id": 640,
        "name": "constructor",
        "source": {
          "line": 13,
          "file": "Ok.ts",
          "path": "packages/result/src/lib/Result",
          "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L13"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 639,
        "accessibility": "public",
        "parameters": [
          {
            "id": 643,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 642,
              "name": "ResultOk.T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 644,
          "name": "value",
          "source": {
            "line": 11,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L11"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 639,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 642,
            "name": "ResultOk.T",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        }
      ],
      "methods": [
        {
          "id": 823,
          "name": "[iterator]",
          "source": {
            "line": 188,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L188"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 824,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IResult.iter}\n - {@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 642,
                    "name": "ResultOk.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 758,
          "name": "and",
          "source": {
            "line": 123,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L123"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 759,
              "name": "and",
              "comment": {
                "description": "Returns `result` if the result is `Ok`, otherwise returns the `Err` value of itself.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Early error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = ok('Hello');\nassert.equal(x.and(y), ok('Hello'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 760,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 761,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 760,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 760,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 762,
          "name": "andThen",
          "source": {
            "line": 127,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L127"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 763,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? err('overflowed') : ok(4 / value);\n}\n\nassert.equal(ok(2).andThen(fractionOf4), ok(4));\nassert.equal(ok(0).andThen(fractionOf4), err('overflowed'));\nassert.equal(err('not a number').andThen(fractionOf4), err('not a number'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 764,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 765,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 767,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 768,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 764,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 764,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 778,
          "name": "contains",
          "source": {
            "line": 141,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L141"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 779,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the result is an `Ok` and the given value strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 780,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 642,
                    "name": "ResultOk.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 781,
          "name": "containsErr",
          "source": {
            "line": 145,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L145"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 782,
              "name": "containsErr",
              "comment": {
                "description": "Returns `true` if the result is an `Err` and the given error strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.containsErr('Some error message'), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some other error message');\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 783,
                  "name": "error",
                  "comment": {
                    "description": "The error to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 801,
          "name": "eq",
          "source": {
            "line": 172,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L172"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 802,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 803,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 804,
              "name": "eq",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 805,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 642,
                        "name": "ResultOk.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 664,
          "name": "err",
          "source": {
            "line": 38,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L38"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 665,
              "name": "err",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<E>`.\n\nConverts itself into an `Option<E>`, and discarding the successful value, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.err(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.err(), 'Some error message');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 737,
          "name": "expect",
          "source": {
            "line": 92,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L92"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 738,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the given message and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 739,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 740,
          "name": "expectErr",
          "source": {
            "line": 97,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L97"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 741,
              "name": "expectErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the given message and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.expectErr('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.expectErr('Whoops!'), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 742,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 793,
          "name": "flatten",
          "source": {
            "line": 160,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L160"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 794,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(ok('Hello'));\nassert.equal(x.flatten(), ok('Hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(err(6));\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = err(6);\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 795,
                  "name": "Inner",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 796,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 795,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 795,
                "name": "Inner",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 711,
          "name": "inspect",
          "source": {
            "line": 68,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L68"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 712,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 713,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 715,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 716,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 717,
          "name": "inspectAsync",
          "source": {
            "line": 73,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L73"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 718,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 719,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 721,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 722,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 642,
                        "name": "ResultOk.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 723,
          "name": "inspectErr",
          "source": {
            "line": 78,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L78"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 724,
              "name": "inspectErr",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErrAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspectErr(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspectErr(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 725,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 727,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 728,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 729,
          "name": "inspectErrAsync",
          "source": {
            "line": 83,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L83"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 730,
              "name": "inspectErrAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErr} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectErrAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectErrAsync(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 731,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 733,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 734,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 642,
                        "name": "ResultOk.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 797,
          "name": "intoOkOrErr",
          "source": {
            "line": 164,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L164"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 798,
              "name": "intoOkOrErr",
              "comment": {
                "description": "Returns the `Ok` value if self is `Ok`, and the `Err` value if self is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = ok(3);\nassert.equal(x.intoOkOrErr(), 3);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = err(4);\nassert.equal(x.intoOkOrErr(), 4);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.into_ok_or_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 799,
          "name": "intoPromise",
          "source": {
            "line": 168,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L168"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 800,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Ok`) or the awaited error (if `Err`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = ok(Promise.resolve(3));\nassert.equal(await x.intoPromise(), ok(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 642,
                            "name": "ResultOk.T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 654,
          "name": "isErr",
          "source": {
            "line": 25,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L25"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 655,
              "name": "isErr",
              "comment": {
                "description": "Returns `true` if the result is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isErr(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isErr(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 656,
          "name": "isErrAnd",
          "source": {
            "line": 29,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L29"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 657,
              "name": "isErrAnd",
              "comment": {
                "description": "Returns `true` if the result is `Err` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new Error('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new TypeError('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 658,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 660,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 661,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 645,
          "name": "isOk",
          "source": {
            "line": 17,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L17"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 646,
              "name": "isOk",
              "comment": {
                "description": "Returns `true` if the result is `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isOk(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOk(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 639,
                  "name": "ResultOk",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 642,
                      "name": "ResultOk.T",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 647,
          "name": "isOkAnd",
          "source": {
            "line": 21,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L21"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 648,
              "name": "isOkAnd",
              "comment": {
                "description": "Returns `true` if the result is `Ok` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isOkAnd((value) => value > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(0);\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 649,
                  "name": "R",
                  "constraint": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 650,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 652,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 653,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 649,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 649,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 735,
          "name": "iter",
          "source": {
            "line": 88,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L88"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 736,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 642,
                    "name": "ResultOk.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 666,
          "name": "map",
          "source": {
            "line": 42,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L42"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 667,
              "name": "map",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.map((value) => value * 2), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.map((value) => value * 2), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 668,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 669,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 671,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 672,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 668,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 668,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 699,
          "name": "mapErr",
          "source": {
            "line": 58,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L58"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 700,
              "name": "mapErr",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErr((error) => error.message), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErr((error) => error.message), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 701,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 703,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 704,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "any"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 705,
          "name": "mapErrInto",
          "source": {
            "line": 63,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L63"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 706,
              "name": "mapErrInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\nUnlike {@link mapErr}, this method does not wrap the returned value inside `Err`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErrInto((error) => err(error.message)), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => err(error.message)), err('Some error message'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => ok(4)), ok(4));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 707,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 709,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 710,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            },
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 673,
          "name": "mapInto",
          "source": {
            "line": 46,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L46"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 674,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.\n\nUnlike {@link map}, this method does not wrap the returned value inside `Ok`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.mapInto((value) => ok(value * value)), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(0);\nassert.equal(\n  x.mapInto((value) => (value === 0 ? err('zero is not divisible') : ok(1 / value))),\n  err('zero is not divisible')\n);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.mapInto((value) => ok(4)), err('Some error message'));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 675,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 676,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 678,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 679,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 675,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 675,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 680,
          "name": "mapOr",
          "source": {
            "line": 50,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L50"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 681,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 682,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 683,
                  "name": "_",
                  "comment": {
                    "description": "The default value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 682,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 684,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 686,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 687,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 682,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 682,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 688,
          "name": "mapOrElse",
          "source": {
            "line": 54,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L54"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 689,
              "name": "mapOrElse",
              "comment": {
                "description": "Maps a `Result<T, E>` to `U` by applying fallback function default to a contained `Err` value, or function `cb`\nto a contained `Ok` value.\n\nThis function can be used to unpack a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = ok('hello');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = err('Some error message');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 18);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 690,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 691,
                  "name": "_",
                  "comment": {
                    "description": "The predicate that is run on `Err`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 693,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 694,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 690,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 695,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate that is run on `Ok`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 697,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 698,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 690,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 690,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 811,
          "name": "match",
          "source": {
            "line": 184,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L184"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 812,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = ok(4).match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = err('Hello').match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 813,
                  "name": "OkValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 814,
                  "name": "ErrValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 815,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 820,
                        "signatures": [
                          {
                            "id": 821,
                            "name": "err",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 822,
                                "name": "error",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "intrinsic",
                                  "type": "never"
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 814,
                              "name": "ErrValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 817,
                        "signatures": [
                          {
                            "id": 818,
                            "name": "ok",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 819,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 642,
                                  "name": "ResultOk.T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 813,
                              "name": "OkValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 813,
                "name": "OkValue",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 806,
          "name": "ne",
          "source": {
            "line": 178,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L178"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 807,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 808,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 826,
                    "name": "ResultErr",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 809,
              "name": "ne",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 810,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 642,
                        "name": "ResultOk.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 662,
          "name": "ok",
          "source": {
            "line": 34,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L34"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 663,
              "name": "ok",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<T>`.\n\nConverts itself into an `Option<T>`, and discarding the error, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.ok(), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.ok(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 642,
                    "name": "ResultOk.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 769,
          "name": "or",
          "source": {
            "line": 131,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L131"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 770,
              "name": "or",
              "comment": {
                "description": "Return `result` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nArguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended\nto use {@link orElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = ok(2);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = ok(100);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 771,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 642,
                        "name": "ResultOk.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 772,
          "name": "orElse",
          "source": {
            "line": 136,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L136"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 773,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nThis function can be used for control flow based on result values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst square = (x: number): Result<number, string> => ok(x * x);\nconst wrapErr = (x: number): Result<number, string> => err(x);\n\nassert.equal(ok(2).orElse(square).orElse(square), ok(2));\nassert.equal(ok(2).orElse(wrapErr).orElse(square), ok(2));\nassert.equal(err(3).orElse(square).orElse(wrapErr), ok(9));\nassert.equal(err(3).orElse(wrapErr).orElse(wrapErr), err(3));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 774,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 776,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 777,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "never"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 642,
                              "name": "ResultOk.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 784,
          "name": "transpose",
          "source": {
            "line": 150,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L150"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 785,
              "name": "transpose",
              "comment": {
                "description": "Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n\n`ok(none)` will be mapped to `none`. `ok(some(v))` and `err(e)` will be mapped to `some(ok(v))` and `some(err(e))`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Option<number>, Error> = ok(some(5));\nconst y: Option<Result<number, Error>> = some(ok(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 786,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 6,
                        "name": "OptionNone",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 787,
              "name": "transpose",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 788,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 789,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 178,
                        "name": "OptionSome",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 788,
                            "name": "Inner",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 788,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            },
            {
              "id": 790,
              "name": "transpose",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 791,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 792,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 791,
                            "name": "Inner",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 639,
                    "name": "ResultOk",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 791,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 743,
          "name": "unwrap",
          "source": {
            "line": 101,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L101"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 744,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the message, and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrap(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 745,
          "name": "unwrapErr",
          "source": {
            "line": 105,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L105"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 746,
              "name": "unwrapErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the message, and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.unwrapErr(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.unwrapErr(), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ]
        },
        {
          "id": 747,
          "name": "unwrapOr",
          "source": {
            "line": 109,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L109"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 748,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Ok` value or the provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(9);\nassert.equal(x.unwrapOr(2), 9);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Error');\nassert.equal(x.unwrapOr(2), 2);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 749,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 750,
          "name": "unwrapOrElse",
          "source": {
            "line": 114,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L114"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 751,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained `Ok` value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst count = (x: string) => x.length;\n\nassert.equal(ok(2).unwrapOrElse(count), 2);\nassert.equal(err('hello').unwrapOrElse(count), 5);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 752,
                  "name": "op",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 754,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 755,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 756,
          "name": "unwrapRaw",
          "source": {
            "line": 119,
            "file": "Ok.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L119"
          },
          "parentId": 639,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 757,
              "name": "unwrapRaw",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws the contained error.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrapRaw(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrapRaw(), {\n  name: 'Error',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 642,
                "name": "ResultOk.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        }
      ]
    },
    {
      "id": 607,
      "name": "OptionError",
      "source": {
        "line": 1,
        "file": "OptionError.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/OptionError.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "typeArguments": []
      },
      "implementsType": [],
      "typeParameters": [],
      "construct": {
        "id": 618,
        "name": "constructor",
        "source": {
          "line": 1082,
          "file": "lib.es5.d.ts",
          "path": "node_modules/typescript/lib",
          "url": null
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 607,
        "accessibility": "public",
        "parameters": [
          {
            "id": 620,
            "name": "message",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": true,
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          }
        ]
      },
      "properties": [
        {
          "id": 628,
          "name": "cause",
          "source": {
            "line": 24,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 626,
          "name": "message",
          "source": {
            "line": 1077,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 627,
          "name": "stack",
          "source": {
            "line": 1078,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 612,
          "name": "prepareStackTrace",
          "source": {
            "line": 28,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": "Optional override for formatting stack traces",
            "blockTags": [
              {
                "name": "see",
                "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
              }
            ],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 614,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 615,
                    "name": "err",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "reference",
                      "id": null,
                      "name": "Error",
                      "packageName": "typescript",
                      "typeArguments": []
                    }
                  },
                  {
                    "id": 616,
                    "name": "stackTraces",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "__global.NodeJS.CallSite",
                        "packageName": "@types/node",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              }
            ],
            "methods": null
          }
        },
        {
          "id": 617,
          "name": "stackTraceLimit",
          "source": {
            "line": 30,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 625,
          "name": "name",
          "source": {
            "line": 2,
            "file": "OptionError.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/OptionError.ts#L2"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 608,
          "name": "captureStackTrace",
          "source": {
            "line": 21,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "parentId": 607,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 609,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 610,
                  "name": "targetObject",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 611,
                  "name": "constructorOpt",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    },
    {
      "id": 1246,
      "name": "ResultError",
      "source": {
        "line": 1,
        "file": "ResultError.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/ResultError.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "typeArguments": []
      },
      "implementsType": [],
      "typeParameters": [
        {
          "id": 1268,
          "name": "E",
          "constraint": null,
          "default": null
        }
      ],
      "construct": {
        "id": 1257,
        "name": "constructor",
        "source": {
          "line": 4,
          "file": "ResultError.ts",
          "path": "packages/result/src/lib/Result",
          "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/ResultError.ts#L4"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 1246,
        "accessibility": "public",
        "parameters": [
          {
            "id": 1260,
            "name": "message",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          },
          {
            "id": 1261,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 1259,
              "name": "ResultError.E",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 1267,
          "name": "cause",
          "source": {
            "line": 24,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 1265,
          "name": "message",
          "source": {
            "line": 1077,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 1266,
          "name": "stack",
          "source": {
            "line": 1078,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 1262,
          "name": "value",
          "source": {
            "line": 2,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/ResultError.ts#L2"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 1259,
            "name": "ResultError.E",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        },
        {
          "id": 1251,
          "name": "prepareStackTrace",
          "source": {
            "line": 28,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": "Optional override for formatting stack traces",
            "blockTags": [
              {
                "name": "see",
                "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
              }
            ],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 1253,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 1254,
                    "name": "err",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "reference",
                      "id": null,
                      "name": "Error",
                      "packageName": "typescript",
                      "typeArguments": []
                    }
                  },
                  {
                    "id": 1255,
                    "name": "stackTraces",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "__global.NodeJS.CallSite",
                        "packageName": "@types/node",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              }
            ],
            "methods": null
          }
        },
        {
          "id": 1256,
          "name": "stackTraceLimit",
          "source": {
            "line": 30,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 1264,
          "name": "name",
          "source": {
            "line": 9,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/ResultError.ts#L9"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 1247,
          "name": "captureStackTrace",
          "source": {
            "line": 21,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "parentId": 1246,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 1248,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1249,
                  "name": "targetObject",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 1250,
                  "name": "constructorOpt",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    },
    {
      "id": 178,
      "name": "Some",
      "source": {
        "line": 9,
        "file": "Some.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L9"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [
        {
          "kind": "reference",
          "id": 438,
          "name": "IOption",
          "packageName": "@sapphire/result",
          "typeArguments": [
            {
              "kind": "reference",
              "id": 181,
              "name": "OptionSome.T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          ]
        }
      ],
      "typeParameters": [
        {
          "id": 394,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "construct": {
        "id": 179,
        "name": "constructor",
        "source": {
          "line": 12,
          "file": "Some.ts",
          "path": "packages/result/src/lib/Option",
          "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L12"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 178,
        "accessibility": "public",
        "parameters": [
          {
            "id": 182,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 181,
              "name": "OptionSome.T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 183,
          "name": "value",
          "source": {
            "line": 10,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L10"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 178,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 181,
            "name": "OptionSome.T",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        }
      ],
      "methods": [
        {
          "id": 392,
          "name": "[iterator]",
          "source": {
            "line": 181,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L181"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 393,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IOption.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 181,
                    "name": "OptionSome.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 267,
          "name": "and",
          "source": {
            "line": 92,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L92"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 268,
              "name": "and",
              "comment": {
                "description": "Returns `None` if the option is `None`, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), some('foo'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 269,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 270,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 269,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 269,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 271,
          "name": "andThen",
          "source": {
            "line": 96,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L96"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 272,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? none : some(4 / value);\n}\n\nassert.equal(some(2).andThen(fractionOf4), some(4));\nassert.equal(some(0).andThen(fractionOf4), none);\nassert.equal(none.andThen(fractionOf4), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 273,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 274,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 276,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 277,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 273,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 273,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 309,
          "name": "contains",
          "source": {
            "line": 124,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L124"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 310,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value containing the given value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 311,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 181,
                    "name": "OptionSome.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 371,
          "name": "eq",
          "source": {
            "line": 165,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L165"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 372,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 373,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 374,
              "name": "eq",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 375,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 195,
          "name": "expect",
          "source": {
            "line": 28,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L28"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 196,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'OptionError',\n  message: 'Whoops'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 197,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.\nIf the value is an `Err`, it throws an {@link OptionError} with the given message.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 181,
                "name": "OptionSome.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 293,
          "name": "filter",
          "source": {
            "line": 117,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L117"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 294,
              "name": "filter",
              "comment": {
                "description": "Returns None if the option is None, otherwise calls `predicate` with the wrapped value and returns:\n\n- `Some(t)` if `predicate` returns `true` (where t is the wrapped value), and\n- `None` if `predicate` returns `false`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction isEven(value: number) {\n  return n % 2 === 0;\n}\n\nassert.equal(none.filter(isEven), none);\nassert.equal(some(3).filter(isEven), none);\nassert.equal(some(4).filter(isEven), some(4));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.filter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 295,
                  "name": "predicate",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 297,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 298,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "literal",
                          "value": "true"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            },
            {
              "id": 299,
              "name": "filter",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 300,
                  "name": "predicate",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 302,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 303,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "literal",
                          "value": "false"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 304,
              "name": "filter",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 305,
                  "name": "predicate",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 307,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 308,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 365,
          "name": "flatten",
          "source": {
            "line": 157,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L157"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 366,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(some(6));\nassert.equal(x.flatten(), some(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(none);\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = none;\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 367,
                  "name": "Inner",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 368,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 367,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 367,
                "name": "Inner",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 245,
          "name": "inspect",
          "source": {
            "line": 68,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L68"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 246,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nsome(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nnone.inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 247,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 249,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 250,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 251,
          "name": "inspectAsync",
          "source": {
            "line": 73,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L73"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 252,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait some(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait none.inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 253,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 255,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 256,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 369,
          "name": "intoPromise",
          "source": {
            "line": 161,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L161"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 370,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Some`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = some(Promise.resolve(3));\nassert.equal(await x.intoPromise(), some(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 181,
                            "name": "OptionSome.T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 193,
          "name": "isNone",
          "source": {
            "line": 24,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L24"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 194,
              "name": "isNone",
              "comment": {
                "description": "Returns `true` if the option is a `None` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isNone(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isNone(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 184,
          "name": "isSome",
          "source": {
            "line": 16,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L16"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 185,
              "name": "isSome",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSome(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSome(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 178,
                  "name": "OptionSome",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 181,
                      "name": "OptionSome.T",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 186,
          "name": "isSomeAnd",
          "source": {
            "line": 20,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L20"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 187,
              "name": "isSomeAnd",
              "comment": {
                "description": "Returns `true` if the option is a `Some` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSomeAnd((x) => x > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(0);\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 188,
                  "name": "R",
                  "constraint": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 189,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 191,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 192,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 188,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 188,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 265,
          "name": "iter",
          "source": {
            "line": 88,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L88"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 266,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link Option.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 181,
                    "name": "OptionSome.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208,
          "name": "map",
          "source": {
            "line": 47,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L47"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 209,
              "name": "map",
              "comment": {
                "description": "Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst maybeSomeString = some('Hello, world!');\nconst maybeSomeLength = maybeSomeString.map((value) => value.length);\n\nassert.equal(maybeSomeLength, some(13));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 210,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 211,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 213,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 214,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 210,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 210,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215,
          "name": "mapInto",
          "source": {
            "line": 51,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L51"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 216,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Some<T>` to the returned `Option<U>` by applying a function to a contained value, leaving `None`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, none);\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 217,
                  "name": "R",
                  "constraint": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 218,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 220,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 221,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 217,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 217,
                "name": "R",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 240,
          "name": "mapNoneInto",
          "source": {
            "line": 63,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L63"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 241,
              "name": "mapNoneInto",
              "comment": {
                "description": "Maps a `None` to the returned `Option<U>` by applying a function to a contained value, leaving `Some<T>`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some('Hello, world!'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 242,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 244,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 222,
          "name": "mapOr",
          "source": {
            "line": 55,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L55"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 223,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link mapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 224,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 225,
                  "name": "_",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 224,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 226,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 228,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 229,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 224,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 224,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 230,
          "name": "mapOrElse",
          "source": {
            "line": 59,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L59"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 231,
              "name": "mapOrElse",
              "comment": {
                "description": "Computes a default function result (if none), or applies a different function to the contained value (if any).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 232,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 233,
                  "name": "_",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 235,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 232,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 236,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 238,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 239,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 232,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 232,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 381,
          "name": "match",
          "source": {
            "line": 177,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L177"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 382,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = some(4).match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = none.match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 383,
                  "name": "SomeValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 384,
                  "name": "NoneValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 385,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 390,
                        "signatures": [
                          {
                            "id": 391,
                            "name": "none",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 384,
                              "name": "NoneValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 387,
                        "signatures": [
                          {
                            "id": 388,
                            "name": "some",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 389,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 181,
                                  "name": "OptionSome.T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 383,
                              "name": "SomeValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 383,
                "name": "SomeValue",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 376,
          "name": "ne",
          "source": {
            "line": 171,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L171"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 377,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 378,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 379,
              "name": "ne",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 380,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 257,
          "name": "okOr",
          "source": {
            "line": 78,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L78"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 258,
              "name": "okOr",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err)`.\n\nArguments passed to `okOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link okOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOr(0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOr(0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 259,
                  "name": "err",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 181,
                    "name": "OptionSome.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 260,
          "name": "okOrElse",
          "source": {
            "line": 83,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L83"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 261,
              "name": "okOrElse",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err())`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOrElse(() => 0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOrElse(() => 0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 262,
                  "name": "cb",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 264,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "any"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 181,
                    "name": "OptionSome.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 278,
          "name": "or",
          "source": {
            "line": 100,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L100"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 279,
              "name": "or",
              "comment": {
                "description": "Returns the option if it contains a value, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(100));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.or(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 280,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 281,
          "name": "orElse",
          "source": {
            "line": 105,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L105"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 282,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst nobody = (): Option<string> => none;\nconst vikings = (): Option<string> => some('vikings');\n\nassert.equal(some('barbarians').orElse(vikings), some('barbarians'));\nassert.equal(none.orElse(vikings), some('vikings'));\nassert.equal(none.orElse(nobody), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 283,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 285,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "any"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 354,
          "name": "transpose",
          "source": {
            "line": 147,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L147"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 355,
              "name": "transpose",
              "comment": {
                "description": "Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n\n`none` will be mapped to `ok(none)`. `some(ok(v))` and `some(err(e))` will be mapped to `ok(some(v))` and `err(e)`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Result<number, Error>> = some(ok(5));\nconst y: Result<Option<number>, Error> = ok(some(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 356,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 357,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 639,
                        "name": "ResultOk",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 356,
                            "name": "Inner",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 356,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            },
            {
              "id": 358,
              "name": "transpose",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 359,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 360,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 826,
                        "name": "ResultErr",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 359,
                            "name": "Inner",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 359,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            },
            {
              "id": 361,
              "name": "transpose",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 362,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 363,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 364,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 362,
                            "name": "IT",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 363,
                            "name": "E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 362,
                        "name": "IT",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 363,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 198,
          "name": "unwrap",
          "source": {
            "line": 33,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L33"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 199,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Some` value.\n\nIf the value is an `Err`, it throws an {@link OptionError} with the message.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.unwrap(), {\n  name: 'OptionError',\n  message: 'Unwrap failed'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 181,
                "name": "OptionSome.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 200,
          "name": "unwrapOr",
          "source": {
            "line": 37,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L37"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 201,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Some` value or a provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOr(0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOr(0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 202,
                  "name": "defaultValue",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 181,
                "name": "OptionSome.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 203,
          "name": "unwrapOrElse",
          "source": {
            "line": 42,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L42"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 204,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained Some value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOrElse(() => 0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOrElse(() => 0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 205,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 207,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 181,
                "name": "OptionSome.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 349,
          "name": "unzip",
          "source": {
            "line": 142,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L142"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 350,
              "name": "unzip",
              "comment": {
                "description": "Unzips an option containing a tuple of two options.\n\nIf self is `Some((a, b))` this method returns `[Some(a), Some(b)]`. Otherwise, `[None, None]` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = some([1, 'hi']);\nassert.equal(x.unzip(), [some(1), some('hi')]);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = none;\nassert.equal(x.unzip(), [none, none]);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unzip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 351,
                  "name": "I",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 352,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 353,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "typeOperator",
                        "operator": "readonly",
                        "type": {
                          "kind": "tuple",
                          "types": [
                            {
                              "kind": "reference",
                              "id": 351,
                              "name": "I",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 352,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 351,
                        "name": "I",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 352,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 286,
          "name": "xor",
          "source": {
            "line": 110,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L110"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 287,
              "name": "xor",
              "comment": {
                "description": "Returns `Some` if exactly one of self or `option` is `Some`, otherwise returns `None`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.xor}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 288,
                  "name": "option",
                  "comment": {
                    "description": "The option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 289,
              "name": "xor",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 290,
                  "name": "option",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            },
            {
              "id": 291,
              "name": "xor",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 292,
                  "name": "option",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 312,
          "name": "zip",
          "source": {
            "line": 128,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L128"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 313,
              "name": "zip",
              "comment": {
                "description": "Zips self with another `Option`.\n\nIf self is `Some(s)` and `other` is `Some(o)`, this method returns `Some([s, o])`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(1);\nconst y = some('hi');\nconst z = none;\n\nassert.equal(x.zip(y), some([1, 'hi']));\nassert.equal(x.zip(z), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 314,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 315,
              "name": "zip",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 316,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 317,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 316,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 316,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            },
            {
              "id": 318,
              "name": "zip",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 319,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 320,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 319,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 181,
                        "name": "OptionSome.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 319,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 321,
          "name": "zipWith",
          "source": {
            "line": 135,
            "file": "Some.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L135"
          },
          "parentId": 178,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 322,
              "name": "zipWith",
              "comment": {
                "description": "Zips self and another `Option` with function `f`.\n\nIf self is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nclass Point {\n  public readonly x: number;\n  public readonly y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst x = some(17.5);\nconst y = some(42.7);\n\nassert.equal(x.zipWith(y, (s, o) => new Point(s, o)), some(new Point(17.5, 42.7)));\nassert.equal(x.zipWith(none, (s, o) => new Point(s, o)), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip_with}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 323,
                  "name": "U",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 324,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 325,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 6,
                    "name": "OptionNone",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 326,
                  "name": "f",
                  "comment": {
                    "description": "The function that computes the returned value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 328,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 329,
                            "name": "s",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          },
                          {
                            "id": 330,
                            "name": "o",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 323,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 324,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 6,
                "name": "OptionNone",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            {
              "id": 331,
              "name": "zipWith",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 332,
                  "name": "U",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 333,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 334,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 178,
                    "name": "OptionSome",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 332,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                },
                {
                  "id": 335,
                  "name": "f",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 337,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 338,
                            "name": "s",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          },
                          {
                            "id": 339,
                            "name": "o",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 332,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 333,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 333,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 340,
              "name": "zipWith",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 341,
                  "name": "U",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 342,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 343,
                  "name": "other",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 341,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                },
                {
                  "id": 344,
                  "name": "f",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 346,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 347,
                            "name": "s",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 181,
                              "name": "OptionSome.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          },
                          {
                            "id": 348,
                            "name": "o",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 341,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 342,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 342,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "enums": [],
  "functions": [
    {
      "id": 634,
      "name": "err",
      "source": {
        "line": 191,
        "file": "Err.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Err.ts#L191"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 635,
          "name": "err",
          "comment": {
            "description": "Creates an Err with no error.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An erroneous Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [],
          "returnType": {
            "kind": "reference",
            "id": 826,
            "name": "ResultErr",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "unknown"
              }
            ]
          }
        },
        {
          "id": 636,
          "name": "err",
          "comment": {
            "description": "Creates an Err.",
            "blockTags": [
              {
                "name": "typeparam",
                "text": "E The error's type."
              },
              {
                "name": "returns",
                "text": "An erroneous Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 637,
              "name": "E",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 638,
              "name": "x",
              "comment": {
                "description": "Value to use.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 637,
                "name": "E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 826,
            "name": "ResultErr",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 637,
                "name": "E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 629,
      "name": "ok",
      "source": {
        "line": 197,
        "file": "Ok.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/Ok.ts#L197"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 630,
          "name": "ok",
          "comment": {
            "description": "Creates an Ok with no value.",
            "blockTags": [
              {
                "name": "returns",
                "text": "A successful Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [],
          "returnType": {
            "kind": "reference",
            "id": 639,
            "name": "ResultOk",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "unknown"
              }
            ]
          }
        },
        {
          "id": 631,
          "name": "ok",
          "comment": {
            "description": "Creates an Ok.",
            "blockTags": [
              {
                "name": "typeparam",
                "text": "T The result's type."
              },
              {
                "name": "returns",
                "text": "A successful Result."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 632,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 633,
              "name": "x",
              "comment": {
                "description": "Value to use.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 632,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 639,
            "name": "ResultOk",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 632,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 1,
      "name": "some",
      "source": {
        "line": 186,
        "file": "Some.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/Some.ts#L186"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "some",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 3,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 4,
              "name": "value",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 178,
            "name": "OptionSome",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 3,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [
    {
      "id": 438,
      "name": "IOption",
      "source": {
        "line": 7,
        "file": "IOption.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L7"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 606,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "properties": [],
      "methods": [
        {
          "id": 604,
          "name": "[iterator]",
          "source": {
            "line": 738,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L738"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 605,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IOption.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 526,
          "name": "and",
          "source": {
            "line": 397,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L397"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 527,
              "name": "and",
              "comment": {
                "description": "Returns `None` if the option is `None`, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), some('foo'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 528,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 529,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 528,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 528,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 530,
          "name": "andThen",
          "source": {
            "line": 418,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L418"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 531,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? none : some(4 / value);\n}\n\nassert.equal(some(2).andThen(fractionOf4), some(4));\nassert.equal(some(0).andThen(fractionOf4), none);\nassert.equal(none.andThen(fractionOf4), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 532,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 533,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 535,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 536,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 532,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 532,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 554,
          "name": "contains",
          "source": {
            "line": 550,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L550"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 555,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value containing the given value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 556,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 587,
          "name": "eq",
          "source": {
            "line": 680,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L680"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 588,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 589,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 449,
          "name": "expect",
          "source": {
            "line": 89,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L89"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 450,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'OptionError',\n  message: 'Whoops'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 451,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.\nIf the value is an `Err`, it throws an {@link OptionError} with the given message.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 606,
                "name": "IOption.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 548,
          "name": "filter",
          "source": {
            "line": 526,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L526"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 549,
              "name": "filter",
              "comment": {
                "description": "Returns None if the option is None, otherwise calls `predicate` with the wrapped value and returns:\n\n- `Some(t)` if `predicate` returns `true` (where t is the wrapped value), and\n- `None` if `predicate` returns `false`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction isEven(value: number) {\n  return n % 2 === 0;\n}\n\nassert.equal(none.filter(isEven), none);\nassert.equal(some(3).filter(isEven), none);\nassert.equal(some(4).filter(isEven), some(4));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.filter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 550,
                  "name": "predicate",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 552,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 553,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 581,
          "name": "flatten",
          "source": {
            "line": 659,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L659"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 582,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(some(6));\nassert.equal(x.flatten(), some(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(none);\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = none;\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 583,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 584,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 583,
                            "name": "IT",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 583,
                    "name": "IT",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 502,
          "name": "inspect",
          "source": {
            "line": 276,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L276"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 503,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nsome(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nnone.inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 504,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 506,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 507,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 508,
          "name": "inspectAsync",
          "source": {
            "line": 296,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L296"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 509,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait some(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait none.inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 510,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 512,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 513,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": null,
                          "name": "Awaitable",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "void"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 438,
                    "name": "IOption",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 585,
          "name": "intoPromise",
          "source": {
            "line": 672,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L672"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 586,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Some`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = some(Promise.resolve(3));\nassert.equal(await x.intoPromise(), some(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 606,
                            "name": "IOption.T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 447,
          "name": "isNone",
          "source": {
            "line": 66,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L66"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 448,
              "name": "isNone",
              "comment": {
                "description": "Returns `true` if the option is a `None` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isNone(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isNone(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 6,
                  "name": "OptionNone",
                  "packageName": "@sapphire/result",
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 439,
          "name": "isSome",
          "source": {
            "line": 24,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L24"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 440,
              "name": "isSome",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSome(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSome(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 178,
                  "name": "OptionSome",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 606,
                      "name": "IOption.T",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 441,
          "name": "isSomeAnd",
          "source": {
            "line": 48,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L48"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 442,
              "name": "isSomeAnd",
              "comment": {
                "description": "Returns `true` if the option is a `Some` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSomeAnd((x) => x > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(0);\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 443,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 445,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 446,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 524,
          "name": "iter",
          "source": {
            "line": 364,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L364"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 525,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link Option.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 464,
          "name": "map",
          "source": {
            "line": 165,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L165"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 465,
              "name": "map",
              "comment": {
                "description": "Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst maybeSomeString = some('Hello, world!');\nconst maybeSomeLength = maybeSomeString.map((value) => value.length);\n\nassert.equal(maybeSomeLength, some(13));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 466,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 467,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 469,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 470,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 466,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 466,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 471,
          "name": "mapInto",
          "source": {
            "line": 189,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L189"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 472,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Some<T>` to the returned `Option<U>` by applying a function to a contained value, leaving `None`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, none);\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 473,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 474,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 476,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 477,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 473,
                              "name": "Inner",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 473,
                    "name": "Inner",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 496,
          "name": "mapNoneInto",
          "source": {
            "line": 256,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L256"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 497,
              "name": "mapNoneInto",
              "comment": {
                "description": "Maps a `None` to the returned `Option<U>` by applying a function to a contained value, leaving `Some<T>`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some('Hello, world!'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 498,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 499,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 501,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 498,
                              "name": "Inner",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 498,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 478,
          "name": "mapOr",
          "source": {
            "line": 212,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L212"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 479,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link mapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 480,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 481,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 480,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 482,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 484,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 485,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 480,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 480,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 486,
          "name": "mapOrElse",
          "source": {
            "line": 232,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L232"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 487,
              "name": "mapOrElse",
              "comment": {
                "description": "Computes a default function result (if none), or applies a different function to the contained value (if any).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 488,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 489,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 491,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 488,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 492,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 494,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 495,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 488,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 488,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 593,
          "name": "match",
          "source": {
            "line": 711,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L711"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 594,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = some(4).match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = none.match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 595,
                  "name": "SomeValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 596,
                  "name": "NoneValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 597,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 602,
                        "signatures": [
                          {
                            "id": 603,
                            "name": "none",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 596,
                              "name": "NoneValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 599,
                        "signatures": [
                          {
                            "id": 600,
                            "name": "some",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 601,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 606,
                                  "name": "IOption.T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 595,
                              "name": "SomeValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 595,
                    "name": "SomeValue",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 596,
                    "name": "NoneValue",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 590,
          "name": "ne",
          "source": {
            "line": 688,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L688"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 591,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 592,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 514,
          "name": "okOr",
          "source": {
            "line": 318,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L318"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 515,
              "name": "okOr",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err)`.\n\nArguments passed to `okOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link okOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOr(0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOr(0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 516,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 517,
                  "name": "err",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 516,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 516,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 518,
          "name": "okOrElse",
          "source": {
            "line": 337,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L337"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 519,
              "name": "okOrElse",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err())`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOrElse(() => 0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOrElse(() => 0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 520,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 521,
                  "name": "cb",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 523,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 520,
                          "name": "E",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 520,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 537,
          "name": "or",
          "source": {
            "line": 451,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L451"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 538,
              "name": "or",
              "comment": {
                "description": "Returns the option if it contains a value, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(100));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.or(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 539,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 540,
          "name": "orElse",
          "source": {
            "line": 471,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L471"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 541,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst nobody = (): Option<string> => none;\nconst vikings = (): Option<string> => some('vikings');\n\nassert.equal(some('barbarians').orElse(vikings), some('barbarians'));\nassert.equal(none.orElse(vikings), some('vikings'));\nassert.equal(none.orElse(nobody), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 542,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 544,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 395,
                          "name": "Option",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 576,
          "name": "transpose",
          "source": {
            "line": 636,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L636"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 577,
              "name": "transpose",
              "comment": {
                "description": "Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n\n`none` will be mapped to `ok(none)`. `some(ok(v))` and `some(err(e))` will be mapped to `ok(some(v))` and `err(e)`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Result<number, Error>> = some(ok(5));\nconst y: Result<Option<number>, Error> = ok(some(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 578,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 579,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 580,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 578,
                            "name": "IT",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 579,
                            "name": "E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 578,
                        "name": "IT",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 579,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 452,
          "name": "unwrap",
          "source": {
            "line": 114,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L114"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 453,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Some` value.\n\nIf the value is an `Err`, it throws an {@link OptionError} with the message.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.unwrap(), {\n  name: 'OptionError',\n  message: 'Unwrap failed'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 606,
                "name": "IOption.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 454,
          "name": "unwrapOr",
          "source": {
            "line": 133,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L133"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 455,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Some` value or a provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOr(0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOr(0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 456,
                  "name": "V",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 457,
                  "name": "defaultValue",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 456,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 456,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 458,
          "name": "unwrapOrElse",
          "source": {
            "line": 149,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L149"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 459,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained Some value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOrElse(() => 0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOrElse(() => 0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 460,
                  "name": "V",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 461,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 463,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 460,
                          "name": "V",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 460,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 571,
          "name": "unzip",
          "source": {
            "line": 620,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L620"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 572,
              "name": "unzip",
              "comment": {
                "description": "Unzips an option containing a tuple of two options.\n\nIf self is `Some((a, b))` this method returns `[Some(a), Some(b)]`. Otherwise, `[None, None]` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = some([1, 'hi']);\nassert.equal(x.unzip(), [some(1), some('hi')]);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = none;\nassert.equal(x.unzip(), [none, none]);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unzip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 573,
                  "name": "Inner",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 574,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 575,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "typeOperator",
                        "operator": "readonly",
                        "type": {
                          "kind": "tuple",
                          "types": [
                            {
                              "kind": "reference",
                              "id": 573,
                              "name": "Inner",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 574,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 573,
                        "name": "Inner",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 574,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 545,
          "name": "xor",
          "source": {
            "line": 504,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L504"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 546,
              "name": "xor",
              "comment": {
                "description": "Returns `Some` if exactly one of self or `option` is `Some`, otherwise returns `None`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.xor}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 547,
                  "name": "option",
                  "comment": {
                    "description": "The option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 606,
                    "name": "IOption.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 557,
          "name": "zip",
          "source": {
            "line": 570,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L570"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 558,
              "name": "zip",
              "comment": {
                "description": "Zips self with another `Option`.\n\nIf self is `Some(s)` and `other` is `Some(o)`, this method returns `Some([s, o])`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(1);\nconst y = some('hi');\nconst z = none;\n\nassert.equal(x.zip(y), some([1, 'hi']));\nassert.equal(x.zip(z), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 559,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 560,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 559,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "IOption.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 559,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 561,
          "name": "zipWith",
          "source": {
            "line": 600,
            "file": "IOption.ts",
            "path": "packages/result/src/lib/Option",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/IOption.ts#L600"
          },
          "parentId": 438,
          "signatures": [
            {
              "id": 562,
              "name": "zipWith",
              "comment": {
                "description": "Zips self and another `Option` with function `f`.\n\nIf self is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nclass Point {\n  public readonly x: number;\n  public readonly y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst x = some(17.5);\nconst y = some(42.7);\n\nassert.equal(x.zipWith(y, (s, o) => new Point(s, o)), some(new Point(17.5, 42.7)));\nassert.equal(x.zipWith(none, (s, o) => new Point(s, o)), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip_with}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 563,
                  "name": "U",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 564,
                  "name": "R",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 565,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 563,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                },
                {
                  "id": 566,
                  "name": "f",
                  "comment": {
                    "description": "The function that computes the returned value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 568,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 569,
                            "name": "s",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 606,
                              "name": "IOption.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          },
                          {
                            "id": 570,
                            "name": "o",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 563,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 564,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 564,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": 1063,
      "name": "IResult",
      "source": {
        "line": 17,
        "file": "IResult.ts",
        "path": "packages/result/src/lib/Result",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L17"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type used to express computations that can fail, it can be used for returning and propagating errors. This is a\ntype union with the variants `Ok(T)`, representing success and containing a value, and `Err(E)`, representing error\nand containing an error value.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          },
          {
            "name": "see",
            "text": "{@link https://doc.rust-lang.org/std/result/index.html}"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 1244,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 1245,
          "name": "E",
          "constraint": null,
          "default": null
        }
      ],
      "properties": [],
      "methods": [
        {
          "id": 1242,
          "name": "[iterator]",
          "source": {
            "line": 863,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L863"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1243,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IResult.iter}\n - {@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1184,
          "name": "and",
          "source": {
            "line": 601,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L601"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1185,
              "name": "and",
              "comment": {
                "description": "Returns `result` if the result is `Ok`, otherwise returns the `Err` value of itself.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Early error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = ok('Hello');\nassert.equal(x.and(y), ok('Hello'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1186,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1187,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1186,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1186,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1188,
          "name": "andThen",
          "source": {
            "line": 622,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L622"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1189,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? err('overflowed') : ok(4 / value);\n}\n\nassert.equal(ok(2).andThen(fractionOf4), ok(4));\nassert.equal(ok(0).andThen(fractionOf4), err('overflowed'));\nassert.equal(err('not a number').andThen(fractionOf4), err('not a number'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1190,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1191,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1193,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1194,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 1190,
                              "name": "U",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1190,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1206,
          "name": "contains",
          "source": {
            "line": 703,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L703"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1207,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the result is an `Ok` and the given value strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1208,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 1209,
          "name": "containsErr",
          "source": {
            "line": 727,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L727"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1210,
              "name": "containsErr",
              "comment": {
                "description": "Returns `true` if the result is an `Err` and the given error strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.containsErr('Some error message'), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some other error message');\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1211,
                  "name": "error",
                  "comment": {
                    "description": "The error to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 1224,
          "name": "eq",
          "source": {
            "line": 805,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L805"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1225,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1226,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 1084,
          "name": "err",
          "source": {
            "line": 139,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L139"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1085,
              "name": "err",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<E>`.\n\nConverts itself into an `Option<E>`, and discarding the successful value, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.err(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.err(), 'Some error message');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1161,
          "name": "expect",
          "source": {
            "line": 419,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L419"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1162,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the given message and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1163,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1244,
                "name": "IResult.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1164,
          "name": "expectErr",
          "source": {
            "line": 444,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L444"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1165,
              "name": "expectErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the given message and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.expectErr('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.expectErr('Whoops!'), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1166,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1245,
                "name": "IResult.E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1216,
          "name": "flatten",
          "source": {
            "line": 766,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L766"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1217,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(ok('Hello'));\nassert.equal(x.flatten(), ok('Hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(err(6));\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = err(6);\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1218,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1219,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1218,
                            "name": "IT",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 1245,
                            "name": "IResult.E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1218,
                    "name": "IT",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1135,
          "name": "inspect",
          "source": {
            "line": 308,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L308"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1136,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1137,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1139,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1140,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 1141,
          "name": "inspectAsync",
          "source": {
            "line": 328,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L328"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1142,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1143,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1145,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1146,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": null,
                          "name": "Awaitable",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "void"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1063,
                    "name": "IResult",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1147,
          "name": "inspectErr",
          "source": {
            "line": 348,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L348"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1148,
              "name": "inspectErr",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErrAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspectErr(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspectErr(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1149,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1151,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1152,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 1153,
          "name": "inspectErrAsync",
          "source": {
            "line": 368,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L368"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1154,
              "name": "inspectErrAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErr} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectErrAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectErrAsync(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1155,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1157,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1158,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": null,
                          "name": "Awaitable",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "intrinsic",
                              "type": "void"
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1063,
                    "name": "IResult",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1220,
          "name": "intoOkOrErr",
          "source": {
            "line": 784,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L784"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1221,
              "name": "intoOkOrErr",
              "comment": {
                "description": "Returns the `Ok` value if self is `Ok`, and the `Err` value if self is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = ok(3);\nassert.equal(x.intoOkOrErr(), 3);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = err(4);\nassert.equal(x.intoOkOrErr(), 4);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.into_ok_or_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1222,
          "name": "intoPromise",
          "source": {
            "line": 797,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L797"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1223,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Ok`) or the awaited error (if `Err`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = ok(Promise.resolve(3));\nassert.equal(await x.intoPromise(), ok(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1244,
                            "name": "IResult.T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1245,
                            "name": "IResult.E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1073,
          "name": "isErr",
          "source": {
            "line": 75,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L75"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1074,
              "name": "isErr",
              "comment": {
                "description": "Returns `true` if the result is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isErr(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isErr(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 826,
                  "name": "ResultErr",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 1245,
                      "name": "IResult.E",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 1075,
          "name": "isErrAnd",
          "source": {
            "line": 99,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L99"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1076,
              "name": "isErrAnd",
              "comment": {
                "description": "Returns `true` if the result is `Err` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new Error('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new TypeError('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1077,
                  "name": "R",
                  "constraint": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1078,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1080,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1081,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1077,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": 826,
                      "name": "ResultErr",
                      "packageName": "@sapphire/result",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 1245,
                          "name": "IResult.E",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 1077,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 1064,
          "name": "isOk",
          "source": {
            "line": 34,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L34"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1065,
              "name": "isOk",
              "comment": {
                "description": "Returns `true` if the result is `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isOk(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOk(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 639,
                  "name": "ResultOk",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 1244,
                      "name": "IResult.T",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 1066,
          "name": "isOkAnd",
          "source": {
            "line": 57,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L57"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1067,
              "name": "isOkAnd",
              "comment": {
                "description": "Returns `true` if the result is `Ok` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isOkAnd((value) => value > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(0);\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1068,
                  "name": "R",
                  "constraint": {
                    "kind": "intrinsic",
                    "type": "boolean"
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1069,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1071,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1072,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1068,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": 639,
                      "name": "ResultOk",
                      "packageName": "@sapphire/result",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 1244,
                          "name": "IResult.T",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 1068,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 1159,
          "name": "iter",
          "source": {
            "line": 394,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L394"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1160,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1086,
          "name": "map",
          "source": {
            "line": 159,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L159"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1087,
              "name": "map",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.map((value) => value * 2), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.map((value) => value * 2), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1088,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1089,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1091,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1092,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1088,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1088,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1245,
                    "name": "IResult.E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1120,
          "name": "mapErr",
          "source": {
            "line": 258,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L258"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1121,
              "name": "mapErr",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErr((error) => error.message), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErr((error) => error.message), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1122,
                  "name": "F",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1123,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1125,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1126,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1122,
                          "name": "F",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1122,
                    "name": "F",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1127,
          "name": "mapErrInto",
          "source": {
            "line": 288,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L288"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1128,
              "name": "mapErrInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\nUnlike {@link mapErr}, this method does not wrap the returned value inside `Err`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErrInto((error) => err(error.message)), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => err(error.message)), err('Some error message'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => ok(4)), ok(4));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1129,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1130,
                  "name": "IE",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1131,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1133,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1134,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 1129,
                              "name": "IT",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 1130,
                              "name": "IE",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1129,
                        "name": "IT",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 1130,
                    "name": "IE",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1093,
          "name": "mapInto",
          "source": {
            "line": 190,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L190"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1094,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.\n\nUnlike {@link map}, this method does not wrap the returned value inside `Ok`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.mapInto((value) => ok(value * value)), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(0);\nassert.equal(\n  x.mapInto((value) => (value === 0 ? err('zero is not divisible') : ok(1 / value))),\n  err('zero is not divisible')\n);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.mapInto((value) => ok(4)), err('Some error message'));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1095,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1096,
                  "name": "IE",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1097,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1099,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1100,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 1095,
                              "name": "IT",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 1096,
                              "name": "IE",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1095,
                    "name": "IT",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1096,
                        "name": "IE",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1101,
          "name": "mapOr",
          "source": {
            "line": 213,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L213"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1102,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1103,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1104,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1103,
                    "name": "U",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                },
                {
                  "id": 1105,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1107,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1108,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1103,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1103,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1109,
          "name": "mapOrElse",
          "source": {
            "line": 236,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L236"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1110,
              "name": "mapOrElse",
              "comment": {
                "description": "Maps a `Result<T, E>` to `U` by applying fallback function default to a contained `Err` value, or function `cb`\nto a contained `Ok` value.\n\nThis function can be used to unpack a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = ok('hello');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = err('Some error message');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 18);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1111,
                  "name": "U",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1112,
                  "name": "op",
                  "comment": {
                    "description": "The predicate that is run on `Err`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1114,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1115,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1111,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 1116,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate that is run on `Ok`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1118,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1119,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1111,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1111,
                "name": "U",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1230,
          "name": "match",
          "source": {
            "line": 836,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L836"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1231,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = ok(4).match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = err('Hello').match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1232,
                  "name": "OkValue",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1233,
                  "name": "ErrValue",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1234,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 1239,
                        "signatures": [
                          {
                            "id": 1240,
                            "name": "err",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 1241,
                                "name": "error",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 1245,
                                  "name": "IResult.E",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 1233,
                              "name": "ErrValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 1236,
                        "signatures": [
                          {
                            "id": 1237,
                            "name": "ok",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 1238,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 1244,
                                  "name": "IResult.T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 1232,
                              "name": "OkValue",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 1232,
                    "name": "OkValue",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1233,
                    "name": "ErrValue",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1227,
          "name": "ne",
          "source": {
            "line": 813,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L813"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1228,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1229,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 1082,
          "name": "ok",
          "source": {
            "line": 119,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L119"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1083,
              "name": "ok",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<T>`.\n\nConverts itself into an `Option<T>`, and discarding the error, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.ok(), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.ok(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1195,
          "name": "or",
          "source": {
            "line": 658,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L658"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1196,
              "name": "or",
              "comment": {
                "description": "Return `result` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nArguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended\nto use {@link orElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = ok(2);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = ok(100);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1197,
                  "name": "F",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1198,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1244,
                        "name": "IResult.T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1197,
                        "name": "F",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1197,
                    "name": "F",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1199,
          "name": "orElse",
          "source": {
            "line": 679,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L679"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1200,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nThis function can be used for control flow based on result values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst square = (x: number): Result<number, string> => ok(x * x);\nconst wrapErr = (x: number): Result<number, string> => err(x);\n\nassert.equal(ok(2).orElse(square).orElse(square), ok(2));\nassert.equal(ok(2).orElse(wrapErr).orElse(square), ok(2));\nassert.equal(err(3).orElse(square).orElse(wrapErr), ok(9));\nassert.equal(err(3).orElse(wrapErr).orElse(wrapErr), err(3));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1201,
                  "name": "F",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1202,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1204,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1205,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1005,
                          "name": "Result",
                          "packageName": "@sapphire/result",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 1244,
                              "name": "IResult.T",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 1201,
                              "name": "F",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1201,
                    "name": "F",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1212,
          "name": "transpose",
          "source": {
            "line": 743,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L743"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1213,
              "name": "transpose",
              "comment": {
                "description": "Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n\n`ok(none)` will be mapped to `none`. `ok(some(v))` and `err(e)` will be mapped to `some(ok(v))` and `some(err(e))`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Option<number>, Error> = ok(some(5));\nconst y: Option<Result<number, Error>> = some(ok(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1214,
                  "name": "IT",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1215,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1214,
                            "name": "IT",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1214,
                        "name": "IT",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1245,
                        "name": "IResult.E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1167,
          "name": "unwrap",
          "source": {
            "line": 472,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L472"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1168,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the message, and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrap(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 1244,
                "name": "IResult.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1169,
          "name": "unwrapErr",
          "source": {
            "line": 500,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L500"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1170,
              "name": "unwrapErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the message, and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.unwrapErr(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.unwrapErr(), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 1245,
                "name": "IResult.E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        },
        {
          "id": 1171,
          "name": "unwrapOr",
          "source": {
            "line": 527,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L527"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1172,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Ok` value or the provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(9);\nassert.equal(x.unwrapOr(2), 9);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Error');\nassert.equal(x.unwrapOr(2), 2);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1173,
                  "name": "V",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1174,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1173,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1173,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1175,
          "name": "unwrapOrElse",
          "source": {
            "line": 548,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L548"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1176,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained `Ok` value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst count = (x: string) => x.length;\n\nassert.equal(ok(2).unwrapOrElse(count), 2);\nassert.equal(err('hello').unwrapOrElse(count), 5);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1177,
                  "name": "V",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1178,
                  "name": "op",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 1180,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 1181,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 1245,
                              "name": "IResult.E",
                              "packageName": "@sapphire/result",
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 1177,
                          "name": "V",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": 1244,
                    "name": "IResult.T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1177,
                    "name": "V",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1182,
          "name": "unwrapRaw",
          "source": {
            "line": 574,
            "file": "IResult.ts",
            "path": "packages/result/src/lib/Result",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result/IResult.ts#L574"
          },
          "parentId": 1063,
          "signatures": [
            {
              "id": 1183,
              "name": "unwrapRaw",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws the contained error.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrapRaw(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrapRaw(), {\n  name: 'Error',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 1244,
                "name": "IResult.T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            }
          ]
        }
      ]
    }
  ],
  "namespaces": [
    {
      "id": 397,
      "name": "Option",
      "source": {
        "line": 13,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L13"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "classes": [],
      "enums": [],
      "functions": [
        {
          "id": 416,
          "name": "all",
          "source": {
            "line": 61,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L61"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 417,
              "name": "all",
              "comment": {
                "description": "Creates a {@link Some} that is the combination of all collected {@link Some} values as an array, or the first\n{@link None} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Option}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 418,
                  "name": "T",
                  "constraint": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 419,
                  "name": "options",
                  "comment": {
                    "description": "An array of {@link Option}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 418,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 436,
                    "name": "Option.UnwrapSomeArray",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 418,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 420,
          "name": "any",
          "source": {
            "line": 79,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L79"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 421,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Some}, or a {@link None} if none was found.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Option}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 422,
                  "name": "T",
                  "constraint": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 423,
                  "name": "options",
                  "comment": {
                    "description": "An array of {@link Option}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 422,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 436,
                      "name": "Option.UnwrapSomeArray",
                      "packageName": "@sapphire/result",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 422,
                          "name": "T",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 404,
          "name": "from",
          "source": {
            "line": 33,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L33"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 405,
              "name": "from",
              "comment": {
                "description": "Creates an {@link Option} out of a value or callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 406,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 407,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 424,
                        "name": "Option.Resolvable",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 406,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 409,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 424,
                              "name": "Option.Resolvable",
                              "packageName": "@sapphire/result",
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 406,
                                  "name": "T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 406,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 410,
          "name": "fromAsync",
          "source": {
            "line": 47,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L47"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 411,
              "name": "fromAsync",
              "comment": {
                "description": "Creates an {@link Option} out of a value or callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 412,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 413,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 424,
                            "name": "Option.Resolvable",
                            "packageName": "@sapphire/result",
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 412,
                                "name": "T",
                                "packageName": "@sapphire/result",
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 415,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": null,
                              "name": "Awaitable",
                              "packageName": "@sapphire/result",
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 424,
                                  "name": "Option.Resolvable",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 412,
                                      "name": "T",
                                      "packageName": "@sapphire/result",
                                      "typeArguments": []
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 412,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 398,
          "name": "is",
          "source": {
            "line": 23,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L23"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 399,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 400,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 401,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 395,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 400,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 402,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 403,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "value",
                "type": {
                  "kind": "reference",
                  "id": 395,
                  "name": "Option",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 427,
          "name": "some",
          "source": {
            "line": 90,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L90"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 428,
              "name": "some",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 429,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 430,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 3,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 178,
                "name": "OptionSome",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 3,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 433,
          "name": "None",
          "source": {
            "line": 93,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L93"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [],
          "type": {
            "kind": "reference",
            "id": 6,
            "name": "OptionNone",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        },
        {
          "id": 424,
          "name": "Resolvable",
          "source": {
            "line": 16,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L16"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 425,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 425,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              },
              {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 425,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 431,
          "name": "Some",
          "source": {
            "line": 92,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L92"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 432,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": 178,
            "name": "OptionSome",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 432,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        },
        {
          "id": 434,
          "name": "UnwrapSome",
          "source": {
            "line": 95,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L95"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 435,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 395,
                "name": "Option",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 435,
              "name": "T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 431,
              "name": "Option.Some",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 436,
          "name": "UnwrapSomeArray",
          "source": {
            "line": 96,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L96"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 437,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 395,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 437,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 434,
              "name": "Option.UnwrapSome",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 437,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ],
      "variables": [
        {
          "id": 426,
          "name": "none",
          "source": {
            "line": 89,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L89"
          },
          "namespaceParentId": 397,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "type": {
            "kind": "reference",
            "id": 6,
            "name": "OptionNone",
            "packageName": "@sapphire/result",
            "typeArguments": []
          },
          "value": "createNone"
        }
      ]
    },
    {
      "id": 1008,
      "name": "Result",
      "source": {
        "line": 14,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L14"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "classes": [],
      "enums": [],
      "functions": [
        {
          "id": 1030,
          "name": "all",
          "source": {
            "line": 63,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L63"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1031,
              "name": "all",
              "comment": {
                "description": "Creates an {@link Ok} that is the combination of all collected {@link Ok} values as an array, or the first\n{@link Err} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1032,
                  "name": "T",
                  "constraint": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1033,
                  "name": "results",
                  "comment": {
                    "description": "An array of {@link Result}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 1032,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1059,
                    "name": "Result.UnwrapOkArray",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1032,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 1061,
                      "name": "Result.UnwrapErrArray",
                      "packageName": "@sapphire/result",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 1032,
                          "name": "T",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1034,
          "name": "any",
          "source": {
            "line": 81,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L81"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1035,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Ok}, or an {@link Err} that is the combination of all collected error values.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1036,
                  "name": "T",
                  "constraint": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1037,
                  "name": "results",
                  "comment": {
                    "description": "An array of {@link Result}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "rest",
                        "type": {
                          "kind": "array",
                          "type": {
                            "kind": "reference",
                            "id": 1036,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 1059,
                      "name": "Result.UnwrapOkArray",
                      "packageName": "@sapphire/result",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 1036,
                          "name": "T",
                          "packageName": "@sapphire/result",
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  },
                  {
                    "kind": "reference",
                    "id": 1061,
                    "name": "Result.UnwrapErrArray",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1036,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1041,
          "name": "err",
          "source": {
            "line": 94,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L94"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1042,
              "name": "err",
              "comment": {
                "description": "Creates an Err with no error.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "An erroneous Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            },
            {
              "id": 1043,
              "name": "err",
              "comment": {
                "description": "Creates an Err.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  },
                  {
                    "name": "returns",
                    "text": "An erroneous Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1044,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1045,
                  "name": "x",
                  "comment": {
                    "description": "Value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 637,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 826,
                "name": "ResultErr",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 637,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1016,
          "name": "from",
          "source": {
            "line": 34,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L34"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1017,
              "name": "from",
              "comment": {
                "description": "Creates a {@link Result} out of a callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1018,
                  "name": "T",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1019,
                  "name": "E",
                  "constraint": null,
                  "default": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 1020,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 1038,
                        "name": "Result.Resolvable",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1018,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 1019,
                            "name": "E",
                            "packageName": "@sapphire/result",
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 1022,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 1038,
                              "name": "Result.Resolvable",
                              "packageName": "@sapphire/result",
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 1018,
                                  "name": "T",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                },
                                {
                                  "kind": "reference",
                                  "id": 1019,
                                  "name": "E",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": []
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1018,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1019,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1023,
          "name": "fromAsync",
          "source": {
            "line": 49,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L49"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1024,
              "name": "fromAsync",
              "comment": {
                "description": "Creates a {@link Result} out of a promise or async callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1025,
                  "name": "T",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1026,
                  "name": "E",
                  "constraint": null,
                  "default": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 1027,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 1038,
                            "name": "Result.Resolvable",
                            "packageName": "@sapphire/result",
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 1025,
                                "name": "T",
                                "packageName": "@sapphire/result",
                                "typeArguments": []
                              },
                              {
                                "kind": "reference",
                                "id": 1026,
                                "name": "E",
                                "packageName": "@sapphire/result",
                                "typeArguments": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 1029,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": null,
                              "name": "Awaitable",
                              "packageName": "@sapphire/result",
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 1038,
                                  "name": "Result.Resolvable",
                                  "packageName": "@sapphire/result",
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 1025,
                                      "name": "T",
                                      "packageName": "@sapphire/result",
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "reference",
                                      "id": 1026,
                                      "name": "E",
                                      "packageName": "@sapphire/result",
                                      "typeArguments": []
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1025,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1026,
                        "name": "E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1009,
          "name": "is",
          "source": {
            "line": 23,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L23"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1010,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1011,
                  "name": "T",
                  "constraint": null,
                  "default": null
                },
                {
                  "id": 1012,
                  "name": "E",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1013,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1005,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1011,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 1012,
                        "name": "E",
                        "packageName": "@sapphire/result",
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "true"
              }
            },
            {
              "id": 1014,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 1015,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "value",
                "type": {
                  "kind": "reference",
                  "id": 1005,
                  "name": "Result",
                  "packageName": "@sapphire/result",
                  "typeArguments": [
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    },
                    {
                      "kind": "intrinsic",
                      "type": "unknown"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 1046,
          "name": "ok",
          "source": {
            "line": 95,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L95"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "signatures": [
            {
              "id": 1047,
              "name": "ok",
              "comment": {
                "description": "Creates an Ok with no value.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A successful Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            },
            {
              "id": 1048,
              "name": "ok",
              "comment": {
                "description": "Creates an Ok.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "returns",
                    "text": "A successful Result."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [
                {
                  "id": 1049,
                  "name": "T",
                  "constraint": null,
                  "default": null
                }
              ],
              "parameters": [
                {
                  "id": 1050,
                  "name": "x",
                  "comment": {
                    "description": "Value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 632,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 639,
                "name": "ResultOk",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 632,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 1051,
          "name": "Err",
          "source": {
            "line": 97,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L97"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1052,
              "name": "E",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": 826,
            "name": "ResultErr",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 1052,
                "name": "E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        },
        {
          "id": 1053,
          "name": "Ok",
          "source": {
            "line": 98,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L98"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1054,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": 639,
            "name": "ResultOk",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 1054,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        },
        {
          "id": 1038,
          "name": "Resolvable",
          "source": {
            "line": 17,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L17"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1039,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 1040,
              "name": "E",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 1039,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1039,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1040,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 1057,
          "name": "UnwrapErr",
          "source": {
            "line": 101,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L101"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1058,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 1058,
              "name": "T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 1051,
              "name": "Result.Err",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 1061,
          "name": "UnwrapErrArray",
          "source": {
            "line": 106,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L106"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1062,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 1062,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 1057,
              "name": "Result.UnwrapErr",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 1062,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        },
        {
          "id": 1055,
          "name": "UnwrapOk",
          "source": {
            "line": 100,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L100"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1056,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 1005,
                "name": "Result",
                "packageName": "@sapphire/result",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 1056,
              "name": "T",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 1053,
              "name": "Result.Ok",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 1059,
          "name": "UnwrapOkArray",
          "source": {
            "line": 103,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L103"
          },
          "namespaceParentId": 1008,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 1060,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 1005,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 1060,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 1055,
              "name": "Result.UnwrapOk",
              "packageName": "@sapphire/result",
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 1060,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ],
      "variables": []
    }
  ],
  "typeAliases": [
    {
      "id": 395,
      "name": "Option",
      "source": {
        "line": 13,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option.ts#L13"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The union of the two variations of `Option`.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The value's type."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 396,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": 431,
            "name": "Option.Some",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 396,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": 433,
            "name": "Option.None",
            "packageName": "@sapphire/result",
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 1005,
      "name": "Result",
      "source": {
        "line": 14,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Result.ts#L14"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "The union of the two variations of `Result`.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 1006,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 1007,
          "name": "E",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": 1053,
            "name": "Result.Ok",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 1006,
                "name": "T",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": 1051,
            "name": "Result.Err",
            "packageName": "@sapphire/result",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 1007,
                "name": "E",
                "packageName": "@sapphire/result",
                "typeArguments": []
              }
            ]
          }
        ]
      }
    }
  ],
  "variables": [
    {
      "id": 5,
      "name": "none",
      "source": {
        "line": 169,
        "file": "None.ts",
        "path": "packages/result/src/lib/Option",
        "url": "https://github.com/sapphiredev/utilities/blob/083376aac55094dbeddb5194e8a8f0d794b8cceb/packages/result/src/lib/Option/None.ts#L169"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "type": {
        "kind": "reference",
        "id": 6,
        "name": "OptionNone",
        "packageName": "@sapphire/result",
        "typeArguments": []
      },
      "value": "..."
    }
  ]
}