{
  "typeDocJsonParserVersion": "10.1.6",
  "id": 0,
  "name": "@sapphire/result",
  "version": "2.6.6",
  "dependencies": {},
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://raw.githubusercontent.com/sapphiredev/assets/main/banners/SapphireCommunity.png)\n\n# @sapphire/result\n\n**A TypeScript port of Nightly Rust's Result and Option structs**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/result?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/result)\n[![npm](https://img.shields.io/npm/v/@sapphire/result?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/result)\n\n</div>\n\n## Description\n\nWhen having many `try-catch` blocks after one another, or multiple `try-catch` blocks nested in one another then code can become very chaotic very quickly. To alleviate that issue we have made the `@sapphire/result` which offers two structures based on Rust's [`Result<T, E>`](https://doc.rust-lang.org/std/result/index.html) and [`Option<T>`](https://doc.rust-lang.org/std/option/enum.Option.html) with full Nightly coverage and extra convenience methods. This code has been branched off of `@sapphire/framework` into its own package after we saw great success with the code there.\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Full feature parity with Nightly Rust's `Result<T, E>` and `Option<T>`\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/result\n```\n\n## Usage\n\n**Note 1:** While this section uses `require`, the imports match 1:1 with ESM imports. For example `const { Result } = require('@sapphire/result')` equals `import { Result } from '@sapphire/result'`.\n\n**Note 2:** For more thorough examples check out the generated documentation on [our website here](https://www.sapphirejs.dev/docs/Documentation/api-utilities/@sapphire/result/interfaces/IResult)\n\n### Wrapping synchronous `try-catch` blocks\n\n**Old code without `Result.from`:**\n\n```typescript\ntry {\n\tconst returnCode = someFunctionThatMightThrow();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.from`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = Result.from(() => someFunctionThatMightThrow());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n### Wrapping asynchronous `try-catch` blocks\n\n**Old code without `Result.fromAsync`:**\n\n```typescript\ntry {\n\tconst returnCode = await someFunctionThatReturnsAPromiseAndMightReject();\n\n\treturn returnCode;\n} catch (error) {\n\t// Handle the error:\n\tconsole.error(error);\n\treturn null;\n}\n```\n\n**New Code with `Result.fromAsync`:**\n\n```typescript\nconst { Result } = require('@sapphire/result');\n\nconst returnCode = await Result.fromAsync(async () => someFunctionThatReturnsAPromiseAndMightReject());\n\nreturn returnCode.unwrapOrElse((error) => {\n\tconsole.error(error);\n\treturn null;\n});\n```\n\n---\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n[lexure]: https://github.com/1Computer1/lexure\n[1computer1]: https://github.com/1Computer1\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/result@2.6.6](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.6...@sapphire/result@2.6.6) - (2024-01-19)\n\n## üêõ Bug Fixes\n\n- Fixed commonjs typings export mapping (#707) ([216ff02](https://github.com/sapphiredev/utilities/commit/216ff0260d63a9590357f9a5069f1ae2b34eaf5d))\n\n# [@sapphire/result@2.6.5](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.5...@sapphire/result@2.6.5) - (2023-12-04)\n\n## üêõ Bug Fixes\n\n- **result:** Properly split CJS, ESM and IIFE ([1f8f52e](https://github.com/sapphiredev/utilities/commit/1f8f52efd78a76553bd3c0a516c4a629f098496e))\n- Update export mapping for proper ESM/CJS split ([dd0cff8](https://github.com/sapphiredev/utilities/commit/dd0cff8e9b03a15812f25f7a1180501a92422629))\n- **deps:** Update all non-major dependencies (#607) ([9cc8bd0](https://github.com/sapphiredev/utilities/commit/9cc8bd0d4b5d650deab2c913e6c3d713861bae28))\n\n## üìù Documentation\n\n- **readme:** Add link to examples ([e33b5b9](https://github.com/sapphiredev/utilities/commit/e33b5b9408bf0f48f427291de5bd56bfc4250644))\n\n## üß™ Testing\n\n- Update vitest to coverage v8 ([a4bc6e4](https://github.com/sapphiredev/utilities/commit/a4bc6e4f24ea60143a150ecc76fda6484f172ab9))\n\n# [@sapphire/result@2.6.4](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.3...@sapphire/result@2.6.4) - (2023-05-12)\n\n## üêõ Bug Fixes\n\n- **result:** Remove unnecessary tslib import ([ec40daa](https://github.com/sapphiredev/utilities/commit/ec40daa55fce58202f06401bb1a8ee0414f28962))\n\n# [@sapphire/result@2.6.3](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.2...@sapphire/result@2.6.3) - (2023-05-02)\n\n## üè† Refactor\n\n- **result:** Internally rework code to ensure typings can be generated without conflicts ([83d698e](https://github.com/sapphiredev/utilities/commit/83d698e5b0f3e552a3c97e1d9146fc74426b7609))\n\n# [@sapphire/result@2.6.2](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.1...@sapphire/result@2.6.2) - (2023-04-17)\n\n## üêõ Bug Fixes\n\n- **result:** Add tslib dependency to fix __exportStar not being defined ([4c51387](https://github.com/sapphiredev/utilities/commit/4c51387b83ce363752528d45da9ca9772ed80552))\n\n# [@sapphire/result@2.6.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.6.0...@sapphire/result@2.6.1) - (2023-04-10)\n\n## üêõ Bug Fixes\n\n- **result:** Add missing type modifier ([deb93b7](https://github.com/sapphiredev/utilities/commit/deb93b7a27d8f0646544bd6b9e5135903f7b94a7))\n- **deps:** Update all non-major dependencies (#577) ([291dd67](https://github.com/sapphiredev/utilities/commit/291dd6783e57d8f075ce566218ba076ef6c4bbbd))\n- **deps:** Update all non-major dependencies (#545) ([40ca040](https://github.com/sapphiredev/utilities/commit/40ca040a21d8a0949682051a3a974538183a400e))\n- **deps:** Update all non-major dependencies (#544) ([cc78f17](https://github.com/sapphiredev/utilities/commit/cc78f17390c7f3db08af92bf46a5a70a9c11dd5f))\n- **deps:** Update all non-major dependencies (#532) ([8033d1f](https://github.com/sapphiredev/utilities/commit/8033d1ff7a5a1974134c61f424f171cccb2915e1))\n- **deps:** Update all non-major dependencies (#514) ([21b07d5](https://github.com/sapphiredev/utilities/commit/21b07d5db529a0d982647a60de98e46f36f1ac93))\n\n## üìù Documentation\n\n- Add @06000208 as a contributor ([fa3349e](https://github.com/sapphiredev/utilities/commit/fa3349e55ce4ad008785211dec7bf8e2b5d933df))\n- Add @didinele as a contributor ([42ef7b6](https://github.com/sapphiredev/utilities/commit/42ef7b656c48fd0e720119db1d622c8bba2791e9))\n- Add @goestav as a contributor ([0e56a92](https://github.com/sapphiredev/utilities/commit/0e56a92a4e2d0942bfa207f81a8cb03b32312034))\n- Add @CitTheDev as a contributor ([34169ea](https://github.com/sapphiredev/utilities/commit/34169eae1dc0476ccf5a6c4f36e28602a204829e))\n- Add @legendhimslef as a contributor ([059b6f1](https://github.com/sapphiredev/utilities/commit/059b6f1ab5362d46d58624d06c1aa39192b0716f))\n\n# [@sapphire/result@2.6.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.5.0...@sapphire/result@2.6.0) - (2022-10-16)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies (#505) ([6178296](https://github.com/sapphiredev/utilities/commit/617829649e1e4deeee02b14533b5377cd5bc1fb3))\n\n## üìù Documentation\n\n- Add @r-priyam as a contributor ([fb278ba](https://github.com/sapphiredev/utilities/commit/fb278bacf627ec6fc88752eafeb12df5f3177a2c))\n\n## üöÄ Features\n\n- Add `{Option,Result}.{any,all}` (#501) ([4c349bf](https://github.com/sapphiredev/utilities/commit/4c349bf6b3577ad85a1895f90c775c92c4016fa3))\n\n# [@sapphire/result@2.5.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.1...@sapphire/result@2.5.0) - (2022-10-01)\n\n## üè† Refactor\n\n- Split `@sapphire/time-utilities` into 4 sub-packages (#462) ([574299a](https://github.com/sapphiredev/utilities/commit/574299a99e658f6500a2a7efa587a0919b2d1313))\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies (#466) ([dc08606](https://github.com/sapphiredev/utilities/commit/dc08606a97154e47c65536123ac5f8b1262f7bd2))\n- **deps:** Update all non-major dependencies ([e20f299](https://github.com/sapphiredev/utilities/commit/e20f29906e83cee000aaba9c6827e3bec5173d28))\n\n## üìù Documentation\n\n- Change name of @kyranet (#451) ([df4fdef](https://github.com/sapphiredev/utilities/commit/df4fdefce18659975a4ebc224723638507d02d35))\n- Update @RealShadowNova as a contributor ([a869ba0](https://github.com/sapphiredev/utilities/commit/a869ba0abfad041610b9115187d426aebe671af6))\n\n## üöÄ Features\n\n- **result:** Add `Result.unwrapRaw` (#475) ([82fe79e](https://github.com/sapphiredev/utilities/commit/82fe79ec6bff4979be615f322b6d1392016d9622))\n\n# [@sapphire/result@2.4.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.4.0...@sapphire/result@2.4.1) - (2022-08-29)\n\n## üß™ Testing\n\n- **result:** Add full coverage (#436) ([3f06ac5](https://github.com/sapphiredev/utilities/commit/3f06ac500b8e96312a5fe04be2817753ce219d37))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## üöÄ Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.4.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.3...@sapphire/result@2.4.0) - (2022-08-19)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([2308bd7](https://github.com/sapphiredev/utilities/commit/2308bd74356b6b2e0c12995b25f4d8ade4803fe9))\n\n## üöÄ Features\n\n- Add `intoPromise` (#430) ([715315e](https://github.com/sapphiredev/utilities/commit/715315eb8c3e6bc8e47379a486bac7c737620f92))\n\n# [@sapphire/result@2.3.3](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.2...@sapphire/result@2.3.3) - (2022-08-06)\n\n## üêõ Bug Fixes\n\n- **result:** Better `unwrapOr*`, added more tests (#416) ([ec088a8](https://github.com/sapphiredev/utilities/commit/ec088a88a878c7d230c51b148593a85d258075f9))\n\n# [@sapphire/result@2.3.2](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.1...@sapphire/result@2.3.2) - (2022-08-05)\n\n## üêõ Bug Fixes\n\n- Revert \"make unwrap methods generic (#415) (v2.3.1)\" ([a963396](https://github.com/sapphiredev/utilities/commit/a9633967d5c4659f26c54fa660796bae18fdaf07))\n\n# [@sapphire/result@2.3.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.3.0...@sapphire/result@2.3.1) - (2022-08-05)\n\n## üêõ Bug Fixes\n\n- **result:** Make unwrap methods generic (#415) ([76e95b3](https://github.com/sapphiredev/utilities/commit/76e95b3c18ecdff53bfa07d541ed1bc1809c7f72))\n\n# [@sapphire/result@2.3.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.2.0...@sapphire/result@2.3.0) - (2022-08-05)\n\n## üöÄ Features\n\n- **result:** Add `inspect*Async` methods (#414) ([fca7a80](https://github.com/sapphiredev/utilities/commit/fca7a8010ae8c368513de2eca56f9f5bfe2756a3))\n\n# [@sapphire/result@2.2.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.1...@sapphire/result@2.2.0) - (2022-08-04)\n\n## üêõ Bug Fixes\n\n- **result:** Resolve Unwrap type issues (#411) ([3c2159c](https://github.com/sapphiredev/utilities/commit/3c2159cac18df0925cd71393698ed7d9f98fd6ef))\n\n## üöÄ Features\n\n- **result:** Export `ok`, `err`, `some`, `none`, and improve docs (#412) ([c978864](https://github.com/sapphiredev/utilities/commit/c978864d91d950c611c073a5c34ef01311e9d8f0))\n\n# [@sapphire/result@2.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.1.0...@sapphire/result@2.1.1) - (2022-07-29)\n\n## üêõ Bug Fixes\n\n- **Result:** Type `IResult.mapInto`'s return correctly (#405) ([14ddf5f](https://github.com/sapphiredev/utilities/commit/14ddf5fc35d1186f9fdc78a3d2b3b465acbd36ac))\n\n# [@sapphire/result@2.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.1...@sapphire/result@2.1.0) - (2022-07-29)\n\n## üìù Documentation\n\n- Add @muchnameless as a contributor ([a1221fe](https://github.com/sapphiredev/utilities/commit/a1221fea68506e99591d5d00ec552a07c26833f9))\n- Add @enxg as a contributor ([d2382f0](https://github.com/sapphiredev/utilities/commit/d2382f04e3909cb4ad11798a0a10e683f6cf5383))\n- Add @EvolutionX-10 as a contributor ([efc3a32](https://github.com/sapphiredev/utilities/commit/efc3a320a72ae258996dd62866d206c33f8d4961))\n\n## üöÄ Features\n\n- **Result:** Add new convenience methods (#404) ([7c3ec61](https://github.com/sapphiredev/utilities/commit/7c3ec6168dde544578e5016120c9975009889391))\n\n# [@sapphire/result@2.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@2.0.0...@sapphire/result@2.0.1) - (2022-07-03)\n\n## üè† Refactor\n\n- **result:** Fixed types (#391) ([a1934e1](https://github.com/sapphiredev/utilities/commit/a1934e10cc7d81c71354deb153a4f3bb83e50e65))\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([84af0db](https://github.com/sapphiredev/utilities/commit/84af0db2db749223b036aa99fe19a2e9af5681c6))\n\n# [@sapphire/result@2.0.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.1...@sapphire/result@2.0.0) - (2022-06-26)\n\n## üè† Refactor\n\n- Rewrite @sapphire/result from scratch (#364) ([d5b57ff](https://github.com/sapphiredev/utilities/commit/d5b57ff52402bfd261372bf4486e46f39bb41b6d))\n\n   ### üí• Breaking Changes:\n   - Removed `Maybe` type, the substitute is `Option`\n   - Removed `maybe` function, the substitute is `Option.from`\n   - Removed `some` function, the substitute is `Option.some`\n   - Removed `none` function, the substitute is `Option.none`\n   - Removed `isSome` function, the substitute is `option.isSome`\n   - Removed `isNone` function, the substitute is `option.isNone`\n   - Removed `isMaybe` function, the substitute is `Option.is`\n   - Removed `UnwrapMaybeValue` type, the substitute is `Option.UnwrapSome`\n   - Removed `None` type, the substitute is `Option.None`\n   - Removed `Some` type, the substitute is `Option.Some`\n   - Removed `Err` type, the substitute is `Result.Err`\n   - Removed `Ok` type, the substitute is `Result.Ok`\n   - Removed `from` function, the substitute is `Result.from`\n   - Removed `fromAsync` function, the substitute is `Result.fromAsync`\n\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies ([50cd8de](https://github.com/sapphiredev/utilities/commit/50cd8dea593b6f5ae75571209456b3421e2ca59a))\n\n## üìù Documentation\n\n- Add @MajesticString as a contributor ([295b3e9](https://github.com/sapphiredev/utilities/commit/295b3e9849a4b0fe64074bae02f6426378a303c3))\n- Add @Mzato0001 as a contributor ([c790ef2](https://github.com/sapphiredev/utilities/commit/c790ef25df2d7e22888fa9f8169167aa555e9e19))\n- Add @NotKaskus as a contributor ([00da8f1](https://github.com/sapphiredev/utilities/commit/00da8f199137b9277119823f322d1f2d168d928a))\n- Add @imranbarbhuiya as a contributor ([fb674c2](https://github.com/sapphiredev/utilities/commit/fb674c2c5594d41e71662263553dcb4bac9e37f4))\n- Add @axisiscool as a contributor ([ce1aa31](https://github.com/sapphiredev/utilities/commit/ce1aa316871a88d3663efbdf2a42d3d8dfe6a27f))\n- Add @dhruv-kaushikk as a contributor ([ebbf43f](https://github.com/sapphiredev/utilities/commit/ebbf43f63617daba96e72c50a234bf8b64f6ddc4))\n- Add @Commandtechno as a contributor ([f1d69fa](https://github.com/sapphiredev/utilities/commit/f1d69fabe1ee0abe4be08b19e63dbec03102f7ce))\n- Fix typedoc causing OOM crashes ([63ba41c](https://github.com/sapphiredev/utilities/commit/63ba41c4b6678554b1c7043a22d3296db4f59360))\n\n## üß™ Testing\n\n- Migrate to vitest (#380) ([075ec73](https://github.com/sapphiredev/utilities/commit/075ec73c7a8e3374fad3ada612d37eb4ac36ec8d))\n\n## [1.1.1](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.1.0...@sapphire/result@1.1.1) (2022-04-01)\n\n**Note:** Version bump only for package @sapphire/result\n\n# [1.1.0](https://github.com/sapphiredev/utilities/compare/@sapphire/result@1.0.0...@sapphire/result@1.1.0) (2022-03-06)\n\n### Features\n\n-   allow module: NodeNext ([#306](https://github.com/sapphiredev/utilities/issues/306)) ([9dc6dd6](https://github.com/sapphiredev/utilities/commit/9dc6dd619efab879bb2b0b3c9e64304e10a67ed6))\n\n# 1.0.0 (2022-02-06)\n\n### Features\n\n-   **package:** add @sapphire/result package ([#274](https://github.com/sapphiredev/utilities/issues/274)) ([8a86826](https://github.com/sapphiredev/utilities/commit/8a8682607c2aa4c845e814816fa2b4478c23aa84))\n",
  "classes": [
    {
      "id": 1,
      "name": "Option",
      "source": {
        "line": 8,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [],
      "typeParameters": [
        {
          "id": 249,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 250,
          "name": "Exists",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ],
      "construct": {
        "id": 41,
        "name": "constructor",
        "source": {
          "line": 18,
          "file": "Option.ts",
          "path": "packages/result/src/lib",
          "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L18"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 1,
        "accessibility": "private",
        "parameters": [
          {
            "id": 45,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": null,
              "name": "If",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 44,
                  "name": "Option.Exists",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                },
                {
                  "kind": "reference",
                  "id": 43,
                  "name": "Option.T",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                },
                {
                  "kind": "literal",
                  "value": "null"
                }
              ]
            }
          },
          {
            "id": 46,
            "name": "exists",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 44,
              "name": "Option.Exists",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 244,
          "name": "[ExistsProperty]",
          "source": {
            "line": 16,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L16"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 44,
            "name": "Option.Exists",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 243,
          "name": "[ValueProperty]",
          "source": {
            "line": 15,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L15"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "If",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 44,
                "name": "Option.Exists",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 43,
                "name": "Option.T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        },
        {
          "id": 47,
          "name": "__STATUS__",
          "source": {
            "line": 13,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L13"
          },
          "comment": {
            "description": "Branded value to ensure `Success` is typed correctly.",
            "blockTags": [],
            "modifierTags": [
              "@internal"
            ]
          },
          "parentId": 1,
          "accessibility": "protected",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 44,
            "name": "Option.Exists",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 2,
          "name": "none",
          "source": {
            "line": 875,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L875"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 1,
            "name": "Option",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "any"
              },
              {
                "kind": "literal",
                "value": "false"
              }
            ]
          }
        },
        {
          "id": 248,
          "name": "[toStringTag]",
          "source": {
            "line": 871,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L871"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "If",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 44,
                "name": "Option.Exists",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "Some"
              },
              {
                "kind": "literal",
                "value": "None"
              }
            ]
          }
        }
      ],
      "methods": [
        {
          "id": 245,
          "name": "[iterator]",
          "source": {
            "line": 867,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L867"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 246,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IOption.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 144,
          "name": "and",
          "source": {
            "line": 457,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L457"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 145,
              "name": "and",
              "comment": {
                "description": "Returns `None` if the option is `None`, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<string> = some('foo');\nassert.equal(x.and(y), some('foo'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<string> = none;\nassert.equal(x.and(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 147,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 146,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 146,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 148,
          "name": "andThen",
          "source": {
            "line": 480,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L480"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 149,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? none : some(4 / value);\n}\n\nassert.equal(some(2).andThen(fractionOf4), some(4));\nassert.equal(some(0).andThen(fractionOf4), none);\nassert.equal(none.andThen(fractionOf4), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 151,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 153,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 154,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 150,
                          "name": "OutputOption",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 150,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 182,
          "name": "contains",
          "source": {
            "line": 631,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L631"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 183,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value containing the given value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 185,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "If",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 44,
                        "name": "Option.Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 184,
                        "name": "Value",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "unknown"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 273,
                  "name": "Some",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 184,
                      "name": "Value",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 222,
          "name": "eq",
          "source": {
            "line": 798,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L798"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 223,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 226,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 224,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 225,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 1,
                  "name": "Option",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 224,
                      "name": "OtherValue",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 225,
                      "name": "OtherExists",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 65,
          "name": "expect",
          "source": {
            "line": 112,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L112"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 66,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'OptionError',\n  message: 'Whoops'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 67,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.\nIf the value is an `Err`, it throws an {@link OptionError} with the given message.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 170,
          "name": "filter",
          "source": {
            "line": 603,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L603"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 171,
              "name": "filter",
              "comment": {
                "description": "Returns None if the option is None, otherwise calls `predicate` with the wrapped value and returns:\n\n- `Some(t)` if `predicate` returns `true` (where t is the wrapped value), and\n- `None` if `predicate` returns `false`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction isEven(value: number) {\n  return n % 2 === 0;\n}\n\nassert.equal(none.filter(isEven), none);\nassert.equal(some(3).filter(isEven), none);\nassert.equal(some(4).filter(isEven), some(4));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.filter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 173,
                  "name": "predicate",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 175,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 176,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "predicate",
                          "asserts": false,
                          "name": "value",
                          "type": {
                            "kind": "reference",
                            "id": 172,
                            "name": "R",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 172,
                    "name": "R",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            },
            {
              "id": 177,
              "name": "filter",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 178,
                  "name": "predicate",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 180,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 181,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "boolean"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215,
          "name": "flatten",
          "source": {
            "line": 769,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L769"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 216,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(some(6));\nassert.equal(x.flatten(), some(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = some(none);\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Option<number>> = none;\nassert.equal(x.flatten(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 219,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 217,
                        "name": "InnerOption",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 218,
                        "name": "Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 218,
                    "name": "Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 217,
                    "name": "InnerOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 120,
          "name": "inspect",
          "source": {
            "line": 324,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L324"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 121,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nsome(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nnone.inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 122,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 124,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 125,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "void"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 126,
          "name": "inspectAsync",
          "source": {
            "line": 347,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L347"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 127,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Some`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait some(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait none.inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 128,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 130,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 131,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 44,
                        "name": "Option.Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220,
          "name": "intoPromise",
          "source": {
            "line": 784,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L784"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 221,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Some`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = some(Promise.resolve(3));\nassert.equal(await x.intoPromise(), some(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaited",
                        "packageName": "typescript",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 43,
                            "name": "Option.T",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 44,
                        "name": "Option.Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 63,
          "name": "isNone",
          "source": {
            "line": 87,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L87"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 64,
              "name": "isNone",
              "comment": {
                "description": "Returns `true` if the option is a `None` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isNone(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isNone(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 275,
                  "name": "None",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "intrinsic",
                      "type": "any"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 48,
          "name": "isSome",
          "source": {
            "line": 39,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L39"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 49,
              "name": "isSome",
              "comment": {
                "description": "Returns `true` if the option is a `Some` value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSome(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSome(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 273,
                  "name": "Some",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 43,
                      "name": "Option.T",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 50,
          "name": "isSomeAnd",
          "source": {
            "line": 65,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L65"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 51,
              "name": "isSomeAnd",
              "comment": {
                "description": "Returns `true` if the option is a `Some` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nassert.equal(x.isSomeAnd((x) => x > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(0);\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nassert.equal(x.isSomeAnd((x) => x > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 53,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 55,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 56,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "predicate",
                          "asserts": false,
                          "name": "value",
                          "type": {
                            "kind": "reference",
                            "id": 52,
                            "name": "R",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 273,
                  "name": "Some",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 52,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            },
            {
              "id": 57,
              "name": "isSomeAnd",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 59,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 61,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 62,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 58,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": 273,
                      "name": "Some",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 58,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 58,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 142,
          "name": "iter",
          "source": {
            "line": 422,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L422"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 143,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Some`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = none;\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link Option.iter}\n - {@link https://doc.rust-lang.org/std/option/enum.Option.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 80,
          "name": "map",
          "source": {
            "line": 200,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L200"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 81,
              "name": "map",
              "comment": {
                "description": "Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst maybeSomeString = some('Hello, world!');\nconst maybeSomeLength = maybeSomeString.map((value) => value.length);\n\nassert.equal(maybeSomeLength, some(13));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 83,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 85,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 86,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 82,
                          "name": "U",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 82,
                        "name": "U",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 87,
          "name": "mapInto",
          "source": {
            "line": 226,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L226"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 88,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Some<T>` to the returned `Option<U>` by applying a function to a contained value, leaving `None`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapInto((value) => some(value.length));\n\nassert.equal(result, none);\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 90,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 92,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 93,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 89,
                          "name": "OutputOption",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 89,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 114,
          "name": "mapNoneInto",
          "source": {
            "line": 302,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L302"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 115,
              "name": "mapNoneInto",
              "comment": {
                "description": "Maps a `None` to the returned `Option<U>` by applying a function to a contained value, leaving `Some<T>`\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = some('Hello, world!');\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some('Hello, world!'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst input: Option<string> = none;\nconst result = input.mapNoneInto(() => some(13));\n\nassert.equal(result, some(13));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 117,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 119,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 116,
                          "name": "OutputOption",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 116,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 94,
          "name": "mapOr",
          "source": {
            "line": 251,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L251"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 95,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default result (if none), or applies a function to the contained value (if any).\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link mapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 98,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 97,
                    "name": "DefaultOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                },
                {
                  "id": 99,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 101,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 102,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 96,
                          "name": "MappedOutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 96,
                    "name": "MappedOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 97,
                    "name": "DefaultOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 103,
          "name": "mapOrElse",
          "source": {
            "line": 276,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L276"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 104,
              "name": "mapOrElse",
              "comment": {
                "description": "Computes a default function result (if none), or applies a different function to the contained value (if any).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.mapOrElse(() => 42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 107,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 109,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 106,
                          "name": "OutputNone",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 110,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 112,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 113,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 105,
                          "name": "OutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 105,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 106,
                    "name": "OutputNone",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 230,
          "name": "match",
          "source": {
            "line": 834,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L834"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 231,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = some(4).match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst option = none.match({\n  some: (v) => v,\n  none: () => 0\n});\nassert.equal(option, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 234,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 240,
                        "signatures": [
                          {
                            "id": 241,
                            "name": "none",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 242,
                                "name": "this",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 275,
                                  "name": "None",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "intrinsic",
                                      "type": "any"
                                    }
                                  ]
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 233,
                              "name": "NoneValue",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 236,
                        "signatures": [
                          {
                            "id": 237,
                            "name": "some",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 238,
                                "name": "this",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 273,
                                  "name": "Some",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 43,
                                      "name": "Option.T",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    }
                                  ]
                                }
                              },
                              {
                                "id": 239,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 43,
                                  "name": "Option.T",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 232,
                              "name": "SomeValue",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 232,
                    "name": "SomeValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 233,
                    "name": "NoneValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 227,
          "name": "ne",
          "source": {
            "line": 809,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L809"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 228,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 229,
                  "name": "other",
                  "comment": {
                    "description": "The other option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 132,
          "name": "okOr",
          "source": {
            "line": 372,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L372"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 133,
              "name": "okOr",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err)`.\n\nArguments passed to `okOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link okOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOr(0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOr(0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 135,
                  "name": "error",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 134,
                    "name": "ErrorValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 134,
                        "name": "ErrorValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 136,
          "name": "okOrElse",
          "source": {
            "line": 393,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L393"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 137,
              "name": "okOrElse",
              "comment": {
                "description": "Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)` and `None` to `Err(err())`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some('hello');\nassert.equal(x.okOrElse(() => 0), ok('hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.equal(x.okOrElse(() => 0), err(0));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 139,
                  "name": "cb",
                  "comment": {
                    "description": "The error to be used.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 141,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 138,
                          "name": "ErrorValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 138,
                        "name": "ErrorValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 155,
          "name": "or",
          "source": {
            "line": 515,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L515"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 156,
              "name": "or",
              "comment": {
                "description": "Returns the option if it contains a value, otherwise returns `option`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(100));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(100);\nassert.equal(x.or(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.or(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 158,
                  "name": "option",
                  "comment": {
                    "description": "The option.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 157,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 157,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 159,
          "name": "orElse",
          "source": {
            "line": 537,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L537"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 160,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst nobody = (): Option<string> => none;\nconst vikings = (): Option<string> => some('vikings');\n\nassert.equal(some('barbarians').orElse(vikings), some('barbarians'));\nassert.equal(none.orElse(vikings), some('vikings'));\nassert.equal(none.orElse(nobody), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 162,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 164,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 161,
                          "name": "OutputOption",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 161,
                    "name": "OutputOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208,
          "name": "transpose",
          "source": {
            "line": 738,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L738"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 209,
              "name": "transpose",
              "comment": {
                "description": "Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n\n`none` will be mapped to `ok(none)`. `some(ok(v))` and `some(err(e))` will be mapped to `ok(some(v))` and `err(e)`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<Result<number, Error>> = some(ok(5));\nconst y: Result<Option<number>, Error> = ok(some(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 214,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 304,
                        "name": "Result",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 210,
                            "name": "ResultValue",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 211,
                            "name": "ResultError",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 212,
                            "name": "ResultSuccess",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 213,
                        "name": "Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 213,
                    "name": "Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 273,
                        "name": "Some",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 210,
                            "name": "ResultValue",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 211,
                        "name": "ResultError",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 212,
                        "name": "ResultSuccess",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 275,
                        "name": "None",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 68,
          "name": "unwrap",
          "source": {
            "line": 141,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L141"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 69,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Some` value.\n\nIf the value is an `Err`, it throws an {@link OptionError} with the message.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = some(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<string> = none;\nassert.throws(() => x.unwrap(), {\n  name: 'OptionError',\n  message: 'Unwrap failed'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 70,
          "name": "unwrapOr",
          "source": {
            "line": 164,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L164"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 71,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Some` value or a provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOr(0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOr(0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 73,
                  "name": "defaultValue",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 72,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 72,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 74,
          "name": "unwrapOrElse",
          "source": {
            "line": 182,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L182"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 75,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained Some value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(some(2).unwrapOrElse(() => 0), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nassert.equal(none.unwrapOrElse(() => 0), 0);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 77,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 79,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [],
                        "returnType": {
                          "kind": "reference",
                          "id": 76,
                          "name": "OutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 43,
                    "name": "Option.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 76,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 202,
          "name": "unzip",
          "source": {
            "line": 714,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L714"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 203,
              "name": "unzip",
              "comment": {
                "description": "Unzips an option containing a tuple of two options.\n\nIf self is `Some([a, b])` this method returns `[Some(a), Some(b)]`. Otherwise, `[None, None]` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = some([1, 'hi']);\nassert.equal(x.unzip(), [some(1), some('hi')]);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<[number, string]> = none;\nassert.equal(x.unzip(), [none, none]);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.unzip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 207,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "typeOperator",
                        "operator": "readonly",
                        "type": {
                          "kind": "tuple",
                          "types": [
                            {
                              "kind": "reference",
                              "id": 204,
                              "name": "Value0",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            },
                            {
                              "kind": "reference",
                              "id": 205,
                              "name": "Value1",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          ]
                        }
                      },
                      {
                        "kind": "reference",
                        "id": 206,
                        "name": "Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 204,
                        "name": "Value0",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 206,
                        "name": "Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 205,
                        "name": "Value1",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 206,
                        "name": "Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 165,
          "name": "xor",
          "source": {
            "line": 572,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L572"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 166,
              "name": "xor",
              "comment": {
                "description": "Returns `Some` if exactly one of self or `option` is `Some`, otherwise returns `None`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = none;\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = some(2);\nconst y: Option<number> = some(2);\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Option<number> = none;\nconst y: Option<number> = none;\nassert.equal(x.xor(y), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.xor}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 169,
                  "name": "option",
                  "comment": {
                    "description": "The option to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 167,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 168,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "Option.Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "If",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 168,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 275,
                        "name": "None",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 273,
                        "name": "Some",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 43,
                            "name": "Option.T",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 167,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 168,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 186,
          "name": "zip",
          "source": {
            "line": 653,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L653"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 187,
              "name": "zip",
              "comment": {
                "description": "Zips self with another `Option`.\n\nIf self is `Some(s)` and `other` is `Some(o)`, this method returns `Some([s, o])`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = some(1);\nconst y = some('hi');\nconst z = none;\n\nassert.equal(x.zip(y), some([1, 'hi']));\nassert.equal(x.zip(z), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 190,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 188,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 189,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "tuple",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 43,
                        "name": "Option.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 188,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "If",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 44,
                        "name": "Option.Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 189,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "literal",
                        "value": "false"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 191,
          "name": "zipWith",
          "source": {
            "line": 688,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L688"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 192,
              "name": "zipWith",
              "comment": {
                "description": "Zips self and another `Option` with function `f`.\n\nIf self is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`. Otherwise, `None` is returned.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nclass Point {\n  public readonly x: number;\n  public readonly y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst x = some(17.5);\nconst y = some(42.7);\n\nassert.equal(x.zipWith(y, (s, o) => new Point(s, o)), some(new Point(17.5, 42.7)));\nassert.equal(x.zipWith(none, (s, o) => new Point(s, o)), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/option/enum.Option.html#method.zip_with}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 196,
                  "name": "other",
                  "comment": {
                    "description": "The option to zip self with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 193,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 194,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                },
                {
                  "id": 197,
                  "name": "f",
                  "comment": {
                    "description": "The function that computes the returned value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 199,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 200,
                            "name": "value0",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 43,
                              "name": "Option.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "id": 201,
                            "name": "value1",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 193,
                              "name": "OtherValue",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 195,
                          "name": "ReturnValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 195,
                    "name": "ReturnValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "If",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 44,
                        "name": "Option.Exists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 194,
                        "name": "OtherExists",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "literal",
                        "value": "false"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 38,
          "name": "[hasInstance]",
          "source": {
            "line": 898,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L898"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 39,
              "name": "[hasInstance]",
              "comment": {
                "description": "Checks if the `instance` object is an instance of `Option`, or if it is a `Option`-like object. This override\nexists to interoperate with other versions of this class, such as the one coming from another version of this\nlibrary or from a different build.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "Whether or not the instance is a `Option`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Option } from '@sapphire/result';\nconst { some } = require('@sapphire/result');\n\nsome(2) instanceof Option; // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 40,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 28,
          "name": "all",
          "source": {
            "line": 978,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L978"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 29,
              "name": "all",
              "comment": {
                "description": "Creates an {@link Ok} that is the combination of all collected {@link Ok} values as an array, or the first\n{@link Err} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 31,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 32,
                  "name": "results",
                  "comment": {
                    "description": "An array of {@link Result}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 30,
                    "name": "Entries",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Option.UnwrapSomeArray",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 30,
                        "name": "Entries",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 33,
          "name": "any",
          "source": {
            "line": 996,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L996"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 34,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Some}, or a {@link None} if none was found.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Option}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 36,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 37,
                  "name": "results",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 35,
                    "name": "Entries",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 260,
                    "name": "Option.UnwrapSome",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "indexedAccess",
                        "objectType": {
                          "kind": "reference",
                          "id": 35,
                          "name": "Entries",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        "indexType": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ]
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 14,
          "name": "from",
          "source": {
            "line": 947,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L947"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 15,
              "name": "from",
              "comment": {
                "description": "Creates a {@link Result} out of a callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 17,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 18,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 270,
                        "name": "OptionResolvable",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 16,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "intrinsic",
                            "type": "boolean"
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 20,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 270,
                              "name": "OptionResolvable",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 16,
                                  "name": "T",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                },
                                {
                                  "kind": "intrinsic",
                                  "type": "boolean"
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 16,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 21,
          "name": "fromAsync",
          "source": {
            "line": 962,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L962"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 22,
              "name": "fromAsync",
              "comment": {
                "description": "Creates a {@link Result} out of a promise or async callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 24,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 25,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 270,
                            "name": "OptionResolvable",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 23,
                                "name": "T",
                                "packageName": "@sapphire/result",
                                "packageVersion": null,
                                "typeArguments": []
                              },
                              {
                                "kind": "intrinsic",
                                "type": "boolean"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 27,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": null,
                              "name": "Awaitable",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 270,
                                  "name": "OptionResolvable",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 23,
                                      "name": "T",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "intrinsic",
                                      "type": "boolean"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 23,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "boolean"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 8,
          "name": "is",
          "source": {
            "line": 918,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L918"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 9,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [
                  {
                    "name": "deprecated",
                    "text": "Use {@link Option.isOption} instead.\n\nChecks if the `instance` object is an instance of `Option`, or if it is a `Option`-like object."
                  },
                  {
                    "name": "returns",
                    "text": "true if the instance is a `Option` or a `Option`-like object, false otherwise."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Option } from '@sapphire/result';\nconst { some } = require('@sapphire/result');\n\nOption.isOption(some(2)); // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 10,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "instance",
                "type": {
                  "kind": "reference",
                  "id": 256,
                  "name": "Option.Any",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 11,
          "name": "isOption",
          "source": {
            "line": 936,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L936"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 12,
              "name": "isOption",
              "comment": {
                "description": "Checks if the `instance` object is an instance of `Option`, or if it is a `Option`-like object.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "true if the instance is a `Option` or a `Option`-like object, false otherwise."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Option } from '@sapphire/result';\nconst { some } = require('@sapphire/result');\n\nOption.isOption(some(2)); // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 13,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "instance",
                "type": {
                  "kind": "reference",
                  "id": 256,
                  "name": "Option.Any",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 3,
          "name": "some",
          "source": {
            "line": 878,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L878"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 4,
              "name": "some",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 6,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 7,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 5,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 273,
                "name": "Some",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 5,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": 282,
      "name": "OptionError",
      "source": {
        "line": 1,
        "file": "OptionError.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/OptionError.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "packageVersion": null,
        "typeArguments": []
      },
      "implementsType": [],
      "typeParameters": [],
      "construct": {
        "id": 293,
        "name": "constructor",
        "source": {
          "line": 1082,
          "file": "lib.es5.d.ts",
          "path": "node_modules/typescript/lib",
          "url": null
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 282,
        "accessibility": "public",
        "parameters": [
          {
            "id": 295,
            "name": "message",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": true,
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          }
        ]
      },
      "properties": [
        {
          "id": 303,
          "name": "cause",
          "source": {
            "line": 24,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 301,
          "name": "message",
          "source": {
            "line": 1077,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 302,
          "name": "stack",
          "source": {
            "line": 1078,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 287,
          "name": "prepareStackTrace",
          "source": {
            "line": 98,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": "Optional override for formatting stack traces",
            "blockTags": [
              {
                "name": "see",
                "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
              }
            ],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 289,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 290,
                    "name": "err",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "reference",
                      "id": null,
                      "name": "Error",
                      "packageName": "typescript",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  },
                  {
                    "id": 291,
                    "name": "stackTraces",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "__global.NodeJS.CallSite",
                        "packageName": "@types/node",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              }
            ],
            "methods": null
          }
        },
        {
          "id": 292,
          "name": "stackTraceLimit",
          "source": {
            "line": 100,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 300,
          "name": "name",
          "source": {
            "line": 2,
            "file": "OptionError.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/OptionError.ts#L2"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 283,
          "name": "captureStackTrace",
          "source": {
            "line": 91,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "parentId": 282,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 284,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 285,
                  "name": "targetObject",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 286,
                  "name": "constructorOpt",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    },
    {
      "id": 304,
      "name": "Result",
      "source": {
        "line": 18,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L18"
      },
      "namespaceParentId": null,
      "comment": {
        "description": "A type used to express computations that can fail, it can be used for returning and propagating errors. This is a\ntype union with the variants `Ok(T)`, representing success and containing a value, and `Err(E)`, representing error\nand containing an error value.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "T The result's type."
          },
          {
            "name": "typeparam",
            "text": "E The error's type."
          },
          {
            "name": "see",
            "text": "{@link https://doc.rust-lang.org/std/result/index.html}"
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [],
      "typeParameters": [
        {
          "id": 571,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 572,
          "name": "E",
          "constraint": null,
          "default": null
        },
        {
          "id": 573,
          "name": "Success",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ],
      "construct": {
        "id": 352,
        "name": "constructor",
        "source": {
          "line": 28,
          "file": "Result.ts",
          "path": "packages/result/src/lib",
          "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L28"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 304,
        "accessibility": "private",
        "parameters": [
          {
            "id": 357,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": null,
              "name": "If",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 356,
                  "name": "Result.Success",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                },
                {
                  "kind": "reference",
                  "id": 354,
                  "name": "Result.T",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                },
                {
                  "kind": "reference",
                  "id": 355,
                  "name": "Result.E",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                }
              ]
            }
          },
          {
            "id": 358,
            "name": "success",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 356,
              "name": "Result.Success",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 566,
          "name": "[SuccessProperty]",
          "source": {
            "line": 26,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L26"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 304,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 356,
            "name": "Result.Success",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 565,
          "name": "[ValueProperty]",
          "source": {
            "line": 25,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L25"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 304,
          "accessibility": "private",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "If",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 356,
                "name": "Result.Success",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 354,
                "name": "Result.T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 355,
                "name": "Result.E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        },
        {
          "id": 359,
          "name": "__STATUS__",
          "source": {
            "line": 23,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L23"
          },
          "comment": {
            "description": "Branded value to ensure `Success` is typed correctly.",
            "blockTags": [],
            "modifierTags": [
              "@internal"
            ]
          },
          "parentId": 304,
          "accessibility": "protected",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 356,
            "name": "Result.Success",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 570,
          "name": "[toStringTag]",
          "source": {
            "line": 993,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L993"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "If",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 356,
                "name": "Result.Success",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "Ok"
              },
              {
                "kind": "literal",
                "value": "Err"
              }
            ]
          }
        }
      ],
      "methods": [
        {
          "id": 567,
          "name": "[iterator]",
          "source": {
            "line": 989,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L989"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 568,
              "name": "[iterator]",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": " - {@link IResult.iter}\n - {@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}\n"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 492,
          "name": "and",
          "source": {
            "line": 682,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L682"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 493,
              "name": "and",
              "comment": {
                "description": "Returns `result` if the result is `Ok`, otherwise returns the `Err` value of itself.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<string, string> = err('Late error');\nassert.equal(x.and(y), err('Early error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<string, string> = ok('Hello');\nassert.equal(x.and(y), ok('Hello'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 495,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 494,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 494,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 496,
          "name": "andThen",
          "source": {
            "line": 705,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L705"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 497,
              "name": "andThen",
              "comment": {
                "description": "Calls `cb` if the result is `Ok`, otherwise returns the `Err` value of self.\n\nThis function can be used for control flow based on `Result` values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nfunction fractionOf4(value: number) {\n  return value === 0 ? err('overflowed') : ok(4 / value);\n}\n\nassert.equal(ok(2).andThen(fractionOf4), ok(4));\nassert.equal(ok(0).andThen(fractionOf4), err('overflowed'));\nassert.equal(err('not a number').andThen(fractionOf4), err('not a number'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 499,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 501,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 502,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 498,
                          "name": "OutputResult",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 498,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 514,
          "name": "contains",
          "source": {
            "line": 792,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L792"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 515,
              "name": "contains",
              "comment": {
                "description": "Returns `true` if the result is an `Ok` and the given value strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.contains(2), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(3);\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.contains(2), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 517,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                },
                {
                  "id": 518,
                  "name": "value",
                  "comment": {
                    "description": "The value to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 516,
                    "name": "Value",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 610,
                  "name": "Ok",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 516,
                      "name": "Value",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "intrinsic",
                      "type": "any"
                    }
                  ]
                }
              }
            },
            {
              "id": 519,
              "name": "contains",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 520,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                },
                {
                  "id": 521,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            }
          ]
        },
        {
          "id": 522,
          "name": "containsErr",
          "source": {
            "line": 820,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L820"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 523,
              "name": "containsErr",
              "comment": {
                "description": "Returns `true` if the result is an `Err` and the given error strict equals it.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.containsErr('Some error message'), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some other error message');\nassert.equal(x.containsErr('Some error message'), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 524,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                },
                {
                  "id": 525,
                  "name": "error",
                  "comment": {
                    "description": "The error to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 355,
                    "name": "Result.E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "literal",
                "value": "false"
              }
            },
            {
              "id": 526,
              "name": "containsErr",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 528,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                },
                {
                  "id": 529,
                  "name": "error",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 527,
                    "name": "Value",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 613,
                  "name": "Err",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 527,
                      "name": "Value",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "intrinsic",
                      "type": "any"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 542,
          "name": "eq",
          "source": {
            "line": 918,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L918"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 543,
              "name": "eq",
              "comment": {
                "description": "Checks whether or not `other` equals with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 547,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 544,
                        "name": "OtherValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 545,
                        "name": "OtherError",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 546,
                        "name": "OtherSuccess",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 304,
                  "name": "Result",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 544,
                      "name": "OtherValue",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 545,
                      "name": "OtherError",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 546,
                      "name": "OtherSuccess",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 392,
          "name": "err",
          "source": {
            "line": 168,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L168"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 393,
              "name": "err",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<E>`.\n\nConverts itself into an `Option<E>`, and discarding the successful value, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.err(), none);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.err(), 'Some error message');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 469,
          "name": "expect",
          "source": {
            "line": 479,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L479"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 470,
              "name": "expect",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the given message and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.expect('Whoops!'), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.expect('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 471,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 472,
          "name": "expectErr",
          "source": {
            "line": 507,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L507"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 473,
              "name": "expectErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the given message and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.expectErr('Whoops!'), {\n  name: 'ResultError',\n  message: 'Whoops',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.expectErr('Whoops!'), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 474,
                  "name": "message",
                  "comment": {
                    "description": "The message for the error.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "string"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "reference",
                    "id": 355,
                    "name": "Result.E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 534,
          "name": "flatten",
          "source": {
            "line": 870,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L870"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 535,
              "name": "flatten",
              "comment": {
                "description": "Converts from `Result<Result<T, E>, E>` to `Result<T, E>`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(ok('Hello'));\nassert.equal(x.flatten(), ok('Hello'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = ok(err(6));\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Result<string, number>, number> = err(6);\nassert.equal(x.flatten(), err(6));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.flatten}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 537,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 536,
                        "name": "InnerResult",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 356,
                        "name": "Result.Success",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 536,
                    "name": "InnerResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 443,
          "name": "inspect",
          "source": {
            "line": 354,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L354"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 444,
              "name": "inspect",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspect(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspect(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 445,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 447,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 448,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 449,
          "name": "inspectAsync",
          "source": {
            "line": 377,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L377"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 450,
              "name": "inspectAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained value (if `Ok`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspect} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectAsync(console.log);\n// Logs: 2\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 451,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 453,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 454,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 356,
                        "name": "Result.Success",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 455,
          "name": "inspectErr",
          "source": {
            "line": 400,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L400"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 456,
              "name": "inspectErr",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`).",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErrAsync} for the awaitable version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nok(2).inspectErr(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nerr('Some error message').inspectErr(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.inspect_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 457,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 459,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 460,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "this"
              }
            }
          ]
        },
        {
          "id": 461,
          "name": "inspectErrAsync",
          "source": {
            "line": 423,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L423"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 462,
              "name": "inspectErrAsync",
              "comment": {
                "description": "Calls the provided closure with a reference to the contained error (if `Err`) and awaits it.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link inspectErr} for the sync version."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait ok(2).inspectErrAsync(console.log);\n// Doesn't log\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nawait err('Some error message').inspectErrAsync(console.log);\n// Logs: Some error message\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 463,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 465,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 466,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "intrinsic",
                          "type": "unknown"
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 356,
                        "name": "Result.Success",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 538,
          "name": "intoOkOrErr",
          "source": {
            "line": 890,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L890"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 539,
              "name": "intoOkOrErr",
              "comment": {
                "description": "Returns the `Ok` value if self is `Ok`, and the `Err` value if self is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = ok(3);\nassert.equal(x.intoOkOrErr(), 3);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nlet x: Result<number, number> = err(4);\nassert.equal(x.intoOkOrErr(), 4);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.into_ok_or_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 355,
                    "name": "Result.E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 540,
          "name": "intoPromise",
          "source": {
            "line": 905,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L905"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 541,
              "name": "intoPromise",
              "comment": {
                "description": "Returns a `Promise` object with the awaited value (if `Ok`) or the awaited error (if `Err`).",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nlet x = ok(Promise.resolve(3));\nassert.equal(await x.intoPromise(), ok(3));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "Promise",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 610,
                        "name": "Ok",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "Awaited",
                            "packageName": "typescript",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 354,
                                "name": "Result.T",
                                "packageName": "@sapphire/result",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "Promise",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 613,
                        "name": "Err",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "Awaited",
                            "packageName": "typescript",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 355,
                                "name": "Result.E",
                                "packageName": "@sapphire/result",
                                "packageVersion": null,
                                "typeArguments": []
                              }
                            ]
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 375,
          "name": "isErr",
          "source": {
            "line": 96,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L96"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 376,
              "name": "isErr",
              "comment": {
                "description": "Returns `true` if the result is `Err`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isErr(), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isErr(), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 613,
                  "name": "Err",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 355,
                      "name": "Result.E",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 354,
                      "name": "Result.T",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 377,
          "name": "isErrAnd",
          "source": {
            "line": 122,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L122"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 378,
              "name": "isErrAnd",
              "comment": {
                "description": "Returns `true` if the result is `Err` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new Error('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err(new TypeError('Some error message'));\nassert.equal(x.isErrAnd((error) => error instanceof TypeError), true);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 380,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 382,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 383,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "predicate",
                          "asserts": false,
                          "name": "error",
                          "type": {
                            "kind": "reference",
                            "id": 379,
                            "name": "R",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 613,
                  "name": "Err",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 379,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 354,
                      "name": "Result.T",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            },
            {
              "id": 384,
              "name": "isErrAnd",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 386,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 388,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 389,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 385,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": 613,
                      "name": "Err",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 355,
                          "name": "Result.E",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        {
                          "kind": "reference",
                          "id": 354,
                          "name": "Result.T",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 385,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 360,
          "name": "isOk",
          "source": {
            "line": 49,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L49"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 361,
              "name": "isOk",
              "comment": {
                "description": "Returns `true` if the result is `Ok`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(-3);\nassert.equal(x.isOk(), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOk(), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 610,
                  "name": "Ok",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 354,
                      "name": "Result.T",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 355,
                      "name": "Result.E",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 362,
          "name": "isOkAnd",
          "source": {
            "line": 74,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L74"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 363,
              "name": "isOkAnd",
              "comment": {
                "description": "Returns `true` if the result is `Ok` and the value inside of it matches a predicate.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.isOkAnd((value) => value > 1), true);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(0);\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.isOkAnd((value) => value > 1), false);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok_and}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 365,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 367,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 368,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "predicate",
                          "asserts": false,
                          "name": "value",
                          "type": {
                            "kind": "reference",
                            "id": 364,
                            "name": "R",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          }
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "reference",
                  "id": 610,
                  "name": "Ok",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 364,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 355,
                      "name": "Result.E",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            },
            {
              "id": 369,
              "name": "isOkAnd",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 371,
                  "name": "cb",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 373,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 374,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 370,
                          "name": "R",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "this",
                "type": {
                  "kind": "intersection",
                  "types": [
                    {
                      "kind": "reference",
                      "id": 610,
                      "name": "Ok",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 354,
                          "name": "Result.T",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        {
                          "kind": "reference",
                          "id": 355,
                          "name": "Result.E",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    {
                      "kind": "reference",
                      "id": 370,
                      "name": "R",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 467,
          "name": "iter",
          "source": {
            "line": 452,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L452"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 468,
              "name": "iter",
              "comment": {
                "description": "Returns an iterator over the possibly contained value.\n\nThe iterator yields one value if the result is `Ok`, otherwise none.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(7);\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Logs 7\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Nothing!');\nfor (const value of x.iter()) {\n  console.log(value);\n}\n// Doesn't log\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.iter}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Generator",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 394,
          "name": "map",
          "source": {
            "line": 190,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L190"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 395,
              "name": "map",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.map((value) => value * 2), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.map((value) => value * 2), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 397,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 399,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 400,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 396,
                          "name": "OutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 396,
                        "name": "OutputValue",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 429,
          "name": "mapErr",
          "source": {
            "line": 300,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L300"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 430,
              "name": "mapErr",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErr((error) => error.message), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErr((error) => error.message), err('Some error message'));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 432,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 434,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 435,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 431,
                          "name": "OutputError",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 431,
                        "name": "OutputError",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 436,
          "name": "mapErrInto",
          "source": {
            "line": 332,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L332"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 437,
              "name": "mapErrInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value\nuntouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\nUnlike {@link mapErr}, this method does not wrap the returned value inside `Err`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = ok(2);\nassert.equal(x.mapErrInto((error) => err(error.message)), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => err(error.message)), err('Some error message'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, Error> = err(new Error('Some error message'));\nassert.equal(x.mapErrInto((error) => ok(4)), ok(4));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 439,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 441,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 442,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 438,
                          "name": "OutputResult",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 438,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 401,
          "name": "mapInto",
          "source": {
            "line": 223,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L223"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 402,
              "name": "mapInto",
              "comment": {
                "description": "Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Ok` value, leaving an `Err` value\nuntouched.\n\nUnlike {@link map}, this method does not wrap the returned value inside `Ok`, but instead, it returns the\nreturned value.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.mapInto((value) => ok(value * value)), ok(4));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(0);\nassert.equal(\n  x.mapInto((value) => (value === 0 ? err('zero is not divisible') : ok(1 / value))),\n  err('zero is not divisible')\n);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.mapInto((value) => ok(4)), err('Some error message'));\n```"
                  },
                  {
                    "name": "note",
                    "text": "This is an extension not supported in Rust"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 404,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 406,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 407,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 403,
                          "name": "OutputResult",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 403,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 613,
                    "name": "Err",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 408,
          "name": "mapOr",
          "source": {
            "line": 248,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L248"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 409,
              "name": "mapOr",
              "comment": {
                "description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok('hello');\nassert.equal(x.mapOr(42, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Some error message');\nassert.equal(x.mapOr(42, (value) => value.length), 42);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 412,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value to use.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 411,
                    "name": "DefaultOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                },
                {
                  "id": 413,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 415,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 416,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 410,
                          "name": "MappedOutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 410,
                    "name": "MappedOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 411,
                    "name": "DefaultOutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 417,
          "name": "mapOrElse",
          "source": {
            "line": 276,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L276"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 418,
              "name": "mapOrElse",
              "comment": {
                "description": "Maps a `Result<T, E>` to `U` by applying fallback function default to a contained `Err` value, or function `cb`\nto a contained `Ok` value.\n\nThis function can be used to unpack a successful result while handling an error.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = ok('hello');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 5);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<string, string> = err('Some error message');\nassert.equal(x.mapOrElse((error) => error.length, (value) => value.length), 18);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 421,
                  "name": "op",
                  "comment": {
                    "description": "The predicate that is run on `Err`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 423,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 424,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 420,
                          "name": "OutputError",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                },
                {
                  "id": 425,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate that is run on `Ok`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 427,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 428,
                            "name": "value",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 354,
                              "name": "Result.T",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 419,
                          "name": "OutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 419,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 420,
                    "name": "OutputError",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 551,
          "name": "match",
          "source": {
            "line": 956,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L956"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 552,
              "name": "match",
              "comment": {
                "description": "Runs `ok` function if self is `Ok`, otherwise runs `err` function.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = ok(4).match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 4);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst result = err('Hello').match({\n  ok: (v) => v,\n  err: () => 0\n});\nassert.equal(result, 0);\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 555,
                  "name": "branches",
                  "comment": {
                    "description": "The branches to match.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": null,
                    "methods": [
                      {
                        "id": 561,
                        "signatures": [
                          {
                            "id": 562,
                            "name": "err",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 563,
                                "name": "this",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 613,
                                  "name": "Err",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 355,
                                      "name": "Result.E",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "intrinsic",
                                      "type": "any"
                                    }
                                  ]
                                }
                              },
                              {
                                "id": 564,
                                "name": "error",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 355,
                                  "name": "Result.E",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 554,
                              "name": "ErrValue",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ]
                      },
                      {
                        "id": 557,
                        "signatures": [
                          {
                            "id": 558,
                            "name": "ok",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [
                              {
                                "id": 559,
                                "name": "this",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 610,
                                  "name": "Ok",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 354,
                                      "name": "Result.T",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "intrinsic",
                                      "type": "any"
                                    }
                                  ]
                                }
                              },
                              {
                                "id": 560,
                                "name": "value",
                                "comment": {
                                  "description": null,
                                  "blockTags": [],
                                  "modifierTags": []
                                },
                                "rest": false,
                                "optional": false,
                                "type": {
                                  "kind": "reference",
                                  "id": 354,
                                  "name": "Result.T",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                }
                              }
                            ],
                            "returnType": {
                              "kind": "reference",
                              "id": 553,
                              "name": "OkValue",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 553,
                    "name": "OkValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 554,
                    "name": "ErrValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 548,
          "name": "ne",
          "source": {
            "line": 931,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L931"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 549,
              "name": "ne",
              "comment": {
                "description": "Checks whether or not `other` doesn't equal with self.",
                "blockTags": [
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#method.ne}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 550,
                  "name": "other",
                  "comment": {
                    "description": "The other result to compare.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 390,
          "name": "ok",
          "source": {
            "line": 146,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L146"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 391,
              "name": "ok",
              "comment": {
                "description": "Converts from `Result<T, E>` to `Option<T>`.\n\nConverts itself into an `Option<T>`, and discarding the error, if any.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nassert.equal(x.ok(), some(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Some error message');\nassert.equal(x.ok(), none);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.ok}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 275,
                    "name": "None",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 503,
          "name": "or",
          "source": {
            "line": 743,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L743"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 504,
              "name": "or",
              "comment": {
                "description": "Return `result` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nArguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended\nto use {@link orElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = ok(2);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Early error');\nconst y: Result<number, string> = err('Late error');\nassert.equal(x.or(y), err('Late error'));\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(2);\nconst y: Result<number, string> = ok(100);\nassert.equal(x.or(y), ok(2));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 506,
                  "name": "result",
                  "comment": {
                    "description": "The result to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 505,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 505,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 507,
          "name": "orElse",
          "source": {
            "line": 766,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L766"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 508,
              "name": "orElse",
              "comment": {
                "description": "Calls `cb` if the result is `Err`, otherwise returns the `Ok` value of self.\n\nThis function can be used for control flow based on result values.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst square = (x: number): Result<number, string> => ok(x * x);\nconst wrapErr = (x: number): Result<number, string> => err(x);\n\nassert.equal(ok(2).orElse(square).orElse(square), ok(2));\nassert.equal(ok(2).orElse(wrapErr).orElse(square), ok(2));\nassert.equal(err(3).orElse(square).orElse(wrapErr), ok(9));\nassert.equal(err(3).orElse(wrapErr).orElse(wrapErr), err(3));\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 510,
                  "name": "cb",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 512,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 513,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 509,
                          "name": "OutputResult",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 610,
                    "name": "Ok",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 354,
                        "name": "Result.T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 509,
                    "name": "OutputResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 530,
          "name": "transpose",
          "source": {
            "line": 840,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L840"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 531,
              "name": "transpose",
              "comment": {
                "description": "Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n\n`ok(none)` will be mapped to `none`. `ok(some(v))` and `err(e)` will be mapped to `some(ok(v))` and `some(err(e))`.",
                "blockTags": [
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<Option<number>, Error> = ok(some(5));\nconst y: Option<Result<number, Error>> = some(ok(5));\nassert.equal(x.transpose(), y);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 533,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 1,
                        "name": "Option",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 532,
                            "name": "InnerValue",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "intrinsic",
                            "type": "boolean"
                          }
                        ]
                      },
                      {
                        "kind": "reference",
                        "id": 355,
                        "name": "Result.E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 356,
                        "name": "Result.Success",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 1,
                    "name": "Option",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 610,
                        "name": "Ok",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 532,
                            "name": "InnerValue",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      },
                      {
                        "kind": "intrinsic",
                        "type": "boolean"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 273,
                    "name": "Some",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 613,
                        "name": "Err",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 355,
                            "name": "Result.E",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "intrinsic",
                            "type": "any"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 475,
          "name": "unwrap",
          "source": {
            "line": 538,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L538"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 476,
              "name": "unwrap",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws a {@link ResultError} with the message, and the content of the `Err`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrap(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrap(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 477,
          "name": "unwrapErr",
          "source": {
            "line": 569,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L569"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 478,
              "name": "unwrapErr",
              "comment": {
                "description": "Returns the contained `Err` value.\n\nIf the value is an `Ok`, it throws a {@link ResultError} with the message, and the content of the `Ok`.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.throws(() => x.unwrapErr(), {\n  name: 'ResultError',\n  message: 'Unwrap failed',\n  value: 2\n});\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.equal(x.unwrapErr(), 'Emergency failure');\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  },
                  {
                    "kind": "reference",
                    "id": 355,
                    "name": "Result.E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 479,
          "name": "unwrapOr",
          "source": {
            "line": 599,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L599"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 480,
              "name": "unwrapOr",
              "comment": {
                "description": "Returns the contained `Ok` value or the provided default.\n\nArguments passed to `unwrapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use {@link unwrapOrElse}, which is lazily evaluated.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = ok(9);\nassert.equal(x.unwrapOr(2), 9);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x: Result<number, string> = err('Error');\nassert.equal(x.unwrapOr(2), 2);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 482,
                  "name": "defaultValue",
                  "comment": {
                    "description": "The default value.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 481,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 481,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 483,
          "name": "unwrapOrElse",
          "source": {
            "line": 622,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L622"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 484,
              "name": "unwrapOrElse",
              "comment": {
                "description": "Returns the contained `Ok` value or computes it from a closure.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapRaw}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst count = (x: string) => x.length;\n\nassert.equal(ok(2).unwrapOrElse(count), 2);\nassert.equal(err('hello').unwrapOrElse(count), 5);\n```"
                  },
                  {
                    "name": "see",
                    "text": "{@link https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 486,
                  "name": "op",
                  "comment": {
                    "description": "The predicate.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reflection",
                    "properties": null,
                    "signatures": [
                      {
                        "id": 488,
                        "name": "__type",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "typeParameters": [],
                        "parameters": [
                          {
                            "id": 489,
                            "name": "error",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "rest": false,
                            "optional": false,
                            "type": {
                              "kind": "reference",
                              "id": 355,
                              "name": "Result.E",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": []
                            }
                          }
                        ],
                        "returnType": {
                          "kind": "reference",
                          "id": 485,
                          "name": "OutputValue",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      }
                    ],
                    "methods": null
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 485,
                    "name": "OutputValue",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 490,
          "name": "unwrapRaw",
          "source": {
            "line": 650,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L650"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 491,
              "name": "unwrapRaw",
              "comment": {
                "description": "Returns the contained `Ok` value.\n\nIf the value is an `Err`, it throws the contained error.",
                "blockTags": [
                  {
                    "name": "seealso",
                    "text": "{@link unwrap}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOr}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapOrElse}"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link unwrapErr}"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = ok(2);\nassert.equal(x.unwrapRaw(), 2);\n```"
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst x = err('Emergency failure');\nassert.throws(() => x.unwrapRaw(), {\n  name: 'Error',\n  message: 'Unwrap failed',\n  value: 'Emergency failure'\n});\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "If",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "Result.Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 354,
                    "name": "Result.T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "never"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 349,
          "name": "[hasInstance]",
          "source": {
            "line": 1023,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1023"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 350,
              "name": "[hasInstance]",
              "comment": {
                "description": "Checks if the `instance` object is an instance of `Result`, or if it is a `Result`-like object. This override\nexists to interoperate with other versions of this class, such as the one coming from another version of this\nlibrary or from a different build.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "Whether or not the instance is a `Result`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Result } from '@sapphire/result';\nconst { ok } = require('@sapphire/result');\n\nok(2) instanceof Result; // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 351,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 339,
          "name": "all",
          "source": {
            "line": 1105,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1105"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 340,
              "name": "all",
              "comment": {
                "description": "Creates an {@link Ok} that is the combination of all collected {@link Ok} values as an array, or the first\n{@link Err} encountered.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 342,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 343,
                  "name": "results",
                  "comment": {
                    "description": "An array of {@link Result}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 341,
                    "name": "Entries",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 304,
                "name": "Result",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 590,
                    "name": "Result.UnwrapOkArray",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 341,
                        "name": "Entries",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 592,
                      "name": "Result.UnwrapErrArray",
                      "packageName": "@sapphire/result",
                      "packageVersion": null,
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 341,
                          "name": "Entries",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        }
                      ]
                    },
                    "indexType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 344,
          "name": "any",
          "source": {
            "line": 1126,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1126"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 345,
              "name": "any",
              "comment": {
                "description": "Returns the first encountered {@link Ok}, or an {@link Err} that is the combination of all collected error values.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "A new {@link Result}."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 347,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 348,
                  "name": "results",
                  "comment": {
                    "description": "An array of {@link Result}s.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 346,
                    "name": "Entries",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 304,
                "name": "Result",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 586,
                    "name": "Result.UnwrapOk",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "indexedAccess",
                        "objectType": {
                          "kind": "reference",
                          "id": 346,
                          "name": "Entries",
                          "packageName": "@sapphire/result",
                          "packageVersion": null,
                          "typeArguments": []
                        },
                        "indexType": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 592,
                    "name": "Result.UnwrapErrArray",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 346,
                        "name": "Entries",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 311,
          "name": "err",
          "source": {
            "line": 1003,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1003"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 312,
              "name": "err",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 315,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 316,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 313,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 613,
                "name": "Err",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 313,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 314,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 323,
          "name": "from",
          "source": {
            "line": 1072,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1072"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 324,
              "name": "from",
              "comment": {
                "description": "Creates a {@link Result} out of a callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 327,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 328,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": 606,
                        "name": "ResultResolvable",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 325,
                            "name": "T",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "reference",
                            "id": 326,
                            "name": "E",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": []
                          },
                          {
                            "kind": "intrinsic",
                            "type": "boolean"
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 330,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": 606,
                              "name": "ResultResolvable",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 325,
                                  "name": "T",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                },
                                {
                                  "kind": "reference",
                                  "id": 326,
                                  "name": "E",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": []
                                },
                                {
                                  "kind": "intrinsic",
                                  "type": "boolean"
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 304,
                "name": "Result",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 325,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 326,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 331,
          "name": "fromAsync",
          "source": {
            "line": 1086,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1086"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 332,
              "name": "fromAsync",
              "comment": {
                "description": "Creates a {@link Result} out of a promise or async callback.",
                "blockTags": [
                  {
                    "name": "typeparam",
                    "text": "T The result's type."
                  },
                  {
                    "name": "typeparam",
                    "text": "E The error's type."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 335,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 336,
                  "name": "op",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "reference",
                        "id": null,
                        "name": "Awaitable",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": [
                          {
                            "kind": "reference",
                            "id": 606,
                            "name": "ResultResolvable",
                            "packageName": "@sapphire/result",
                            "packageVersion": null,
                            "typeArguments": [
                              {
                                "kind": "reference",
                                "id": 333,
                                "name": "T",
                                "packageName": "@sapphire/result",
                                "packageVersion": null,
                                "typeArguments": []
                              },
                              {
                                "kind": "reference",
                                "id": 334,
                                "name": "E",
                                "packageName": "@sapphire/result",
                                "packageVersion": null,
                                "typeArguments": []
                              },
                              {
                                "kind": "intrinsic",
                                "type": "boolean"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "reflection",
                        "properties": null,
                        "signatures": [
                          {
                            "id": 338,
                            "name": "__type",
                            "comment": {
                              "description": null,
                              "blockTags": [],
                              "modifierTags": []
                            },
                            "typeParameters": [],
                            "parameters": [],
                            "returnType": {
                              "kind": "reference",
                              "id": null,
                              "name": "Awaitable",
                              "packageName": "@sapphire/result",
                              "packageVersion": null,
                              "typeArguments": [
                                {
                                  "kind": "reference",
                                  "id": 606,
                                  "name": "ResultResolvable",
                                  "packageName": "@sapphire/result",
                                  "packageVersion": null,
                                  "typeArguments": [
                                    {
                                      "kind": "reference",
                                      "id": 333,
                                      "name": "T",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "reference",
                                      "id": 334,
                                      "name": "E",
                                      "packageName": "@sapphire/result",
                                      "packageVersion": null,
                                      "typeArguments": []
                                    },
                                    {
                                      "kind": "intrinsic",
                                      "type": "boolean"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "methods": null
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Promise",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 304,
                    "name": "Result",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 333,
                        "name": "T",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "reference",
                        "id": 334,
                        "name": "E",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      },
                      {
                        "kind": "intrinsic",
                        "type": "boolean"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 317,
          "name": "is",
          "source": {
            "line": 1043,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1043"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 318,
              "name": "is",
              "comment": {
                "description": null,
                "blockTags": [
                  {
                    "name": "deprecated",
                    "text": "Use {@link Result.isResult} instead.\n\nChecks if the `instance` object is an instance of `Result`, or if it is a `Result`-like object."
                  },
                  {
                    "name": "returns",
                    "text": "true if the instance is a `Result` or a `Result`-like object, false otherwise."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Result } from '@sapphire/result';\nconst { ok } = require('@sapphire/result');\n\nResult.isResult(ok(2)); // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 319,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "instance",
                "type": {
                  "kind": "reference",
                  "id": 581,
                  "name": "Result.Any",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 320,
          "name": "isResult",
          "source": {
            "line": 1061,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1061"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 321,
              "name": "isResult",
              "comment": {
                "description": "Checks if the `instance` object is an instance of `Result`, or if it is a `Result`-like object.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "true if the instance is a `Result` or a `Result`-like object, false otherwise."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nimport { Result } from '@sapphire/result';\nconst { ok } = require('@sapphire/result');\n\nResult.isResult(ok(2)); // true\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 322,
                  "name": "instance",
                  "comment": {
                    "description": "The instance to check.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "unknown"
                  }
                }
              ],
              "returnType": {
                "kind": "predicate",
                "asserts": false,
                "name": "instance",
                "type": {
                  "kind": "reference",
                  "id": 581,
                  "name": "Result.Any",
                  "packageName": "@sapphire/result",
                  "packageVersion": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        {
          "id": 305,
          "name": "ok",
          "source": {
            "line": 998,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L998"
          },
          "parentId": 304,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 306,
              "name": "ok",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 309,
                  "name": "this",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "void"
                  }
                },
                {
                  "id": 310,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": 307,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": 610,
                "name": "Ok",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 307,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 308,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": 625,
      "name": "ResultError",
      "source": {
        "line": 1,
        "file": "ResultError.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/ResultError.ts#L1"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": {
        "kind": "reference",
        "id": null,
        "name": "Error",
        "packageName": "typescript",
        "packageVersion": null,
        "typeArguments": []
      },
      "implementsType": [],
      "typeParameters": [
        {
          "id": 647,
          "name": "E",
          "constraint": null,
          "default": null
        }
      ],
      "construct": {
        "id": 636,
        "name": "constructor",
        "source": {
          "line": 4,
          "file": "ResultError.ts",
          "path": "packages/result/src/lib",
          "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/ResultError.ts#L4"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 625,
        "accessibility": "public",
        "parameters": [
          {
            "id": 639,
            "name": "message",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "intrinsic",
              "type": "string"
            }
          },
          {
            "id": 640,
            "name": "value",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "rest": false,
            "optional": false,
            "type": {
              "kind": "reference",
              "id": 638,
              "name": "ResultError.E",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            }
          }
        ]
      },
      "properties": [
        {
          "id": 646,
          "name": "cause",
          "source": {
            "line": 24,
            "file": "lib.es2022.error.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "unknown"
          }
        },
        {
          "id": 644,
          "name": "message",
          "source": {
            "line": 1077,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 645,
          "name": "stack",
          "source": {
            "line": 1078,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        },
        {
          "id": 641,
          "name": "value",
          "source": {
            "line": 2,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/ResultError.ts#L2"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 638,
            "name": "ResultError.E",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        },
        {
          "id": 630,
          "name": "prepareStackTrace",
          "source": {
            "line": 98,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": "Optional override for formatting stack traces",
            "blockTags": [
              {
                "name": "see",
                "text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
              }
            ],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": true,
          "type": {
            "kind": "reflection",
            "properties": null,
            "signatures": [
              {
                "id": 632,
                "name": "__type",
                "comment": {
                  "description": null,
                  "blockTags": [],
                  "modifierTags": []
                },
                "typeParameters": [],
                "parameters": [
                  {
                    "id": 633,
                    "name": "err",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "reference",
                      "id": null,
                      "name": "Error",
                      "packageName": "typescript",
                      "packageVersion": null,
                      "typeArguments": []
                    }
                  },
                  {
                    "id": 634,
                    "name": "stackTraces",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "rest": false,
                    "optional": false,
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "__global.NodeJS.CallSite",
                        "packageName": "@types/node",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "kind": "intrinsic",
                  "type": "any"
                }
              }
            ],
            "methods": null
          }
        },
        {
          "id": 635,
          "name": "stackTraceLimit",
          "source": {
            "line": 100,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "number"
          }
        },
        {
          "id": 643,
          "name": "name",
          "source": {
            "line": 9,
            "file": "ResultError.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/ResultError.ts#L9"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": false,
          "optional": false,
          "type": {
            "kind": "intrinsic",
            "type": "string"
          }
        }
      ],
      "methods": [
        {
          "id": 626,
          "name": "captureStackTrace",
          "source": {
            "line": 91,
            "file": "globals.d.ts",
            "path": "node_modules/@types/node",
            "url": null
          },
          "parentId": 625,
          "accessibility": "public",
          "abstract": false,
          "static": true,
          "signatures": [
            {
              "id": 627,
              "name": "captureStackTrace",
              "comment": {
                "description": "Create .stack property on a target object",
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 628,
                  "name": "targetObject",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": false,
                  "type": {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                },
                {
                  "id": 629,
                  "name": "constructorOpt",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Function",
                    "packageName": "typescript",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "void"
              }
            }
          ]
        }
      ]
    }
  ],
  "enums": [],
  "functions": [
    {
      "id": 600,
      "name": "err",
      "source": {
        "line": 1158,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1158"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 601,
          "name": "err",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 604,
              "name": "this",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "void"
              }
            },
            {
              "id": 605,
              "name": "value",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 313,
                "name": "E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 613,
            "name": "Err",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 313,
                "name": "E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 314,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 594,
      "name": "ok",
      "source": {
        "line": 1158,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1158"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 595,
          "name": "ok",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 598,
              "name": "this",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "void"
              }
            },
            {
              "id": 599,
              "name": "value",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 307,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 610,
            "name": "Ok",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 307,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 308,
                "name": "E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 264,
      "name": "some",
      "source": {
        "line": 1016,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1016"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 265,
          "name": "some",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 267,
              "name": "this",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "void"
              }
            },
            {
              "id": 268,
              "name": "value",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 5,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 273,
            "name": "Some",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 5,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [],
  "namespaces": [
    {
      "id": 251,
      "name": "Option",
      "source": {
        "line": 8,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L8"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "classes": [],
      "enums": [],
      "functions": [],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 256,
          "name": "Any",
          "source": {
            "line": 1008,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1008"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [],
          "type": {
            "kind": "reference",
            "id": 1,
            "name": "Option",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "any"
              }
            ]
          }
        },
        {
          "id": 254,
          "name": "None",
          "source": {
            "line": 1007,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1007"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 255,
              "name": "T",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          ],
          "type": {
            "kind": "reference",
            "id": 1,
            "name": "Option",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 255,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "false"
              }
            ]
          }
        },
        {
          "id": 257,
          "name": "Resolvable",
          "source": {
            "line": 1009,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1009"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 258,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 259,
              "name": "Exists",
              "constraint": {
                "kind": "intrinsic",
                "type": "boolean"
              },
              "default": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 258,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "null"
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              },
              {
                "kind": "reference",
                "id": 1,
                "name": "Option",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 258,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 259,
                    "name": "Exists",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 252,
          "name": "Some",
          "source": {
            "line": 1006,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1006"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 253,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "type": {
            "kind": "reference",
            "id": 1,
            "name": "Option",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 253,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "true"
              }
            ]
          }
        },
        {
          "id": 260,
          "name": "UnwrapSome",
          "source": {
            "line": 1010,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1010"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 261,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 277,
                "name": "AnyOption",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 261,
              "name": "T",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 252,
              "name": "Option.Some",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 262,
          "name": "UnwrapSomeArray",
          "source": {
            "line": 1011,
            "file": "Option.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1011"
          },
          "namespaceParentId": 251,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 263,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 277,
                        "name": "AnyOption",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 263,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 260,
              "name": "Option.UnwrapSome",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 263,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ],
      "variables": []
    },
    {
      "id": 574,
      "name": "Result",
      "source": {
        "line": 18,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L18"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "classes": [],
      "enums": [],
      "functions": [],
      "interfaces": [],
      "namespaces": [],
      "typeAliases": [
        {
          "id": 581,
          "name": "Any",
          "source": {
            "line": 1145,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1145"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [],
          "type": {
            "kind": "reference",
            "id": 304,
            "name": "Result",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "any"
              },
              {
                "kind": "intrinsic",
                "type": "any"
              }
            ]
          }
        },
        {
          "id": 578,
          "name": "Err",
          "source": {
            "line": 1144,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1144"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 579,
              "name": "E",
              "constraint": null,
              "default": null
            },
            {
              "id": 580,
              "name": "T",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          ],
          "type": {
            "kind": "reference",
            "id": 304,
            "name": "Result",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 580,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 579,
                "name": "E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "false"
              }
            ]
          }
        },
        {
          "id": 575,
          "name": "Ok",
          "source": {
            "line": 1143,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1143"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 576,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 577,
              "name": "E",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          ],
          "type": {
            "kind": "reference",
            "id": 304,
            "name": "Result",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "reference",
                "id": 576,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 577,
                "name": "E",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "literal",
                "value": "true"
              }
            ]
          }
        },
        {
          "id": 582,
          "name": "Resolvable",
          "source": {
            "line": 1146,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1146"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 583,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 584,
              "name": "E",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "any"
              }
            },
            {
              "id": 585,
              "name": "Success",
              "constraint": {
                "kind": "intrinsic",
                "type": "boolean"
              },
              "default": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ],
          "type": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 583,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 304,
                "name": "Result",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 583,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 584,
                    "name": "E",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 585,
                    "name": "Success",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 588,
          "name": "UnwrapErr",
          "source": {
            "line": 1148,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1148"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 589,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 616,
                "name": "AnyResult",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 589,
              "name": "T",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 578,
              "name": "Result.Err",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 592,
          "name": "UnwrapErrArray",
          "source": {
            "line": 1153,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1153"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 593,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 616,
                        "name": "AnyResult",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 593,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 588,
              "name": "Result.UnwrapErr",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 593,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        },
        {
          "id": 586,
          "name": "UnwrapOk",
          "source": {
            "line": 1147,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1147"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 587,
              "name": "T",
              "constraint": {
                "kind": "reference",
                "id": 616,
                "name": "AnyResult",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 587,
              "name": "T",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": 575,
              "name": "Result.Ok",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "S"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "S",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": []
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        },
        {
          "id": 590,
          "name": "UnwrapOkArray",
          "source": {
            "line": 1150,
            "file": "Result.ts",
            "path": "packages/result/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1150"
          },
          "namespaceParentId": 574,
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "external": false,
          "typeParameters": [
            {
              "id": 591,
              "name": "T",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": 616,
                        "name": "AnyResult",
                        "packageName": "@sapphire/result",
                        "packageVersion": null,
                        "typeArguments": []
                      }
                    }
                  },
                  {
                    "kind": "tuple",
                    "types": []
                  }
                ]
              },
              "default": null
            }
          ],
          "type": {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 591,
                "name": "T",
                "packageName": "@sapphire/result",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "reference",
              "id": 586,
              "name": "Result.UnwrapOk",
              "packageName": "@sapphire/result",
              "packageVersion": null,
              "typeArguments": [
                {
                  "kind": "indexedAccess",
                  "objectType": {
                    "kind": "reference",
                    "id": 591,
                    "name": "T",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  },
                  "indexType": {
                    "kind": "reference",
                    "id": null,
                    "name": "P",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              ]
            },
            "readonly": "-",
            "optional": null
          }
        }
      ],
      "variables": []
    }
  ],
  "typeAliases": [
    {
      "id": 277,
      "name": "AnyOption",
      "source": {
        "line": 1028,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1028"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "reference",
        "id": 256,
        "name": "Option.Any",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": []
      }
    },
    {
      "id": 616,
      "name": "AnyResult",
      "source": {
        "line": 1168,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1168"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [],
      "type": {
        "kind": "reference",
        "id": 581,
        "name": "Result.Any",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": []
      }
    },
    {
      "id": 613,
      "name": "Err",
      "source": {
        "line": 1167,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1167"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 614,
          "name": "E",
          "constraint": null,
          "default": null
        },
        {
          "id": 615,
          "name": "T",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 578,
        "name": "Result.Err",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 614,
            "name": "E",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 615,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 275,
      "name": "None",
      "source": {
        "line": 1027,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1027"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 276,
          "name": "T",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 254,
        "name": "Option.None",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 276,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 610,
      "name": "Ok",
      "source": {
        "line": 1166,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1166"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 611,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 612,
          "name": "E",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 575,
        "name": "Result.Ok",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 611,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 612,
            "name": "E",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 270,
      "name": "OptionResolvable",
      "source": {
        "line": 1024,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1024"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 271,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 272,
          "name": "Exists",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 257,
        "name": "Option.Resolvable",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 271,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 272,
            "name": "Exists",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 606,
      "name": "ResultResolvable",
      "source": {
        "line": 1164,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1164"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 607,
          "name": "T",
          "constraint": null,
          "default": null
        },
        {
          "id": 608,
          "name": "E",
          "constraint": null,
          "default": {
            "kind": "intrinsic",
            "type": "any"
          }
        },
        {
          "id": 609,
          "name": "Success",
          "constraint": {
            "kind": "intrinsic",
            "type": "boolean"
          },
          "default": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ],
      "type": {
        "kind": "reference",
        "id": 582,
        "name": "Result.Resolvable",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 607,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 608,
            "name": "E",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          {
            "kind": "reference",
            "id": 609,
            "name": "Success",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 273,
      "name": "Some",
      "source": {
        "line": 1026,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1026"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 274,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 252,
        "name": "Option.Some",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 274,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 619,
      "name": "UnwrapErr",
      "source": {
        "line": 1171,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1171"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 620,
          "name": "T",
          "constraint": {
            "kind": "reference",
            "id": 616,
            "name": "AnyResult",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 588,
        "name": "Result.UnwrapErr",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 620,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 623,
      "name": "UnwrapErrArray",
      "source": {
        "line": 1174,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1174"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 624,
          "name": "T",
          "constraint": {
            "kind": "union",
            "types": [
              {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 616,
                    "name": "AnyResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              },
              {
                "kind": "tuple",
                "types": []
              }
            ]
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 592,
        "name": "Result.UnwrapErrArray",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 624,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 617,
      "name": "UnwrapOk",
      "source": {
        "line": 1170,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1170"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 618,
          "name": "T",
          "constraint": {
            "kind": "reference",
            "id": 616,
            "name": "AnyResult",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 586,
        "name": "Result.UnwrapOk",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 618,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 621,
      "name": "UnwrapOkArray",
      "source": {
        "line": 1173,
        "file": "Result.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Result.ts#L1173"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 622,
          "name": "T",
          "constraint": {
            "kind": "union",
            "types": [
              {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 616,
                    "name": "AnyResult",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              },
              {
                "kind": "tuple",
                "types": []
              }
            ]
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 590,
        "name": "Result.UnwrapOkArray",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 622,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 278,
      "name": "UnwrapSome",
      "source": {
        "line": 1030,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1030"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 279,
          "name": "T",
          "constraint": {
            "kind": "reference",
            "id": 277,
            "name": "AnyOption",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 260,
        "name": "Option.UnwrapSome",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 279,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    },
    {
      "id": 280,
      "name": "UnwrapSomeArray",
      "source": {
        "line": 1031,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1031"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 281,
          "name": "T",
          "constraint": {
            "kind": "union",
            "types": [
              {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 277,
                    "name": "AnyOption",
                    "packageName": "@sapphire/result",
                    "packageVersion": null,
                    "typeArguments": []
                  }
                }
              },
              {
                "kind": "tuple",
                "types": []
              }
            ]
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": 262,
        "name": "Option.UnwrapSomeArray",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "reference",
            "id": 281,
            "name": "T",
            "packageName": "@sapphire/result",
            "packageVersion": null,
            "typeArguments": []
          }
        ]
      }
    }
  ],
  "variables": [
    {
      "id": 269,
      "name": "none",
      "source": {
        "line": 1016,
        "file": "Option.ts",
        "path": "packages/result/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/4b7c3e6c354797a2f166a5b97cadd33f1a4a11ca/packages/result/src/lib/Option.ts#L1016"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "type": {
        "kind": "reference",
        "id": 1,
        "name": "Option",
        "packageName": "@sapphire/result",
        "packageVersion": null,
        "typeArguments": [
          {
            "kind": "intrinsic",
            "type": "any"
          },
          {
            "kind": "literal",
            "value": "false"
          }
        ]
      }
    }
  ]
}