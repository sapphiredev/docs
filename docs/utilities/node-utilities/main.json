{
  "typeDocJsonParserVersion": "10.2.0",
  "id": 0,
  "name": "@sapphire/node-utilities",
  "version": "1.0.2",
  "dependencies": {},
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://raw.githubusercontent.com/sapphiredev/assets/main/banners/SapphireCommunity.png)\n\n# @sapphire/node-utilities\n\n**Common NodeJS utilities for the Sapphire Community.**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/node-utilities?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/node-utilities)\n[![npm](https://img.shields.io/npm/v/@sapphire/node-utilities?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/node-utilities)\n\n</div>\n\n**Table of Contents**\n\n-   [Features](#features)\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [`findFilesRecursively`](#findfilesrecursively)\n-   [Buy us some doughnuts](#buy-us-some-doughnuts)\n-   [Contributors](#contributors)\n\n## Features\n\n-   Written in TypeScript\n-   Offers CommonJS, and ESM bundles\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/node-utilities\n```\n\n## Usage\n\n### `findFilesRecursively`\n\nRecursively searches for files in a directory and returns an [`AsyncIterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) of the found paths.\n\n```ts\nimport { findFilesRecursively } from '@sapphire/node-utilities';\n\nconst files = findFilesRecursively('./src');\nfor await (const file of files) {\n\tconsole.log(file);\n}\n\n// This, for example, could log:\n// /root/src/index.js\n// /root/src/database.csv\n// /root/src/lib/utils/constants.json\n\n// Alternate forms:\nconst files = findFilesRecursivelyStringStartsWith('./src', 'index'); // filename starts with \"index\"\nconst files = findFilesRecursivelyStringEndsWith('./src', '.js'); // filename ends with \".js\"\nconst files = findFilesRecursivelyStringIncludes('./src', 'database'); // filename includes \"database\"\nconst files = findFilesRecursivelyRegex('./src', /\\.[tj]sx?$/); // filename matches the regex\n```\n\n---\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/node-utilities@1.0.2](https://github.com/sapphiredev/utilities/compare/@sapphire/node-utilities@1.0.2...@sapphire/node-utilities@1.0.2) - (2024-01-19)\n\n## 🐛 Bug Fixes\n\n- Fixed commonjs typings export mapping (#707) ([216ff02](https://github.com/sapphiredev/utilities/commit/216ff0260d63a9590357f9a5069f1ae2b34eaf5d))\n\n# [@sapphire/node-utilities@1.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/node-utilities@1.0.1...@sapphire/node-utilities@1.0.1) - (2023-12-04)\n\n## 🐛 Bug Fixes\n\n- **node-utilities:** Properly split CJS and ESM ([360fe19](https://github.com/sapphiredev/utilities/commit/360fe1983e7db6d6a61c5f79ac399f74f9993410))\n- Update export mapping for proper ESM/CJS split ([dd0cff8](https://github.com/sapphiredev/utilities/commit/dd0cff8e9b03a15812f25f7a1180501a92422629))\n- **deps:** Update all non-major dependencies (#607) ([9cc8bd0](https://github.com/sapphiredev/utilities/commit/9cc8bd0d4b5d650deab2c913e6c3d713861bae28))\n- **deps:** Update all non-major dependencies (#577) ([291dd67](https://github.com/sapphiredev/utilities/commit/291dd6783e57d8f075ce566218ba076ef6c4bbbd))\n- **deps:** Update all non-major dependencies (#545) ([40ca040](https://github.com/sapphiredev/utilities/commit/40ca040a21d8a0949682051a3a974538183a400e))\n- **deps:** Update all non-major dependencies (#544) ([cc78f17](https://github.com/sapphiredev/utilities/commit/cc78f17390c7f3db08af92bf46a5a70a9c11dd5f))\n- **deps:** Update all non-major dependencies (#532) ([8033d1f](https://github.com/sapphiredev/utilities/commit/8033d1ff7a5a1974134c61f424f171cccb2915e1))\n- **deps:** Update all non-major dependencies (#514) ([21b07d5](https://github.com/sapphiredev/utilities/commit/21b07d5db529a0d982647a60de98e46f36f1ac93))\n- **deps:** Update all non-major dependencies (#505) ([6178296](https://github.com/sapphiredev/utilities/commit/617829649e1e4deeee02b14533b5377cd5bc1fb3))\n\n## 📝 Documentation\n\n- Fixed docs using incorrect reference format ([615d930](https://github.com/sapphiredev/utilities/commit/615d930570fdf8e0c743df1c91f30f280fdd2813))\n- Add @06000208 as a contributor ([fa3349e](https://github.com/sapphiredev/utilities/commit/fa3349e55ce4ad008785211dec7bf8e2b5d933df))\n- Add @didinele as a contributor ([42ef7b6](https://github.com/sapphiredev/utilities/commit/42ef7b656c48fd0e720119db1d622c8bba2791e9))\n- Add @goestav as a contributor ([0e56a92](https://github.com/sapphiredev/utilities/commit/0e56a92a4e2d0942bfa207f81a8cb03b32312034))\n- Add @CitTheDev as a contributor ([34169ea](https://github.com/sapphiredev/utilities/commit/34169eae1dc0476ccf5a6c4f36e28602a204829e))\n- Add @legendhimslef as a contributor ([059b6f1](https://github.com/sapphiredev/utilities/commit/059b6f1ab5362d46d58624d06c1aa39192b0716f))\n- **node-utilities:** Add usage (#500) ([6f1210d](https://github.com/sapphiredev/utilities/commit/6f1210d90f14422289e8493aeed9a2e1769241b2))\n- Add @r-priyam as a contributor ([fb278ba](https://github.com/sapphiredev/utilities/commit/fb278bacf627ec6fc88752eafeb12df5f3177a2c))\n\n## 🧪 Testing\n\n- Update vitest to coverage v8 ([a4bc6e4](https://github.com/sapphiredev/utilities/commit/a4bc6e4f24ea60143a150ecc76fda6484f172ab9))\n\n# [@sapphire/node-utilities@1.0.0](https://github.com/sapphiredev/utilities/tree/@sapphire/node-utilities@1.0.0) - (2022-10-02)\n\n## 🚀 Features\n\n- Add `@sapphire/node-utilities` (#468) ([1606208](https://github.com/sapphiredev/utilities/commit/1606208ce2e1ca8a6b307d14ce7f119e6c914a97))\n\n",
  "classes": [],
  "enums": [],
  "functions": [
    {
      "id": 1,
      "name": "findFilesRecursively",
      "source": {
        "line": 30,
        "file": "findFilesRecursively.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/014a79284a93105b855ed131dd40b56dbcf364a5/packages/node-utilities/src/lib/findFilesRecursively.ts#L30"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "findFilesRecursively",
          "comment": {
            "description": null,
            "blockTags": [
              {
                "name": "returns",
                "text": "An {@link AsyncIterableIterator} of all the files. To loop over these use `for await (const file of findFilesRecursively(path, predicate)) {}`"
              },
              {
                "name": "example",
                "text": "```typescript\n// With CommonJS: To find all files ending with `.ts` in the src directory:\nconst path = require('node:path');\n\nfor await (const file of findFilesRecursively(path.join(__dirname, 'src'), (filePath) => filePath.endsWith('.ts'))) {\n  console.log(file);\n}\n```"
              },
              {
                "name": "example",
                "text": "```typescript\n// With ESM: To find all files ending with `.ts` in the src directory:\nfor await (const file of findFilesRecursively(new URL('src', import.meta.url), (filePath) => filePath.endsWith('.ts'))) {\n  console.log(file);\n}\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 3,
              "name": "path",
              "comment": {
                "description": "The path in which to find files.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "\"fs\".PathLike",
                "packageName": "@types/node",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 4,
              "name": "predicate",
              "comment": {
                "description": "A predicate function receives the path as a parameter. Truthy values will have the path included, falsey values will have the file excluded.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 6,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 7,
                        "name": "filePath",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "AsyncIterableIterator",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 20,
      "name": "findFilesRecursivelyRegex",
      "source": {
        "line": 87,
        "file": "findFilesRecursively.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/014a79284a93105b855ed131dd40b56dbcf364a5/packages/node-utilities/src/lib/findFilesRecursively.ts#L87"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 21,
          "name": "findFilesRecursivelyRegex",
          "comment": {
            "description": null,
            "blockTags": [
              {
                "name": "returns",
                "text": "An {@link AsyncIterableIterator} of all the files. To loop over these use `for await (const file of findFilesRecursivelyRegex(path, fileNameEndsWith)) {}`"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 22,
              "name": "path",
              "comment": {
                "description": "The path in which to find files. This can be a string, buffer, or {@link URL}.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "\"fs\".PathLike",
                "packageName": "@types/node",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 23,
              "name": "regex",
              "comment": {
                "description": "The regex pattern that the file name must match.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "RegExp",
                "packageName": "typescript",
                "packageVersion": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "AsyncIterableIterator",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 12,
      "name": "findFilesRecursivelyStringEndsWith",
      "source": {
        "line": 65,
        "file": "findFilesRecursively.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/014a79284a93105b855ed131dd40b56dbcf364a5/packages/node-utilities/src/lib/findFilesRecursively.ts#L65"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 13,
          "name": "findFilesRecursivelyStringEndsWith",
          "comment": {
            "description": null,
            "blockTags": [
              {
                "name": "returns",
                "text": "An {@link AsyncIterableIterator} of all the files. To loop over these use `for await (const file of findFilesRecursivelyStringEndsWith(path, fileNameEndsWith)) {}`"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 14,
              "name": "path",
              "comment": {
                "description": "The path in which to find files. This can be a string, buffer, or {@link URL}.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "\"fs\".PathLike",
                "packageName": "@types/node",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 15,
              "name": "fileEndsWith",
              "comment": {
                "description": "The string pattern with which the file name must end.\nIdeally this is a file extension, however you can also provide more parts of the end of the file.\n\nNote that we do **not** support a full globby pattern using asterisk for wildcards. It has to be an exact match with {@link String.endsWith}",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "AsyncIterableIterator",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 16,
      "name": "findFilesRecursivelyStringIncludes",
      "source": {
        "line": 77,
        "file": "findFilesRecursively.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/014a79284a93105b855ed131dd40b56dbcf364a5/packages/node-utilities/src/lib/findFilesRecursively.ts#L77"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 17,
          "name": "findFilesRecursivelyStringIncludes",
          "comment": {
            "description": null,
            "blockTags": [
              {
                "name": "returns",
                "text": "An {@link AsyncIterableIterator} of all the files. To loop over these use `for await (const file of findFilesRecursivelyStringIncludes(path, fileNameEndsWith)) {}`"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 18,
              "name": "path",
              "comment": {
                "description": "The path in which to find files. This can be a string, buffer, or {@link URL}.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "\"fs\".PathLike",
                "packageName": "@types/node",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 19,
              "name": "include",
              "comment": {
                "description": "The string pattern which must be present in the file name.\n\nNote that we do **not** support a full globby pattern using asterisk for wildcards. It has to be an exact match with {@link String.includes}",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "AsyncIterableIterator",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 8,
      "name": "findFilesRecursivelyStringStartsWith",
      "source": {
        "line": 51,
        "file": "findFilesRecursively.ts",
        "path": ".",
        "url": "https://github.com/sapphiredev/utilities/blob/014a79284a93105b855ed131dd40b56dbcf364a5/packages/node-utilities/src/lib/findFilesRecursively.ts#L51"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 9,
          "name": "findFilesRecursivelyStringStartsWith",
          "comment": {
            "description": null,
            "blockTags": [
              {
                "name": "returns",
                "text": "An {@link AsyncIterableIterator} of all the files. To loop over these use `for await (const file of findFilesRecursivelyStringStartsWith(path, fileNameEndsWith)) {}`"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 10,
              "name": "path",
              "comment": {
                "description": "The path in which to find files. This can be a string, buffer, or {@link URL}.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "\"fs\".PathLike",
                "packageName": "@types/node",
                "packageVersion": null,
                "typeArguments": []
              }
            },
            {
              "id": 11,
              "name": "fileStartsWith",
              "comment": {
                "description": "The string pattern with which the file name must start.\n\nNote that we do **not** support a full globby pattern using asterisk for wildcards. It has to be an exact match with {@link String.startsWith}",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "string"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "AsyncIterableIterator",
            "packageName": "typescript",
            "packageVersion": null,
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "string"
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [],
  "namespaces": [],
  "typeAliases": [],
  "variables": []
}