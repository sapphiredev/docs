{
  "typeDocJsonParserVersion": "7.1.0",
  "id": 0,
  "name": "@sapphire/bitfield",
  "version": "1.0.0",
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://cdn.skyra.pw/gh-assets/sapphire-banner.png)\n\n# @sapphire/bitfield\n\n**BitField utilities for JavaScript.**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/utilities/branch/main/graph/badge.svg?token=OEGIV6RFDO)](https://codecov.io/gh/sapphiredev/utilities)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/bitfield?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/bitfield)\n[![npm](https://img.shields.io/npm/v/@sapphire/bitfield?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/bitfield)\n\n</div>\n\n**Table of Contents**\n\n-   [Features](#features)\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [Resolving](#resolving)\n    -   [Checking for the existence of any bit](#checking-for-the-existence-of-any-bit)\n    -   [Checking for the existence of one or multiple bits](#checking-for-the-existence-of-one-or-multiple-bits)\n    -   [Getting the field's complement](#getting-the-fields-complement)\n    -   [Getting the union of different fields](#getting-the-union-of-different-fields)\n    -   [Getting the intersection between different fields](#getting-the-intersection-between-different-fields)\n    -   [Getting the symmetric difference between different fields](#getting-the-symmetric-difference-between-different-fields)\n    -   [Formatting a field](#formatting-a-field)\n-   [Buy us some doughnuts](#buy-us-some-doughnuts)\n-   [Contributors ‚ú®](#contributors-)\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/bitfield\n```\n\n## Usage\n\n**Note:** While this section uses `require`, the imports match 1:1 with ESM imports. For example `const { BitField } = require('@sapphire/bitfield')` equals `import { BitField } from '@sapphire/bitfield'`.\n\n```typescript\n// Require the BitField class\nconst { BitField } = require('@sapphire/bitfield');\n\nconst PermissionFlags = {\n\tRead: 1 << 0,\n\tWrite: 1 << 1,\n\tEdit: 1 << 2,\n\tDelete: 1 << 3\n};\nconst PermissionsBitField = new BitField(PermissionFlags);\n\nconst DetailedPermissionsFlags = {\n\tReadMessages: 1n << 0n,\n\tReadChannels: 1n << 1n,\n\tCreateMessages: 1n << 2n,\n\tCreateChannels: 1n << 3n\n\t// ...\n};\nconst DetailedPermissionsBitField = new BitField(DetailedPermissionsFlags);\n```\n\n> **Note**: An exception will be thrown in the constructor if a non-object, null, empty object, or objects with values that aren't all numbers or all bigints.\n\n### Resolving\n\nYou can resolve bitfields from raw numbers, strings, or arrays of them. All of `BitField`'s methods call `resolve` internally, making the usage a lot easier.\n\n```typescript\nPermissionsBitField.resolve(PermissionFlags.Read);\nPermissionsBitField.resolve(1);\nPermissionsBitField.resolve('Read');\nPermissionsBitField.resolve([1]);\nPermissionsBitField.resolve(['Read']);\n// 1 [Read]\n\nPermissionsBitField.resolve(PermissionFlags.Read | PermissionFlags.Write);\nPermissionsBitField.resolve([PermissionFlags.Read, PermissionFlags.Write]);\nPermissionsBitField.resolve(['Read', 'Write']);\n// 3 [Read + Write]\n\nPermissionsBitField.resolve([]);\nPermissionsBitField.zero;\n// 0 [‚àÖ]\n\n// Out-of-bounds fields are masked by `PermissionsBitField.mask`:\nPermissionsBitField.resolve(17);\n// 0b10001 (17) -> ~~0b10000 (16, invalid)~~ | 0b0001 (1, Read)\n// 1 [Read]\n\n// Invalid names will cause a `RangeError` to be thrown:\nPermissionsBitField.resolve(['Execute']);\n// thrown RangeError('Received a name that could not be resolved to a property of flags')\n\n// Invalid types, or non-array objects will cause a `TypeError` to be thrown:\nPermissionsBitField.resolve(true);\nPermissionsBitField.resolve(null);\nPermissionsBitField.resolve({});\n\n// Number BitFields do not accept bigints:\nPermissionsBitField.resolve(1n);\n// BigInt BitFields do not accept numbers:\nDetailedPermissionsBitField.resolve(1);\n```\n\nFor simplicity, we will be using arrays of strings for the rest of the README, but any of the above alternatives are available.\n\n### Checking for the existence of any bit\n\nUseful for checking if at least one of B's bits are included in A.\n\n```typescript\nPermissionsBitField.any(['Read', 'Write'], ['Read']);\nPermissionsBitField.any(['Read', 'Write'], ['Write']);\nPermissionsBitField.any(['Read', 'Write'], ['Write', 'Edit']);\n// true\n\nPermissionsBitField.any(['Read', 'Write'], ['Edit']);\nPermissionsBitField.any(['Read', 'Write'], ['Delete']);\nPermissionsBitField.any(['Read', 'Write'], ['Edit', 'Delete']);\n// false\n```\n\n### Checking for the existence of one or multiple bits\n\nUseful for checking if all of B's bits are included in A, or in other words, A is a superset of B.\n\n```typescript\nPermissionsBitField.any(['Read', 'Write'], ['Read']);\nPermissionsBitField.any(['Read', 'Write'], ['Write']);\n// true\n\nPermissionsBitField.any(['Read', 'Write'], ['Write', 'Edit']);\nPermissionsBitField.any(['Read', 'Write'], ['Edit']);\nPermissionsBitField.any(['Read', 'Write'], ['Delete']);\nPermissionsBitField.any(['Read', 'Write'], ['Edit', 'Delete']);\n// false\n```\n\n### Getting the field's complement\n\nGets the complement of a field, or the result of excluding A from all of the BitField's mask.\n\n```typescript\nPermissionsBitField.complement(['Read']);\n// 14 [Write + Edit + Delete]\n\nPermissionsBitField.complement(['Read', 'Write']);\n// 12 [Edit + Delete]\n\nPermissionsBitField.complement(['Read', 'Write', 'Edit', 'Delete']);\n// 0 [‚àÖ]\n```\n\n### Getting the union of different fields\n\nUseful for adding multiple fields into one.\n\n```typescript\nPermissionsBitField.union(['Read'], ['Write'], ['Edit']);\n// 7 [Read + Write + Edit]\n\nPermissionsBitField.union();\n// 0 [‚àÖ]\n```\n\n### Getting the intersection between different fields\n\nGets the intersection of all the fields.\n\n```typescript\nPermissionsBitField.intersection(['Read', 'Write'], ['Write']);\n// 2 [Write]\n\nPermissionsBitField.intersection(['Read'], ['Write']);\n// 0 [‚àÖ]\n```\n\n### Getting the symmetric difference between different fields\n\nThe summetric difference is basically the union of the difference between A and B and vice versa (bits from A that aren't in B, and bits from B that aren't in A), or XOR, useful for retrieving the bit difference between two fields.\n\n```typescript\nPermissionsBitField.intersection(['Read', 'Write'], ['Write', 'Edit']);\n// 5 [Read + Edit]\n\nPermissionsBitField.intersection(['Write'], ['Write']);\n// 0 [‚àÖ]\n```\n\n### Formatting a field\n\nWe can format fields in two ways, one is with arrays:\n\n```typescript\nPermissionsBitField.toArray(PermissionFlags.Read | PermissionFlags.Write);\nPermissionsBitField.toArray([PermissionFlags.Read, PermissionFlags.Write]);\nPermissionsBitField.toArray(['Read', 'Write']);\n// ['Read', 'Write']\n```\n\nAnd another is with objects:\n\n```typescript\nPermissionsBitField.toObject(PermissionFlags.Read | PermissionFlags.Write);\nPermissionsBitField.toObject([PermissionFlags.Read, PermissionFlags.Write]);\nPermissionsBitField.toObject(['Read', 'Write']);\n// {\n//   Read: true,\n//   Write: true,\n//   Edit: false,\n//   Delete: false\n// }\n```\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, PayPal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/bitfield@1.0.0](https://github.com/sapphiredev/utilities/tree/@sapphire/bitfield@1.0.0) - (2022-10-16)\n\n## üêõ Bug Fixes\n\n- **deps:** Update all non-major dependencies (#505) ([6178296](https://github.com/sapphiredev/utilities/commit/617829649e1e4deeee02b14533b5377cd5bc1fb3))\n\n## üöÄ Features\n\n- Add `@sapphire/bitfield` package (#502) ([64a9c50](https://github.com/sapphiredev/utilities/commit/64a9c5031509c7fc8f1b0ceffb2020635dbb3e5a))\n\n",
  "classes": [
    {
      "id": 1,
      "name": "BitField",
      "source": {
        "line": 1,
        "file": "BitField.ts",
        "path": "lib",
        "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L1"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "abstract": false,
      "extendsType": null,
      "implementsType": [],
      "typeParameters": [
        {
          "id": 45,
          "name": "Flags",
          "constraint": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": null,
                "name": "Record",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  }
                ]
              },
              {
                "kind": "reference",
                "id": null,
                "name": "Record",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "bigint"
                  }
                ]
              }
            ]
          },
          "default": null
        }
      ],
      "construct": {
        "id": 2,
        "name": "constructor",
        "source": {
          "line": 7,
          "file": "BitField.ts",
          "path": "lib",
          "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L7"
        },
        "comment": {
          "description": null,
          "blockTags": [],
          "modifierTags": []
        },
        "parentId": 1,
        "accessibility": "public",
        "parameters": [
          {
            "id": 5,
            "name": "flags",
            "comment": {
              "description": null,
              "blockTags": [],
              "modifierTags": []
            },
            "optional": false,
            "type": {
              "kind": "reference",
              "id": null,
              "name": "Readonly",
              "packageName": "typescript",
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 4,
                  "name": "Flags",
                  "packageName": null,
                  "typeArguments": []
                }
              ]
            }
          }
        ]
      },
      "properties": [
        {
          "id": 9,
          "name": "flags",
          "source": {
            "line": 5,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L5"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": 4,
            "name": "Flags",
            "packageName": null,
            "typeArguments": []
          }
        },
        {
          "id": 8,
          "name": "mask",
          "source": {
            "line": 4,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L4"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "reference",
            "id": null,
            "name": "PrimitiveType",
            "packageName": null,
            "typeArguments": [
              {
                "kind": "indexedAccess",
                "objectType": {
                  "kind": "reference",
                  "id": 4,
                  "name": "Flags",
                  "packageName": null,
                  "typeArguments": []
                },
                "indexType": {
                  "kind": "typeOperator",
                  "operator": "keyof",
                  "type": {
                    "kind": "reference",
                    "id": 4,
                    "name": "Flags",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              }
            ]
          }
        },
        {
          "id": 6,
          "name": "type",
          "source": {
            "line": 2,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L2"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": 4,
                "name": "Flags",
                "packageName": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "typeOperator",
                "operator": "keyof",
                "type": {
                  "kind": "reference",
                  "id": 4,
                  "name": "Flags",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            },
            "extendsType": {
              "kind": "intrinsic",
              "type": "number"
            },
            "trueType": {
              "kind": "literal",
              "value": "number"
            },
            "falseType": {
              "kind": "literal",
              "value": "bigint"
            }
          }
        },
        {
          "id": 7,
          "name": "zero",
          "source": {
            "line": 3,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L3"
          },
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "readonly": true,
          "optional": false,
          "type": {
            "kind": "conditional",
            "checkType": {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": 4,
                "name": "Flags",
                "packageName": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "typeOperator",
                "operator": "keyof",
                "type": {
                  "kind": "reference",
                  "id": 4,
                  "name": "Flags",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            },
            "extendsType": {
              "kind": "intrinsic",
              "type": "number"
            },
            "trueType": {
              "kind": "literal",
              "value": "0"
            },
            "falseType": {
              "kind": "literal",
              "value": "0"
            }
          }
        }
      ],
      "methods": [
        {
          "id": 13,
          "name": "any",
          "source": {
            "line": 81,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L81"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 14,
              "name": "any",
              "comment": {
                "description": "Checks whether or not `field` contains any of the bits from `bits`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "Whether or not `field` has any of `bits`'s bits, also denoted as `A ‚à© B ‚â† ‚àÖ`."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 15,
                  "name": "field",
                  "comment": {
                    "description": "The bits to compare the bits from.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 16,
                  "name": "bits",
                  "comment": {
                    "description": "The bits to compare with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 21,
          "name": "complement",
          "source": {
            "line": 114,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L114"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 22,
              "name": "complement",
              "comment": {
                "description": "Makes the complement of `field`, which is a field of all bits (of `U` or the union of all {@link Flags} bits)\nthat do not belong to `A`. It is the result of `U ‚àñ A`, or `difference(U, field)`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The complement of `field`, also denoted `A·∂ú` or `A'`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst bitfield = new BitField({\n\tRead:   0b0001,\n\tWrite:  0b0010,\n\tEdit:   0b0100,\n\tDelete: 0b1000\n});\n\nbitfield.complement(0b0100);\n// 0b1011\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 23,
                  "name": "field",
                  "comment": {
                    "description": "The bits to get the complement of.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 31,
          "name": "difference",
          "source": {
            "line": 183,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L183"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 32,
              "name": "difference",
              "comment": {
                "description": "Removes from `a` the bits that exist in `b`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The result of `a ‚àñ b`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nbitfield.difference(0b1100, 0b0100);\n// 0b1000\n\nbitfield.difference(0b1111, 0b0110);\n// 0b1001\n```"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link https://en.wikipedia.org/wiki/Difference_(set_theory)}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 33,
                  "name": "a",
                  "comment": {
                    "description": "The first field.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 34,
                  "name": "b",
                  "comment": {
                    "description": "The bits to remove from `a`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 17,
          "name": "has",
          "source": {
            "line": 91,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L91"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 18,
              "name": "has",
              "comment": {
                "description": "Checks whether or not `field` is a superset of or equal to `bits`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "Whether or not `field` is a superset of or equal to `bits`, also denoted as `A ‚äá B`."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 19,
                  "name": "field",
                  "comment": {
                    "description": "The bits to compare the bits from.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 20,
                  "name": "bits",
                  "comment": {
                    "description": "The bits to compare with.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "intrinsic",
                "type": "boolean"
              }
            }
          ]
        },
        {
          "id": 27,
          "name": "intersection",
          "source": {
            "line": 159,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L159"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 28,
              "name": "intersection",
              "comment": {
                "description": "Makes an intersection of all the bits.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The result of intersecting `bitfield` with all of the `fields`, also denoted as `A ‚ãÇ fields`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nbitfield.intersection(0b0001, 0b0100);\n// 0b0000\n\nbitfield.intersection(0b1100, 0b0100);\n// 0b0100\n\nbitfield.intersection(0b1101, 0b0101, 0b1100);\n// 0b0100\n```"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link https://en.wikipedia.org/wiki/Intersection_(set_theory)}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 29,
                  "name": "bitfield",
                  "comment": {
                    "description": "The first field.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 30,
                  "name": "fields",
                  "comment": {
                    "description": "The bits to intersect with `bitfield`.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "MaybeArray",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "union",
                            "types": [
                              {
                                "kind": "typeOperator",
                                "operator": "keyof",
                                "type": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                }
                              },
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "PrimitiveType",
                                "packageName": null,
                                "typeArguments": [
                                  {
                                    "kind": "indexedAccess",
                                    "objectType": {
                                      "kind": "reference",
                                      "id": 4,
                                      "name": "Flags",
                                      "packageName": null,
                                      "typeArguments": []
                                    },
                                    "indexType": {
                                      "kind": "typeOperator",
                                      "operator": "keyof",
                                      "type": {
                                        "kind": "reference",
                                        "id": 4,
                                        "name": "Flags",
                                        "packageName": null,
                                        "typeArguments": []
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 10,
          "name": "resolve",
          "source": {
            "line": 60,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L60"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 11,
              "name": "resolve",
              "comment": {
                "description": "Resolves a:\n- `string`: If it's a property of {@link Flags}.\n- `number`: If the BitField processes `number` primitives.\n- `bigint`: If the BitField processes `bigint` primitives.\n- `Array`: Resolves recursively.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The resolved value."
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 12,
                  "name": "resolvable",
                  "comment": {
                    "description": "The value to resolve.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 35,
          "name": "symmetricDifference",
          "source": {
            "line": 205,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L205"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 36,
              "name": "symmetricDifference",
              "comment": {
                "description": "Computes the symmetric difference, denoted as `A ‚äñ B` or `A Œî B`, which is the disjunctive union, or the set of\nelements which are in either of the sets, but not in their intersection. As such, this is the result of\n`(A ‚àñ B) ‚à™ (B ‚àñ A)`, `union(difference(a, b), difference(b, a))`, or `a ‚äï b`.",
                "blockTags": [
                  {
                    "name": "remarks",
                    "text": "The empty set (`‚àÖ`) is neutral, as such, `A Œî ‚àÖ = A` and `A Œî A = ‚àÖ`"
                  },
                  {
                    "name": "returns",
                    "text": "The result of computing `a Œî b`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nbitfield.symmetricDifference(0b1100, 0b0011);\n// 0b1111\n\nbitfield.symmetricDifference(0b1101, 0b1011);\n// 0b0110\n```"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link https://en.wikipedia.org/wiki/Symmetric_difference}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 37,
                  "name": "a",
                  "comment": {
                    "description": "The first field.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 38,
                  "name": "b",
                  "comment": {
                    "description": "The second field.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 39,
          "name": "toArray",
          "source": {
            "line": 226,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L226"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 40,
              "name": "toArray",
              "comment": {
                "description": "Retrieves an array of the properties from {@link Flags} whose values are contained in `field`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The names of the {@link BitField}'s flag properties whose value are contained in `field`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst bitfield = new BitField({\n\tRead:   0b0001,\n\tWrite:  0b0010,\n\tEdit:   0b0100,\n\tDelete: 0b1000\n});\n\nbitfield.toArray(0b0101);\n// ['Read', 'Edit']\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 41,
                  "name": "field",
                  "comment": {
                    "description": "The field to convert to an array.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "array",
                "type": {
                  "kind": "typeOperator",
                  "operator": "keyof",
                  "type": {
                    "kind": "reference",
                    "id": 4,
                    "name": "Flags",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              }
            }
          ]
        },
        {
          "id": 42,
          "name": "toObject",
          "source": {
            "line": 260,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L260"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 43,
              "name": "toObject",
              "comment": {
                "description": "Retrieves an object with the properties from {@link Flags} whose values are boolean denoting whether or not the\nflag's bit is contained in `field`.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "An object with the properties of {@link Flags} which values are boolean."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nconst bitfield = new BitField({\n\tRead:   0b0001,\n\tWrite:  0b0010,\n\tEdit:   0b0100,\n\tDelete: 0b1000\n});\n\nbitfield.toObject(0b0101);\n// {\n// \tRead: true,\n// \tWrite: false,\n// \tEdit: true,\n// \tDelete: false\n// }\n```"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 44,
                  "name": "field",
                  "comment": {
                    "description": "The field to convert to an object.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "MaybeArray",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "union",
                        "types": [
                          {
                            "kind": "typeOperator",
                            "operator": "keyof",
                            "type": {
                              "kind": "reference",
                              "id": 4,
                              "name": "Flags",
                              "packageName": null,
                              "typeArguments": []
                            }
                          },
                          {
                            "kind": "reference",
                            "id": null,
                            "name": "PrimitiveType",
                            "packageName": null,
                            "typeArguments": [
                              {
                                "kind": "indexedAccess",
                                "objectType": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                },
                                "indexType": {
                                  "kind": "typeOperator",
                                  "operator": "keyof",
                                  "type": {
                                    "kind": "reference",
                                    "id": 4,
                                    "name": "Flags",
                                    "packageName": null,
                                    "typeArguments": []
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "Record",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    }
                  },
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 24,
          "name": "union",
          "source": {
            "line": 132,
            "file": "BitField.ts",
            "path": "lib",
            "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L132"
          },
          "parentId": 1,
          "accessibility": "public",
          "abstract": false,
          "static": false,
          "signatures": [
            {
              "id": 25,
              "name": "union",
              "comment": {
                "description": "Makes a union of all the bits.",
                "blockTags": [
                  {
                    "name": "returns",
                    "text": "The result of combining all bits together, also denoted as `‚àÖ ‚ãÉ fields`."
                  },
                  {
                    "name": "example",
                    "text": "```typescript\nbitfield.union(0b0001, 0b0100);\n// 0b0101\n\nbitfield.union(0b1100, 0b0001, 0b0010);\n// 0b1111\n```"
                  },
                  {
                    "name": "seealso",
                    "text": "{@link https://en.wikipedia.org/wiki/Union_(set_theory)}"
                  }
                ],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 26,
                  "name": "fields",
                  "comment": {
                    "description": "The bits to create a union of.",
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "optional": false,
                  "type": {
                    "kind": "typeOperator",
                    "operator": "readonly",
                    "type": {
                      "kind": "array",
                      "type": {
                        "kind": "reference",
                        "id": null,
                        "name": "MaybeArray",
                        "packageName": null,
                        "typeArguments": [
                          {
                            "kind": "union",
                            "types": [
                              {
                                "kind": "typeOperator",
                                "operator": "keyof",
                                "type": {
                                  "kind": "reference",
                                  "id": 4,
                                  "name": "Flags",
                                  "packageName": null,
                                  "typeArguments": []
                                }
                              },
                              {
                                "kind": "reference",
                                "id": null,
                                "name": "PrimitiveType",
                                "packageName": null,
                                "typeArguments": [
                                  {
                                    "kind": "indexedAccess",
                                    "objectType": {
                                      "kind": "reference",
                                      "id": 4,
                                      "name": "Flags",
                                      "packageName": null,
                                      "typeArguments": []
                                    },
                                    "indexType": {
                                      "kind": "typeOperator",
                                      "operator": "keyof",
                                      "type": {
                                        "kind": "reference",
                                        "id": 4,
                                        "name": "Flags",
                                        "packageName": null,
                                        "typeArguments": []
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "PrimitiveType",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "indexedAccess",
                    "objectType": {
                      "kind": "reference",
                      "id": 4,
                      "name": "Flags",
                      "packageName": null,
                      "typeArguments": []
                    },
                    "indexType": {
                      "kind": "typeOperator",
                      "operator": "keyof",
                      "type": {
                        "kind": "reference",
                        "id": 4,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "enums": [],
  "functions": [],
  "interfaces": [],
  "namespaces": [],
  "typeAliases": [
    {
      "id": 48,
      "name": "ValueResolvable",
      "source": {
        "line": 279,
        "file": "BitField.ts",
        "path": "lib",
        "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L279"
      },
      "comment": {
        "description": "Resolves the possible types accepted by the specified {@link BitField}.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "A {@link BitField} instance type."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 49,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 49,
          "name": "T",
          "packageName": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reference",
          "id": 1,
          "name": "BitField",
          "packageName": null,
          "typeArguments": [
            {
              "kind": "inferred",
              "type": "Flags"
            }
          ]
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "MaybeArray",
          "packageName": null,
          "typeArguments": [
            {
              "kind": "union",
              "types": [
                {
                  "kind": "typeOperator",
                  "operator": "keyof",
                  "type": {
                    "kind": "reference",
                    "id": null,
                    "name": "Flags",
                    "packageName": null,
                    "typeArguments": []
                  }
                },
                {
                  "kind": "reference",
                  "id": null,
                  "name": "PrimitiveType",
                  "packageName": null,
                  "typeArguments": [
                    {
                      "kind": "indexedAccess",
                      "objectType": {
                        "kind": "reference",
                        "id": null,
                        "name": "Flags",
                        "packageName": null,
                        "typeArguments": []
                      },
                      "indexType": {
                        "kind": "typeOperator",
                        "operator": "keyof",
                        "type": {
                          "kind": "reference",
                          "id": null,
                          "name": "Flags",
                          "packageName": null,
                          "typeArguments": []
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        "falseType": {
          "kind": "intrinsic",
          "type": "never"
        }
      }
    },
    {
      "id": 46,
      "name": "ValueType",
      "source": {
        "line": 273,
        "file": "BitField.ts",
        "path": "lib",
        "url": "https://github.com/sapphiredev/utilities/blob/634f789/packages/bitfield/src/lib/BitField.ts#L273"
      },
      "comment": {
        "description": "Resolves the type of the values the specified {@link BitField} takes.",
        "blockTags": [
          {
            "name": "typeparam",
            "text": "A {@link BitField} instance type."
          }
        ],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 47,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 47,
          "name": "T",
          "packageName": null,
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reference",
          "id": 1,
          "name": "BitField",
          "packageName": null,
          "typeArguments": [
            {
              "kind": "inferred",
              "type": "Flags"
            }
          ]
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "PrimitiveType",
          "packageName": null,
          "typeArguments": [
            {
              "kind": "indexedAccess",
              "objectType": {
                "kind": "reference",
                "id": null,
                "name": "Flags",
                "packageName": null,
                "typeArguments": []
              },
              "indexType": {
                "kind": "typeOperator",
                "operator": "keyof",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "Flags",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ]
        },
        "falseType": {
          "kind": "intrinsic",
          "type": "never"
        }
      }
    }
  ],
  "variables": []
}