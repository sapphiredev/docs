{
  "typeDocJsonParserVersion": "10.0.0",
  "id": 0,
  "name": "@sapphire/iterator-utilities",
  "version": "1.0.1",
  "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://raw.githubusercontent.com/sapphiredev/assets/main/banners/SapphireCommunity.png)\n\n# @sapphire/iterator-utilities\n\n**Iterator utilities for JavaScript.**\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/utilities)](https://github.com/sapphiredev/utilities/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/utilities/branch/main/graph/badge.svg?token=OEGIV6RFDO)](https://codecov.io/gh/sapphiredev/utilities)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/@sapphire/iterator-utilities?logo=webpack&style=flat-square)](https://bundlephobia.com/result?p=@sapphire/iterator-utilities)\n[![npm](https://img.shields.io/npm/v/@sapphire/iterator-utilities?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/iterator-utilities)\n\n</div>\n\n**Table of Contents**\n\n-   [Features](#features)\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [Resolving](#resolving)\n    -   [Checking for the existence of any bit](#checking-for-the-existence-of-any-bit)\n    -   [Checking for the existence of one or multiple bits](#checking-for-the-existence-of-one-or-multiple-bits)\n    -   [Getting the field's complement](#getting-the-fields-complement)\n    -   [Getting the union of different fields](#getting-the-union-of-different-fields)\n    -   [Getting the intersection between different fields](#getting-the-intersection-between-different-fields)\n    -   [Getting the symmetric difference between different fields](#getting-the-symmetric-difference-between-different-fields)\n    -   [Formatting a field](#formatting-a-field)\n-   [Buy us some doughnuts](#buy-us-some-doughnuts)\n-   [Contributors ✨](#contributors-)\n\n## Features\n\n-   Written in TypeScript\n-   Bundled with esbuild so it can be used in NodeJS and browsers\n-   Offers CommonJS, ESM and UMD bundles\n-   Fully tested\n\n## Installation\n\nYou can use the following command to install this package, or replace `npm install` with your package manager of choice.\n\n```sh\nnpm install @sapphire/iterator-utilities\n```\n\n## Usage\n\nFor any of the following examples, you can import the utilities from the index file:\n\n```ts\nimport { append } from '@sapphire/iterator-utilities';\nconst { append } = require('@sapphire/iterator-utilities');\n```\n\nOr you can import the utilities directly:\n\n```ts\nimport { append } from '@sapphire/iterator-utilities/append';\nconst { append } = require('@sapphire/iterator-utilities/append');\n```\n\n### `append`\n\nAppends iterables to the end of the first iterable, returning a new iterable combining all of them. It's similar to concatenating arrays or doing `[...a, ...b, ...c]`.\n\n```typescript\nconst iterable = append([1, 2, 3], [4, 5, 6], [7, 8, 9]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### `at`\n\nAdvances the iterable to the `n`th element and returns it. If the iterable is exhausted before reaching the `n`th element, it returns `undefined`.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(at(iterable, 2));\n// Output: 3\n```\n\n### `average`\n\nConsumes the iterable and returns the average value of all the elements. If the iterable is empty, it returns `null`.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(average(iterable));\n// Output: 3\n```\n\n### `chain`\n\nSimilar to `append`, but takes an iterable of iterables and chains them together.\n\n```typescript\nconst iterable = chain([1, 2, 3], [4, 5, 6], [7, 8, 9]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### `chunk`\n\nChunks the iterable into arrays of at most `size` elements.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...chunk(iterable, 2)]);\n// Output: [[1, 2], [3, 4], [5]]\n```\n\n### `compact`\n\nCreates a new iterable that yields all the non-nullish values (`null` and `undefined`) from the iterable.\n\n```typescript\nconst iterable = [1, null, 2, undefined, 3];\nconsole.log([...compact(iterable)]);\n// Output: [1, 2, 3]\n```\n\n### `compress`\n\nCreates a new iterable of the first iterable based on the truthiness of the corresponding element in the second iterable.\n\n```typescript\nconst iterable = compress([1, 2, 3, 4, 5], [true, false, true, false, true]);\nconsole.log([...iterable]);\n// Output: [1, 3, 5]\n```\n\n### `contains`\n\nAdvances the iterable until it finds the element, returning `true` if it's found and `false` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(contains(iterable, 3));\n// Output: true\n```\n\n### `count`\n\nConsumes the iterable and returns the number of elements.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(count(iterable));\n// Output: 5\n```\n\n### `cycle`\n\nCreates an infinite iterable by cycling through the elements of the input iterable.\n\n```typescript\nconst iterable = cycle([1, 2, 3]);\nfor (const element of iterable) {\n\tconsole.log(element);\n\t// Output: 1, 2, 3, 1, 2, 3, 1, 2, 3, ...\n}\n```\n\n### `difference`\n\nCreates an iterable with the elements of the first iterable that are not in the second iterable.\n\n```typescript\nconst first = [1, 2, 3, 4, 5];\nconst second = [3, 4, 5, 6, 7];\nconsole.log([...difference(first, second)]);\n// Output: [1, 2]\n```\n\n### `drop`\n\nAdvances the iterable by `count` elements from the iterable.\n\n```typescript\nconst iterable = drop(iterator, 2);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```\n\n### `dropLast`\n\nConsumes the iterable, creating a new iterator without the last `count` elements from the iterable.\n\n```typescript\nconst iterable = dropLast([1, 2, 3, 4, 5], 2);\nconsole.log([...iterable]);\n// Output: [1, 2, 3]\n```\n\n### `dropWhile`\n\nCreates a new iterator without the elements that satisfy the specified test.\n\n```typescript\nconst iterable = dropWhile([1, 2, 3, 4, 5], (value) => value < 3);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```\n\n### `empty`\n\nCreates an empty iterator.\n\n```typescript\nconst iterable = empty();\nconsole.log([...iterable]);\n// Output: []\n```\n\n### `enumerate`\n\nCreates a new iterable that yields the index and value of each element.\n\n```typescript\nconst iterable = ['a', 'b', 'c'];\nfor (const [index, value] of enumerate(iterable)) {\n\tconsole.log(`Index: ${index}, Value: ${value}`);\n\t// Output: Index: 0, Value: a\n\t// Output: Index: 1, Value: b\n\t// Output: Index: 2, Value: c\n}\n```\n\n### `every`\n\nTests whether all elements in the iterable pass the test implemented by the provided function.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(every(iterable, (value) => value < 10));\n// Output: true\nconsole.log(every(iterable, (value) => value < 3));\n// Output: false\n```\n\n### `filter`\n\nCreates an iterable with the elements that pass the test implemented by the provided function.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...filter(iterable, (value) => value % 2 === 0)]);\n// Output: [2, 4]\n```\n\n### `find`\n\nAdvances the iterable until it finds the element, returning it if it's found and `undefined` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(find(iterable, (value) => value % 2 === 0));\n// Output: 2\n```\n\n### `findIndex`\n\nAdvances the iterable until it finds the element, returning its index if it's found and `-1` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(findIndex(iterable, (value) => value % 2 === 0));\n// Output: 1\n```\n\n### `first`\n\nConsumes the first element of the iterable, returning it if it's found and `undefined` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(first(iterable));\n// Output: 1\n```\n\n### `flat`\n\nCreates an iterable that yields the elements of each iterable in the input iterable.\n\n```typescript\nconst iterable = flat([\n\t[1, 2],\n\t[3, 4],\n\t[5, 6]\n]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6]\n```\n\n### `flatMap`\n\nCreates an iterable that yields the elements of each iterable returned by the provided function on each element of the input iterable.\n\n```typescript\nconst iterable = [1, 2, 3];\nconsole.log([...flatMap(iterable, (value) => [value, value * 2])]);\n// Output: [1, 2, 2, 4, 3, 6]\n```\n\n### `forEach`\n\nExecutes a provided function once for each iterable element.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nforEach(iterable, (value) => console.log(value));\n// Output: 1, 2, 3, 4, 5\n```\n\n### `from`\n\nResolves an iterable from an iterable or iterator-like object.\n\n```typescript\nconst iterable = from([1, 2, 3, 4, 5]);\nfor (const element of iterable) {\n\tconsole.log(element);\n\t// Output: 1, 2, 3, 4, 5\n}\n```\n\n### `indexOf`\n\nAdvances the iterable until it finds the element, returning its index if it's found and `-1` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(indexOf(iterable, 3));\n// Output: 2\n```\n\n### `intersect`\n\nCreates an iterable with the elements that are in both input iterables.\n\n```typescript\nconst iterable = intersect([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```\n\n### `isEmpty`\n\nAdvances the iterable once, returning `true` if it's exhausted and `false` otherwise.\n\n```typescript\nconsole.log(isEmpty([]));\n// Output: true\n\nconsole.log(isEmpty([1, 2, 3, 4, 5]));\n// Output: false\n```\n\n### `last`\n\nConsumes the iterable until it's exhausted, returning the last element.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(last(iterable));\n// Output: 5\n```\n\n### `map`\n\nCreates an iterable with the results of calling a provided function on each element.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...map(iterable, (value) => value * 2)]);\n// Output: [2, 4, 6, 8, 10]\n```\n\n### `max`\n\nConsumes the iterable and returns the highest number element. If the iterable is empty, or contains only non-number values, it returns `null`.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(max(iterable));\n// Output: 5\n```\n\n### `min`\n\nConsumes the iterable and returns the lowest number element. If the iterable is empty, or contains only non-number values, it returns `null`.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(min(iterable));\n// Output: 1\n```\n\n### `partition`\n\nConsumes the iterable and creates two arrays, one with the elements that pass the test and another with the elements that don't.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconst [even, odd] = partition(iterable, (value) => value % 2 === 0);\n\nconsole.log(even);\n// Output: [2, 4]\n\nconsole.log(odd);\n// Output: [1, 3, 5]\n```\n\n### `peekable`\n\nCreates an iterator that allows you to peek at the next element without advancing the iterator.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconst peekableIterator = peekable(iterable);\n\nconsole.log(peekableIterator.next());\n// Output: { value: 1, done: false }\n\nconsole.log(peekableIterator.peek());\n// Output: { value: 2, done: false }\n\nconsole.log(peekableIterator.next());\n// Output: { value: 2, done: false }\n\nconsole.log(peekableIterator.next());\n// Output: { value: 3, done: false }\n```\n\n### `prepend`\n\nCreates an iterator with the provided iterables prepended to the first iterable.\n\n```typescript\nconsole.log([...prepend([3, 4, 5], [1], [2])]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n### `product`\n\nConsumes the iterable and returns the product of all the elements. If the iterable is empty, it returns `1`.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(product(iterable));\n// Output: 120\n```\n\n### `range`\n\nCreates an iterable with the numbers from `start` to `stop` (exclusive) with an optional step.\n\n```typescript\nconst iterable = range(0, 5);\nconsole.log([...iterable]);\n// Output: [0, 1, 2, 3, 4]\n```\n\nIf `start` is greater than `stop`, the iterable will count down with a negative step.\n\n```typescript\nconst iterable = range(5, 0);\nconsole.log([...iterable]);\n// Output: [5, 4, 3, 2, 1]\n```\n\nYou can also specify a step.\n\n```typescript\nconst iterable = range(0, 5, 2);\nconsole.log([...iterable]);\n// Output: [0, 2, 4]\n```\n\n### `reduce`\n\nConsumes the iterable and reduces it to the reducer function's result.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(reduce(iterable, (accumulator, currentValue) => accumulator + currentValue));\n// Output: 15\n```\n\n### `repeat`\n\nCreates an iterable that repeats the input iterable `count` times.\n\n```typescript\nconst iterator = repeat('Hello, world!', 3);\nconsole.log([...iterator]);\n// Output: ['Hello, world!', 'Hello, world!', 'Hello, world!']\n```\n\n### `reverse`\n\nConsumes the iterable and returns a new iterable with the elements in reverse order.\n\n```typescript\nconsole.log([...reverse([1, 2, 3, 4, 5])]);\n// Output: [5, 4, 3, 2, 1]\n\nconsole.log([...reverse('hello')]);\n// Output: ['o', 'l', 'l', 'e', 'h']\n```\n\n### `slice`\n\nProduces an iterable with the elements from the `start` index to the `end` index (exclusive).\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 1, 3)]);\n// Output: [2, 3]\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, -2)]);\n// Output: [4, 5]\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2)]);\n// Output: [3, 4, 5]\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2, -1)]);\n// Output: [3, 4]\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, -2, -1)]);\n// Output: [4]\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2, 1)]);\n// Output: []\n```\n\n### `some`\n\nAdvances the iterable until it finds a matching element, returning `true` if it's found and `false` otherwise.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(some(iterable, (value) => value % 2 === 0));\n// Output: true\n```\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(some(iterable, (value) => value % 6 === 0));\n// Output: false\n```\n\n### `sorted`\n\nConsumes the iterable and returns a new iterable with the elements sorted.\n\n```typescript\nconst iterable = [5, 3, 1, 4, 2];\nconsole.log([...sorted(iterable)]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n### `starMap`\n\nCreates an iterable with the results of calling a provided function on each element of the input iterables as the function's parameters.\n\n```typescript\nconst iterable = [\n\t[1, 2],\n\t[3, 4],\n\t[5, 6]\n];\nconsole.log([...starMap(iterable, (a, b) => a + b)]);\n// Output: [3, 7, 11]\n```\n\n### `sum`\n\nConsumes the iterable and returns the sum of all the elements.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(sum(iterable));\n// Output: 15\n```\n\n### `take`\n\nCreates an iterable with the first `count` elements.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...take(iterable, 2)]);\n// Output: [1, 2]\n```\n\n### `takeLast`\n\nConsumes the iterable and returns a new iterable with the last `count` elements.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...takeLast(iterable, 2)]);\n// Output: [4, 5]\n```\n\n### `takeWhile`\n\nAlias of [`filter`](#filter).\n\n### `tee`\n\nCreates `count` independent iterators from the input iterable.\n\n```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconst [iter1, iter2] = tee(iterable, 2);\n\nconsole.log([...iter1]);\n// Output: [1, 2, 3, 4, 5]\n\nconsole.log([...iter2]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n### `toArray`\n\nConsumes the iterable and returns an array with all the elements.\n\n```typescript\nconst array = [1, 2, 3, 4, 5];\nconsole.log(toArray(array));\n// Output: [1, 2, 3, 4, 5]\n```\n\n```typescript\nconst set = new Set([1, 2, 3, 4, 5]);\nconsole.log(toArray(set));\n// Output: [1, 2, 3, 4, 5]\n```\n\n```typescript\nconst map = new Map([\n\t['a', 1],\n\t['b', 2],\n\t['c', 3]\n]);\nconsole.log(toArray(map));\n// Output: [['a', 1], ['b', 2], ['c', 3]]\n```\n\n```typescript\nconst string = 'hello';\nconsole.log(toArray(string));\n// Output: ['h', 'e', 'l', 'l', 'o']\n```\n\n### `toIterableIterator`\n\nCreates an iterable iterator from an iterable or iterator-like object.\n\n```typescript\nconst array = [1, 2, 3, 4, 5];\nconsole.log([...toIterableIterator(array)]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n```typescript\nconst set = new Set([1, 2, 3, 4, 5]);\nconsole.log([...toIterableIterator(set)]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n```typescript\nconst map = new Map([\n\t['a', 1],\n\t['b', 2],\n\t['c', 3]\n]);\nconsole.log([...toIterableIterator(map)]);\n// Output: [['a', 1], ['b', 2], ['c', 3]]\n```\n\n```typescript\nconst string = 'hello';\nconsole.log([...toIterableIterator(string)]);\n// Output: ['h', 'e', 'l', 'l', 'o']\n```\n\n### `union`\n\nCreates an iterable with the elements that are in either input iterable.\n\n```typescript\nconst iterable1 = [1, 2, 3];\nconst iterable2 = [3, 4, 5];\nconsole.log([...union(iterable1, iterable2)]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n### `unique`\n\nCreates an iterable with the unique elements of the input iterable. Under the hood, it calls [`union`](#union) with the iterable itself.\n\n```typescript\nconst iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5];\nconsole.log([...unique(iterable)]);\n// Output: [1, 2, 3, 4, 5]\n```\n\n### `unzip`\n\nCreates an array for each element of the input iterable, transposing the input iterable. The opposite of [`zip`](#zip).\n\n```typescript\nconst iterable = [\n\t[1, 'a'],\n\t[2, 'b'],\n\t[3, 'c']\n];\nconst [numbers, letters] = unzip(iterable);\n\nconsole.log(numbers);\n// Output: [1, 2, 3]\n\nconsole.log(letters);\n// Output: ['a', 'b', 'c']\n```\n\n### `zip`\n\nCreates an iterable with the elements of the input iterables zipped together. The opposite of [`unzip`](#unzip).\n\n```typescript\nconst iterable1 = [1, 2, 3];\nconst iterable2 = ['a', 'b', 'c'];\nconst iterable3 = [true, false, true];\nconsole.log(zip(iterable1, iterable2, iterable3));\n// Output: [\n// \t[1, 'a', true],\n// \t[2, 'b', false],\n// \t[3, 'c', true]\n// ]\n```\n\n## Buy us some doughnuts\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are amazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, PayPal, Patreon and GitHub Sponsorships. You can use the buttons below to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\nPlease make sure to read the [Contributing Guide][contributing] before making a pull request.\n\nThank you to all the people who already contributed to Sapphire!\n\n<a href=\"https://github.com/sapphiredev/utilities/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sapphiredev/utilities\" />\n</a>\n\n[contributing]: https://github.com/sapphiredev/.github/blob/main/.github/CONTRIBUTING.md\n",
  "changelog": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n# [@sapphire/iterator-utilities@1.0.1](https://github.com/sapphiredev/utilities/compare/@sapphire/iterator-utilities@1.0.0...@sapphire/iterator-utilities@1.0.1) - (2024-05-02)\n\n## 🐛 Bug Fixes\n\n- **peekable:** Fix `peek()`'s return type (#741) ([c71b759](https://github.com/sapphiredev/utilities/commit/c71b759c22627b80e304d18361308fcf42458102))\n\n## 📝 Documentation\n\n- **iterator-utilities:** Fix `union` jsdoc (#740) ([22736fd](https://github.com/sapphiredev/utilities/commit/22736fdf9a84a97fda3670bf6a878ff00688fff2))\n\n# [@sapphire/iterator-utilities@1.0.0](https://github.com/sapphiredev/utilities/tree/@sapphire/iterator-utilities@1.0.0) - (2024-04-29)\n\n## 🚀 Features\n\n- Add `iterator-utilities` package (#737) ([a7ce2c6](https://github.com/sapphiredev/utilities/commit/a7ce2c6fceef67759e42ea5b4f957802c8e8df21))\n\n",
  "classes": [],
  "enums": [],
  "functions": [
    {
      "id": 1,
      "name": "append",
      "source": {
        "line": 20,
        "file": "append.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/append.ts#L20"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "append",
          "comment": {
            "description": "Appends iterables to the end of the first iterable, returning a new iterable combining all of them. It's similar to concatenating arrays or doing `[...a, ...b, ...c]`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the values of the provided iterator followed by the values of the provided iterables."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { append } from '@sapphire/iterator-utilities';\n\nconst iterable = append([1, 2, 3], [4, 5, 6], [7, 8, 9]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 3,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 4,
              "name": "iterable",
              "comment": {
                "description": "The iterator to append values to.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 3,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 5,
              "name": "iterables",
              "comment": {
                "description": "The iterables to append to the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 187,
                  "name": "IterableResolvable",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 3,
                      "name": "ElementType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 3,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "at",
      "source": {
        "line": 27,
        "file": "at.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/at.ts#L27"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 8,
          "name": "at",
          "comment": {
            "description": "Advances the iterable to the `n`th element and returns it. If the iterable is exhausted before reaching the `n`th element, it returns `undefined`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The element at the specified index, or `undefined` if the index is out of range."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { at } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(at(iterable, 2));\n// Output: 3\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the input iterator up to the specified index."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 9,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 10,
              "name": "iterable",
              "comment": {
                "description": "An iterator to return an element from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 9,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 11,
              "name": "index",
              "comment": {
                "description": "The index of the element to retrieve.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 9,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 12,
      "name": "average",
      "source": {
        "line": 24,
        "file": "average.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/average.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 13,
          "name": "average",
          "comment": {
            "description": "Consumes the iterable and returns the average value of all the elements. If the iterable is empty, it returns `null`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The average of the sequence of numbers, or `null` if the sequence is empty or contains only non-number values."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { average } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(average(iterable));\n// Output: 3\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 14,
              "name": "iterable",
              "comment": {
                "description": "The iterator to calculate the average of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "NumberResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "intrinsic",
                "type": "number"
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 15,
      "name": "chain",
      "source": {
        "line": 19,
        "file": "chain.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/chain.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 16,
          "name": "chain",
          "comment": {
            "description": "Similar to `append`, but takes an iterable of iterables and chains them together.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the values of the provided iterators in order."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { chain } from '@sapphire/iterator-utilities';\n\nconst iterable = chain([1, 2, 3], [4, 5, 6], [7, 8, 9]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 17,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 18,
              "name": "iterables",
              "comment": {
                "description": "The iterators to chain together.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 187,
                  "name": "IterableResolvable",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 17,
                      "name": "ElementType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 17,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 19,
      "name": "chunk",
      "source": {
        "line": 21,
        "file": "chunk.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/chunk.ts#L21"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 20,
          "name": "chunk",
          "comment": {
            "description": "Chunks the iterable into arrays of at most `size` elements.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { chunk } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...chunk(iterable, 2)]);\n// Output: [[1, 2], [3, 4], [5]]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 21,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 22,
              "name": "iterable",
              "comment": {
                "description": "The iterator whose elements to chunk.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 21,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 23,
              "name": "size",
              "comment": {
                "description": "The maximum size of each chunk.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 21,
                  "name": "ElementType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 24,
      "name": "compact",
      "source": {
        "line": 18,
        "file": "compact.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/compact.ts#L18"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 25,
          "name": "compact",
          "comment": {
            "description": "Creates a new iterable that yields all the non-nullish values (`null` and `undefined`) from the iterable.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { compact } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, null, 2, undefined, 3];\nconsole.log([...compact(iterable)]);\n// Output: [1, 2, 3]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 26,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 27,
              "name": "iterable",
              "comment": {
                "description": "An iterator that contains elements to be compacted.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "intrinsic",
                        "type": "undefined"
                      },
                      {
                        "kind": "literal",
                        "value": "null"
                      },
                      {
                        "kind": "reference",
                        "id": 26,
                        "name": "ElementType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 26,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 28,
      "name": "compress",
      "source": {
        "line": 25,
        "file": "compress.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/compress.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 29,
          "name": "compress",
          "comment": {
            "description": "Creates a new iterable of the first iterable based on the truthiness of the corresponding element in the second iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that contains only the elements from the input iterator that correspond to `true` values in the\nselectors iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { compress } from '@sapphire/iterator-utilities';\n\nconst iterable = compress([1, 2, 3, 4, 5], [true, false, true, false, true]);\nconsole.log([...iterable]);\n// Output: [1, 3, 5]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes both input iterators until either is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 30,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 31,
              "name": "iterable",
              "comment": {
                "description": "An iterator that contains elements to be compressed.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 30,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 32,
              "name": "selectors",
              "comment": {
                "description": "The selectors that determine which elements to include in the result.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "boolean"
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 30,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 33,
      "name": "contains",
      "source": {
        "line": 24,
        "file": "contains.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/contains.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 34,
          "name": "contains",
          "comment": {
            "description": "Advances the iterable until it finds the element, returning `true` if it's found and `false` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if the value is found in the iterator; otherwise, `false`."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { contains } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(contains(iterable, 3));\n// Output: true\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the iterator until the value is found or the iterator is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 35,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 36,
              "name": "iterable",
              "comment": {
                "description": "The iterator in which to locate a value.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 35,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 37,
              "name": "value",
              "comment": {
                "description": "The value to locate in the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 35,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 38,
      "name": "count",
      "source": {
        "line": 22,
        "file": "count.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/count.ts#L22"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 39,
          "name": "count",
          "comment": {
            "description": "Consumes the iterable and returns the number of elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The number of elements in the input iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { count } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(count(iterable));\n// Output: 5\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 40,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 41,
              "name": "iterable",
              "comment": {
                "description": "An iterator that contains elements to be counted.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 40,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 42,
      "name": "cycle",
      "source": {
        "line": 20,
        "file": "cycle.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/cycle.ts#L20"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 43,
          "name": "cycle",
          "comment": {
            "description": "Creates an infinite iterable by cycling through the elements of the input iterable.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { cycle } from '@sapphire/iterator-utilities';\n\nconst iterable = cycle([1, 2, 3]);\nfor (const element of iterable) {\n\tconsole.log(element);\n\t// Output: 1, 2, 3, 1, 2, 3, 1, 2, 3, ...\n}\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 44,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 45,
              "name": "iterable",
              "comment": {
                "description": "An iterator to cycle over.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 44,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 44,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 46,
      "name": "difference",
      "source": {
        "line": 25,
        "file": "difference.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/difference.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 47,
          "name": "difference",
          "comment": {
            "description": "Creates an iterable with the elements of the first iterable that are not in the second iterable.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { difference } from '@sapphire/iterator-utilities';\n\nconst first = [1, 2, 3, 4, 5];\nconst second = [3, 4, 5, 6, 7];\nconsole.log([...difference(first, second)]);\n// Output: [1, 2]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire `second` iterator to build the set of elements to exclude from `first`."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 48,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 49,
              "name": "first",
              "comment": {
                "description": "An iterator to return elements from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 48,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 50,
              "name": "second",
              "comment": {
                "description": "An iterator that contains elements to exclude from the result.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 48,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 48,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 53,
      "name": "drop",
      "source": {
        "line": 23,
        "file": "drop.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/drop.ts#L23"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 54,
          "name": "drop",
          "comment": {
            "description": "Advances the iterable by `count` elements from the iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that contains the elements of the provided iterator, except for the first `count` elements."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { drop } from '@sapphire/iterator-utilities';\n\nconst iterable = drop(iterator, 2);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 55,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 56,
              "name": "iterable",
              "comment": {
                "description": "An iterator to drop values from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 55,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 57,
              "name": "count",
              "comment": {
                "description": "The number of elements to drop from the start of the iteration.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 55,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 59,
      "name": "dropLast",
      "source": {
        "line": 28,
        "file": "dropLast.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/dropLast.ts#L28"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 60,
          "name": "dropLast",
          "comment": {
            "description": "Consumes the iterable, creating a new iterator without the last `count` elements from the iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that contains the elements of the provided iterator, except for the last `count` elements."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { dropLast } from '@sapphire/iterator-utilities';\n\nconst iterable = dropLast([1, 2, 3, 4, 5], 2);\nconsole.log([...iterable]);\n// Output: [1, 2, 3]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 61,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 62,
              "name": "iterable",
              "comment": {
                "description": "An iterator to drop values from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 61,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 63,
              "name": "count",
              "comment": {
                "description": "The number of values to drop from the end of the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 61,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 65,
      "name": "dropWhile",
      "source": {
        "line": 23,
        "file": "dropWhile.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/dropWhile.ts#L23"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 66,
          "name": "dropWhile",
          "comment": {
            "description": "Creates a new iterator without the elements that satisfy the specified test.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that produces elements from the given iterator that don't satisfy the specified test."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { dropWhile } from '@sapphire/iterator-utilities';\n\nconst iterable = dropWhile([1, 2, 3, 4, 5], (value) => value < 3);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```"
              },
              {
                "name": "seealso",
                "text": "{@link filter} or {@link takeWhile} for the opposite behavior."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 67,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 68,
              "name": "FilteredType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 69,
              "name": "iterable",
              "comment": {
                "description": "An iterator to drop values from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 67,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 70,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. It should return a falsy value to make the element yielded by the iterator helper, and a truthy value otherwise.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 72,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 73,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 67,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 74,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "predicate",
                      "asserts": false,
                      "name": "element",
                      "type": {
                        "kind": "reference",
                        "id": 68,
                        "name": "FilteredType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Exclude",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 67,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  },
                  {
                    "kind": "reference",
                    "id": 68,
                    "name": "FilteredType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        },
        {
          "id": 75,
          "name": "dropWhile",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 76,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 77,
              "name": "iterable",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 76,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 78,
              "name": "callbackFn",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 80,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 81,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 76,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 82,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 76,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 84,
      "name": "empty",
      "source": {
        "line": 17,
        "file": "empty.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/empty.ts#L17"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 85,
          "name": "empty",
          "comment": {
            "description": "Creates an empty iterator.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An empty iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { empty } from '@sapphire/iterator-utilities';\n\nconst iterable = empty();\nconsole.log([...iterable]);\n// Output: []\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 86,
              "name": "ElementType",
              "constraint": null,
              "default": {
                "kind": "intrinsic",
                "type": "never"
              }
            }
          ],
          "parameters": [],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 86,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 87,
      "name": "enumerate",
      "source": {
        "line": 23,
        "file": "enumerate.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/enumerate.ts#L23"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 88,
          "name": "enumerate",
          "comment": {
            "description": "Creates a new iterable that yields the index and value of each element.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the index and value of each element in the source iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { enumerate } from '@sapphire/iterator-utilities';\n\nconst iterable = ['a', 'b', 'c'];\nfor (const [index, value] of enumerate(iterable)) {\n\tconsole.log(`Index: ${index}, Value: ${value}`);\n\t// Output: Index: 0, Value: a\n\t// Output: Index: 1, Value: b\n\t// Output: Index: 2, Value: c\n}\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 89,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 90,
              "name": "iterable",
              "comment": {
                "description": "An iterator to enumerate.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 89,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "tuple",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  },
                  {
                    "kind": "reference",
                    "id": 89,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 91,
      "name": "every",
      "source": {
        "line": 28,
        "file": "every.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/every.ts#L28"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 92,
          "name": "every",
          "comment": {
            "description": "Tests whether all elements in the iterable pass the test implemented by the provided function.",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if callbackFn returns a truthy value for every element. Otherwise, `false`."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { every } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(every(iterable, (value) => value < 10));\n// Output: true\n\nconsole.log(every(iterable, (value) => value < 3));\n// Output: false\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 93,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 94,
              "name": "FilteredType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 95,
              "name": "iterable",
              "comment": {
                "description": "The iterator to check.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 93,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 96,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 98,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 99,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 93,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 100,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "predicate",
                      "asserts": false,
                      "name": "element",
                      "type": {
                        "kind": "reference",
                        "id": 94,
                        "name": "FilteredType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "predicate",
            "asserts": false,
            "name": "iterable",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "IterableIterator",
              "packageName": "typescript",
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 94,
                  "name": "FilteredType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              ]
            }
          }
        },
        {
          "id": 101,
          "name": "every",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 102,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 103,
              "name": "iterable",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 102,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 104,
              "name": "callbackFn",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 106,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 107,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 102,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 108,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 109,
      "name": "filter",
      "source": {
        "line": 21,
        "file": "filter.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/filter.ts#L21"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 110,
          "name": "filter",
          "comment": {
            "description": "Creates an iterable with the elements that pass the test implemented by the provided function.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that produces elements from the given iterator that satisfy the specified test."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { filter } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...filter(iterable, (value) => value % 2 === 0)]);\n// Output: [2, 4]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 111,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 112,
              "name": "FilteredType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 113,
              "name": "iterable",
              "comment": {
                "description": "The iterator to filter.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 111,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 114,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. It should return a truthy value to make the element yielded by the iterator helper, and a falsy value otherwise.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 116,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 117,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 111,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 118,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "predicate",
                      "asserts": false,
                      "name": "element",
                      "type": {
                        "kind": "reference",
                        "id": 112,
                        "name": "FilteredType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 112,
                "name": "FilteredType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        },
        {
          "id": 119,
          "name": "filter",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 120,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 121,
              "name": "iterable",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 120,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 122,
              "name": "callbackFn",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 124,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 125,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 120,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 126,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 120,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 128,
      "name": "find",
      "source": {
        "line": 25,
        "file": "find.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/find.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 129,
          "name": "find",
          "comment": {
            "description": "Advances the iterable until it finds the element, returning it if it's found and `undefined` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": ""
              },
              {
                "name": "example",
                "text": "```typescript\nimport { find } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(find(iterable, (value) => value % 2 === 0));\n// Output: 2\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the iterator until the value is found or the iterator is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 130,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 131,
              "name": "FilteredType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 132,
              "name": "iterable",
              "comment": {
                "description": "An iterator to search for a value in.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 130,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 133,
              "name": "callbackFn",
              "comment": {
                "description": "A function that determines if a value is the one being searched for.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 135,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 136,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 130,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 137,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "predicate",
                      "asserts": false,
                      "name": "element",
                      "type": {
                        "kind": "reference",
                        "id": 131,
                        "name": "FilteredType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 131,
                "name": "FilteredType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        },
        {
          "id": 138,
          "name": "find",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 139,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 140,
              "name": "iterable",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 139,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 141,
              "name": "callbackFn",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 143,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 144,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 139,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 145,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 139,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 146,
      "name": "findIndex",
      "source": {
        "line": 25,
        "file": "findIndex.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/findIndex.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 147,
          "name": "findIndex",
          "comment": {
            "description": "Advances the iterable until it finds the element, returning its index if it's found and `-1` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The index of the first element that satisfies the predicate, or `-1` if no elements satisfy the predicate."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { findIndex } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(findIndex(iterable, (value) => value % 2 === 0));\n// Output: 1\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the iterator until the value is found or the iterator is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 148,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 149,
              "name": "iterable",
              "comment": {
                "description": "An iterator to search for an element in.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 148,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 150,
              "name": "callbackFn",
              "comment": {
                "description": "A function that determines if an element is the one being searched for.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 152,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 153,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 148,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 154,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 155,
      "name": "first",
      "source": {
        "line": 22,
        "file": "first.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/first.ts#L22"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 156,
          "name": "first",
          "comment": {
            "description": "Consumes the first element of the iterable, returning it if it's found and `undefined` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The first value of the iterator, or `undefined` if the iterator is empty."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { first } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(first(iterable));\n// Output: 1\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the first value of the iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 157,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 158,
              "name": "iterable",
              "comment": {
                "description": "The iterator to return the first value of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 157,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 157,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 159,
      "name": "flat",
      "source": {
        "line": 19,
        "file": "flat.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/flat.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 160,
          "name": "flat",
          "comment": {
            "description": "Creates an iterable that yields the elements of each iterable in the input iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the entries of each iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { flat } from '@sapphire/iterator-utilities';\n\nconst iterable = flat([[1, 2], [3, 4], [5, 6]]);\nconsole.log([...iterable]);\n// Output: [1, 2, 3, 4, 5, 6]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 161,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 162,
              "name": "iterables",
              "comment": {
                "description": "An iterator to map.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 187,
                    "name": "IterableResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 161,
                        "name": "ElementType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 161,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 163,
      "name": "flatMap",
      "source": {
        "line": 21,
        "file": "flatMap.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/flatMap.ts#L21"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 164,
          "name": "flatMap",
          "comment": {
            "description": "Creates an iterable that yields the elements of each iterable returned by the provided function on each element of the input iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that applies a function to each element of the input iterator and yields the results."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { flatMap } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3];\nconsole.log([...flatMap(iterable, (value) => [value, value * 2])]);\n// Output: [1, 2, 2, 4, 3, 6]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 165,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 166,
              "name": "MappedType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 167,
              "name": "iterable",
              "comment": {
                "description": "An iterator to map.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 165,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 168,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. It should return an iterator or iterable that yields elements to be yielded by `flatMap()`, or a single non-iterator/iterable value to be yielded.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 170,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 171,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 165,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 172,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 187,
                      "name": "IterableResolvable",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": [
                        {
                          "kind": "reference",
                          "id": 166,
                          "name": "MappedType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      ]
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 166,
                "name": "MappedType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 173,
      "name": "forEach",
      "source": {
        "line": 24,
        "file": "forEach.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/forEach.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 174,
          "name": "forEach",
          "comment": {
            "description": "Executes a provided function once for each iterable element.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { forEach } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nforEach(iterable, (value) => console.log(value));\n// Output: 1, 2, 3, 4, 5\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 175,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 176,
              "name": "iterable",
              "comment": {
                "description": "An iterator to iterate over.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 175,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 177,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. Its return value is discarded.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 179,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 180,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 175,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 181,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "void"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "void"
          }
        }
      ]
    },
    {
      "id": 182,
      "name": "from",
      "source": {
        "line": 17,
        "file": "from.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/from.ts#L17"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 183,
          "name": "from",
          "comment": {
            "description": "Resolves an iterable from an iterable or iterator-like object.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { from } from '@sapphire/iterator-utilities';\n\nconst iterable = from([1, 2, 3, 4, 5]);\nfor (const element of iterable) {\n\tconsole.log(element);\n\t// Output: 1, 2, 3, 4, 5\n}\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 184,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 185,
              "name": "ResolvableType",
              "constraint": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 184,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 186,
              "name": "value",
              "comment": {
                "description": "The value to convert to an iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 185,
                "name": "ResolvableType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 189,
            "name": "IterableResolved",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 185,
                "name": "ResolvableType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 191,
      "name": "indexOf",
      "source": {
        "line": 24,
        "file": "indexOf.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/indexOf.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 192,
          "name": "indexOf",
          "comment": {
            "description": "Advances the iterable until it finds the element, returning its index if it's found and `-1` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The index of the first occurrence of the value in the iterator, or `-1` if the value is not found."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { indexOf } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(indexOf(iterable, 3));\n// Output: 2\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the iterator until the value is found or the iterator is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 193,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 194,
              "name": "iterable",
              "comment": {
                "description": "An iterator to search for a value in.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 193,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 195,
              "name": "value",
              "comment": {
                "description": "The value to search for.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 193,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 197,
      "name": "intersect",
      "source": {
        "line": 26,
        "file": "intersect.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/intersect.ts#L26"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 198,
          "name": "intersect",
          "comment": {
            "description": "Creates an iterable with the elements that are in both input iterables.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { intersect } from '@sapphire/iterator-utilities';\n\nconst iterable = intersect([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]);\nconsole.log([...iterable]);\n// Output: [3, 4, 5]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire `second` iterator to build the set of elements to intersect with `first`."
              },
              {
                "name": "seealso",
                "text": "{@link difference} for the opposite behavior."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 199,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 200,
              "name": "first",
              "comment": {
                "description": "An iterator to return elements from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 199,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 201,
              "name": "second",
              "comment": {
                "description": "An iterator that contains elements to include in the result.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 199,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 199,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 202,
      "name": "isEmpty",
      "source": {
        "line": 24,
        "file": "isEmpty.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/isEmpty.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 203,
          "name": "isEmpty",
          "comment": {
            "description": "Advances the iterable once, returning `true` if it's exhausted and `false` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if the iterator is empty; otherwise, `false`."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { isEmpty } from '@sapphire/iterator-utilities';\n\nconsole.log(isEmpty([]));\n// Output: true\n\nconsole.log(isEmpty([1, 2, 3, 4, 5]));\n// Output: false\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the first value of the iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 204,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 205,
              "name": "iterable",
              "comment": {
                "description": "The iterator to check for emptiness.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 204,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 206,
      "name": "last",
      "source": {
        "line": 23,
        "file": "last.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/last.ts#L23"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 207,
          "name": "last",
          "comment": {
            "description": "Consumes the iterable until it's exhausted, returning the last element.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The value at the last position in the source iterator, or `undefined` if the iterator is empty."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { last } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(last(iterable));\n// Output: 5\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator to find the last value."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 208,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 209,
              "name": "iterable",
              "comment": {
                "description": "An iterator to return the last value of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 208,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 208,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 210,
      "name": "map",
      "source": {
        "line": 20,
        "file": "map.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/map.ts#L20"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 211,
          "name": "map",
          "comment": {
            "description": "Creates an iterable with the results of calling a provided function on each element.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { map } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...map(iterable, (value) => value * 2)]);\n// Output: [2, 4, 6, 8, 10]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 212,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 213,
              "name": "MappedType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 214,
              "name": "iterable",
              "comment": {
                "description": "An iterator to map over.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 212,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 215,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. Its return value is yielded by the iterator helper.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 217,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 218,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 212,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 219,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 213,
                      "name": "MappedType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 213,
                "name": "MappedType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 220,
      "name": "max",
      "source": {
        "line": 24,
        "file": "max.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/max.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 221,
          "name": "max",
          "comment": {
            "description": "Consumes the iterable and returns the highest number element. If the iterable is empty, or contains only non-number values, it returns `null`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The maximum value in the input iterator, or `null` if the iterator is empty or contains only non-number values."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { max } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(max(iterable));\n// Output: 5\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 222,
              "name": "iterable",
              "comment": {
                "description": "An iterator of number values to determine the maximum value of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "NumberResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "intrinsic",
                "type": "number"
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 223,
      "name": "min",
      "source": {
        "line": 24,
        "file": "min.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/min.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 224,
          "name": "min",
          "comment": {
            "description": "Consumes the iterable and returns the lowest number element. If the iterable is empty, or contains only non-number values, it returns `null`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The minimum value in the input iterator, or `null` if the iterator is empty or contains only non-number values."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { min } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(min(iterable));\n// Output: 1\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 225,
              "name": "iterable",
              "comment": {
                "description": "An iterator of number values to determine the minimum value of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "NumberResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "intrinsic",
                "type": "number"
              },
              {
                "kind": "literal",
                "value": "null"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 226,
      "name": "partition",
      "source": {
        "line": 32,
        "file": "partition.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/partition.ts#L32"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 227,
          "name": "partition",
          "comment": {
            "description": "Consumes the iterable and creates two arrays, one with the elements that pass the test and another with the elements that don't.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An array containing two iterators. The first iterator contains elements that satisfy the predicate, and the\nsecond iterator contains elements that do not."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { partition } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconst [even, odd] = partition(iterable, (value) => value % 2 === 0);\n\nconsole.log(even);\n// Output: [2, 4]\n\nconsole.log(odd);\n// Output: [1, 3, 5]\n```"
              },
              {
                "name": "remarks",
                "text": "This function collects all elements of the provided iterator into two arrays based on the predicate before returning\nthem, which may not be desirable for large iterators."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 228,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 229,
              "name": "FilteredType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 230,
              "name": "iterable",
              "comment": {
                "description": "An iterator to partition.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 228,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 231,
              "name": "predicate",
              "comment": {
                "description": "A function that determines which partition an element belongs to.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 233,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 234,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 228,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 235,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "predicate",
                      "asserts": false,
                      "name": "value",
                      "type": {
                        "kind": "reference",
                        "id": 229,
                        "name": "FilteredType",
                        "packageName": "@sapphire/iterator-utilities",
                        "typeArguments": []
                      }
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "tuple",
            "types": [
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 229,
                  "name": "FilteredType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              },
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": null,
                  "name": "Exclude",
                  "packageName": "typescript",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 228,
                      "name": "ElementType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    },
                    {
                      "kind": "reference",
                      "id": 229,
                      "name": "FilteredType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "id": 236,
          "name": "partition",
          "comment": {
            "description": null,
            "blockTags": [],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 237,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 238,
              "name": "iterable",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 237,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 239,
              "name": "predicate",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 241,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 242,
                        "name": "value",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 237,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 243,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "tuple",
            "types": [
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 237,
                  "name": "ElementType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              },
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 237,
                  "name": "ElementType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 244,
      "name": "peekable",
      "source": {
        "line": 30,
        "file": "peekable.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/peekable.ts#L30"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 245,
          "name": "peekable",
          "comment": {
            "description": "Creates an iterator that allows you to peek at the next element without advancing the iterator.",
            "blockTags": [
              {
                "name": "returns",
                "text": "A new peekable iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { peekable } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconst peekableIterator = peekable(iterable);\n\nconsole.log(peekableIterator.next());\n// Output: { value: 1, done: false }\n\nconsole.log(peekableIterator.peek());\n// Output: { value: 2, done: false }\n\nconsole.log(peekableIterator.next());\n// Output: { value: 2, done: false }\n\nconsole.log(peekableIterator.next());\n// Output: { value: 3, done: false }\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 246,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 247,
              "name": "iterable",
              "comment": {
                "description": "The iterable to create a peekable iterator from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 246,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 248,
            "name": "Peekable",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 246,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 263,
      "name": "prepend",
      "source": {
        "line": 21,
        "file": "prepend.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/prepend.ts#L21"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 264,
          "name": "prepend",
          "comment": {
            "description": "Creates an iterator with the provided iterables prepended to the first iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the values of the provided iterator followed by the values of the provided iterables."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { prepend } from '@sapphire/iterator-utilities';\n\nconsole.log([...prepend([3, 4, 5], [1, 2])]);\n// Output: [1, 2, 3, 4, 5]\n```"
              },
              {
                "name": "seealso",
                "text": "{@link append} to append values to the end of an iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 265,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 266,
              "name": "iterable",
              "comment": {
                "description": "The iterator to prepend values to.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 265,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 267,
              "name": "iterables",
              "comment": {
                "description": "The iterables to prepend to the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 187,
                  "name": "IterableResolvable",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 265,
                      "name": "ElementType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 265,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 268,
      "name": "product",
      "source": {
        "line": 24,
        "file": "product.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/product.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 269,
          "name": "product",
          "comment": {
            "description": "Consumes the iterable and returns the product of all the elements. If the iterable is empty, it returns `1`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The product of the elements in the input iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { product } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(product(iterable));\n// Output: 120\n\nconst iterable = [1, 2, 3, 4, 5, 0];\nconsole.log(product(iterable));\n// Output: 0\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 270,
              "name": "iterable",
              "comment": {
                "description": "An iterator to calculate the product of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 271,
      "name": "range",
      "source": {
        "line": 33,
        "file": "range.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/range.ts#L33"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 272,
          "name": "range",
          "comment": {
            "description": "Creates an iterable with the numbers from `start` to `stop` (exclusive) with an optional step.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { range } from '@sapphire/iterator-utilities';\n\nconst iterable = range(0, 5);\nconsole.log([...iterable]);\n// Output: [0, 1, 2, 3, 4]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = range(5, 0);\nconsole.log([...iterable]);\n// Output: [5, 4, 3, 2, 1]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = range(0, 5, 2);\nconsole.log([...iterable]);\n// Output: [0, 2, 4]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 273,
              "name": "start",
              "comment": {
                "description": "The value of the first number in the range.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 274,
              "name": "end",
              "comment": {
                "description": "The end value of the range.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 275,
              "name": "step",
              "comment": {
                "description": "The amount to increment the range by.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 276,
      "name": "reduce",
      "source": {
        "line": 33,
        "file": "reduce.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/reduce.ts#L33"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 277,
          "name": "reduce",
          "comment": {
            "description": "Consumes the iterable and reduces it to the reducer function's result.",
            "blockTags": [
              {
                "name": "returns",
                "text": ""
              },
              {
                "name": "example",
                "text": "```typescript\nimport { reduce } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(reduce(iterable, (accumulator, currentValue) => accumulator + currentValue));\n// Output: 15\n```"
              },
              {
                "name": "remarks",
                "text": "If `initialValue` is not provided, the first element of the iterator is used as the initial value of `accumulator`,\nconsuming the first element."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 278,
              "name": "ElementType",
              "constraint": null,
              "default": null
            },
            {
              "id": 279,
              "name": "MappedType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 280,
              "name": "iterable",
              "comment": {
                "description": "An iterator to reduce.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 278,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 281,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. Its return value becomes the value\nof the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value\nbecomes the return value of `reduce()`.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 283,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 284,
                        "name": "accumulator",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 279,
                          "name": "MappedType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 285,
                        "name": "currentValue",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 278,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 286,
                        "name": "currentIndex",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 279,
                      "name": "MappedType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            },
            {
              "id": 287,
              "name": "initialValue",
              "comment": {
                "description": "A value to which `accumulator` is initialized the first time the callback is called. If\n`initialValue` is specified, `callbackFn` starts executing with the first element as `currentValue`. If\n`initialValue` is not specified, `accumulator` is initialized to the first element, and `callbackFn` starts executing\nwith the second element as `currentValue`. In this case, if the iterator is empty (so that there's no first value to\nreturn as `accumulator`), an error is thrown.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reference",
                "id": 279,
                "name": "MappedType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 279,
            "name": "MappedType",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 288,
      "name": "repeat",
      "source": {
        "line": 22,
        "file": "repeat.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/repeat.ts#L22"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 289,
          "name": "repeat",
          "comment": {
            "description": "Creates an iterable that repeats the input iterable `count` times.",
            "blockTags": [
              {
                "name": "example",
                "text": "```typescript\nimport { repeat } from '@sapphire/iterator-utilities';\n\nconst iterator = repeat('Hello, world!', 3);\nconsole.log([...iterator]);\n// Output: ['Hello, world!', 'Hello, world!', 'Hello, world!']\n```"
              },
              {
                "name": "remarks",
                "text": "This function does not clone `value`, it will be repeated as a reference."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 290,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 291,
              "name": "value",
              "comment": {
                "description": "The value to be repeated.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 290,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            },
            {
              "id": 292,
              "name": "count",
              "comment": {
                "description": "The number of times to repeat the value.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 290,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 293,
      "name": "reverse",
      "source": {
        "line": 25,
        "file": "reverse.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/reverse.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 294,
          "name": "reverse",
          "comment": {
            "description": "Consumes the iterable and returns a new iterable with the elements in reverse order.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator whose element correspond to the elements of the provided iterator in reverse order."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { reverse } from '@sapphire/iterator-utilities';\n\nconsole.log([...reverse([1, 2, 3, 4, 5])]);\n// Output: [5, 4, 3, 2, 1]\n\nconsole.log([...reverse('hello')]);\n// Output: ['o', 'l', 'l', 'e', 'h']\n```"
              },
              {
                "name": "remarks",
                "text": "This function collects all elements of the provided iterator into an array before yielding them in reverse order."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 295,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 296,
              "name": "iterable",
              "comment": {
                "description": "The iterator to reverse.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 295,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 295,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 297,
      "name": "slice",
      "source": {
        "line": 66,
        "file": "slice.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/slice.ts#L66"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 298,
          "name": "slice",
          "comment": {
            "description": "Produces an iterable with the elements from the `start` index to the `end` index (exclusive).",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that contains the elements of the provided iterator from `start` to `end`."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { slice } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(, 1, 3)]);\n// Output: [2, 3]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, -2)]);\n// Output: [4, 5]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2)]);\n// Output: [3, 4, 5]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2, -1)]);\n// Output: [3, 4]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, -2, -1)]);\n// Output: [4]\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...slice(iterable, 2, 1)]);\n// Output: []\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the input iterator based on the `start` and `end` values, therefore, you should not use the\noriginal iterator after calling this function."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 299,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 300,
              "name": "iterable",
              "comment": {
                "description": "The iterator to slice.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 299,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 301,
              "name": "start",
              "comment": {
                "description": "The index at which to begin extraction.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 302,
              "name": "end",
              "comment": {
                "description": "The index at which to end extraction.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 299,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 303,
      "name": "some",
      "source": {
        "line": 33,
        "file": "some.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/some.ts#L33"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 304,
          "name": "some",
          "comment": {
            "description": "Advances the iterable until it finds a matching element, returning `true` if it's found and `false` otherwise.",
            "blockTags": [
              {
                "name": "returns",
                "text": "`true` if the callback function returns a truthy value for at least one element. Otherwise, `false`."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { some } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(some(iterable, (value) => value % 2 === 0));\n// Output: true\n```"
              },
              {
                "name": "example",
                "text": "```typescript\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(some(iterable, (value) => value % 6 === 0));\n// Output: false\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the iterator until the value is found or the iterator is exhausted."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 305,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 306,
              "name": "iterable",
              "comment": {
                "description": "An iterator to search for a value in.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 305,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 307,
              "name": "callbackFn",
              "comment": {
                "description": "A function to execute for each element produced by the iterator. It should return a truthy value to\nindicate the element passes the test, and a falsy value otherwise.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 309,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 310,
                        "name": "element",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 305,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 311,
                        "name": "index",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "intrinsic",
                          "type": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "boolean"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 312,
      "name": "sorted",
      "source": {
        "line": 24,
        "file": "sorted.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/sorted.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 313,
          "name": "sorted",
          "comment": {
            "description": "Consumes the iterable and returns a new iterable with the elements sorted.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the values of the provided iterator in sorted order."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { sorted } from '@sapphire/iterator-utilities';\n\nconst iterable = [5, 3, 1, 4, 2];\nconsole.log([...sorted(iterable)]);\n// Output: [1, 2, 3, 4, 5]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire input iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 314,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 315,
              "name": "iterable",
              "comment": {
                "description": "An iterator to sort.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 314,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 316,
              "name": "compareFn",
              "comment": {
                "description": "A function that defines the sort order. If omitted, the values are sorted in ascending order.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": true,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 318,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 319,
                        "name": "a",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 314,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      },
                      {
                        "id": 320,
                        "name": "b",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": false,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 314,
                          "name": "ElementType",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": []
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "intrinsic",
                      "type": "number"
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 314,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 321,
      "name": "starMap",
      "source": {
        "line": 27,
        "file": "starMap.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/starMap.ts#L27"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 322,
          "name": "starMap",
          "comment": {
            "description": "Creates an iterable with the results of calling a provided function on each element of the input iterables as the function's parameters.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterable iterator that yields the mapped elements."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { starMap } from '@sapphire/iterator-utilities';\n\nconst iterable = [[1, 2], [3, 4], [5, 6]];\nconsole.log([...starMap(iterable, (a, b) => a + b)]);\n// Output: [3, 7, 11]\n```"
              },
              {
                "name": "remarks",
                "text": "While very similar to {@link map}, `starMap` takes an iterable of iterables (which can be an array of tuples) and\ncalls the function with each inner iterable's values as the function's parameters. {@link map} calls the function\nwith the value and the index by comparison."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 323,
              "name": "ElementType",
              "constraint": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              },
              "default": null
            },
            {
              "id": 324,
              "name": "MappedType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 325,
              "name": "iterable",
              "comment": {
                "description": "The iterable to map over.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 323,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 326,
              "name": "callbackFn",
              "comment": {
                "description": "The callback function to apply to each element.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reflection",
                "properties": null,
                "signatures": [
                  {
                    "id": 328,
                    "name": "__type",
                    "comment": {
                      "description": null,
                      "blockTags": [],
                      "modifierTags": []
                    },
                    "typeParameters": [],
                    "parameters": [
                      {
                        "id": 329,
                        "name": "args",
                        "comment": {
                          "description": null,
                          "blockTags": [],
                          "modifierTags": []
                        },
                        "rest": true,
                        "optional": false,
                        "type": {
                          "kind": "reference",
                          "id": 330,
                          "name": "StarMapParameters",
                          "packageName": "@sapphire/iterator-utilities",
                          "typeArguments": [
                            {
                              "kind": "reference",
                              "id": 323,
                              "name": "ElementType",
                              "packageName": "@sapphire/iterator-utilities",
                              "typeArguments": []
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "kind": "reference",
                      "id": 324,
                      "name": "MappedType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  }
                ],
                "methods": null
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 324,
                "name": "MappedType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 332,
      "name": "sum",
      "source": {
        "line": 24,
        "file": "sum.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/sum.ts#L24"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 333,
          "name": "sum",
          "comment": {
            "description": "Consumes the iterable and returns the sum of all the elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "The sum of the numbers in the input iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { sum } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log(sum(iterable));\n// Output: 15\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 334,
              "name": "iterable",
              "comment": {
                "description": "An iterator of numbers to calculate the sum of.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "NumberResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "number"
          }
        }
      ]
    },
    {
      "id": 335,
      "name": "take",
      "source": {
        "line": 23,
        "file": "take.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/take.ts#L23"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 336,
          "name": "take",
          "comment": {
            "description": "Creates an iterable with the first `count` elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields at most `count` values from the provided iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { take } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...take(iterable, 2)]);\n// Output: [1, 2]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 337,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 338,
              "name": "iterable",
              "comment": {
                "description": "The iterator to take values from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 337,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 339,
              "name": "count",
              "comment": {
                "description": "The maximum number of values to take from the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 337,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 340,
      "name": "takeLast",
      "source": {
        "line": 29,
        "file": "takeLast.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/takeLast.ts#L29"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 341,
          "name": "takeLast",
          "comment": {
            "description": "Consumes the iterable and returns a new iterable with the last `count` elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that contains the last `count` elements of the provided iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { takeLast } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconsole.log([...takeLast(iterable, 2)]);\n// Output: [4, 5]\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 342,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 343,
              "name": "iterable",
              "comment": {
                "description": "An iterator to take values from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 342,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 344,
              "name": "count",
              "comment": {
                "description": "The number of values to take from the end of the iterator.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 342,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 345,
      "name": "tee",
      "source": {
        "line": 28,
        "file": "tee.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/tee.ts#L28"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 346,
          "name": "tee",
          "comment": {
            "description": "Creates `count` independent iterators from the input iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An array of `count` iterators that each yield the same values as the input iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { tee } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 3, 4, 5];\nconst [iter1, iter2] = tee(iterable, 2);\nconsole.log([...iter1]);\n// Output: [1, 2, 3, 4, 5]\n\nconsole.log([...iter2]);\n// Output: [1, 2, 3, 4, 5]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 347,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 348,
              "name": "iterable",
              "comment": {
                "description": "An iterator to tee.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 347,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 349,
              "name": "count",
              "comment": {
                "description": "The number of iterators to create.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "IterableIterator",
              "packageName": "typescript",
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": 347,
                  "name": "ElementType",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 350,
      "name": "toArray",
      "source": {
        "line": 35,
        "file": "toArray.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/toArray.ts#L35"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 351,
          "name": "toArray",
          "comment": {
            "description": "Consumes the iterable and returns an array with all the elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An array containing the values of the provided iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { toArray } from '@sapphire/iterator-utilities';\n\nconst array = [1, 2, 3, 4, 5];\nconsole.log(toArray(array));\n// Output: [1, 2, 3, 4, 5]\n\nconst set = new Set([1, 2, 3, 4, 5]);\nconsole.log(toArray(set));\n// Output: [1, 2, 3, 4, 5]\n\nconst map = new Map([['a', 1], ['b', 2], ['c', 3]]);\nconsole.log(toArray(map));\n// Output: [['a', 1], ['b', 2], ['c', 3]]\n\nconst string = 'hello';\nconsole.log(toArray(string));\n// Output: ['h', 'e', 'l', 'l', 'o']\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterator."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 352,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 353,
              "name": "iterable",
              "comment": {
                "description": "The iterator to convert to an array.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 352,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 352,
              "name": "ElementType",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 354,
      "name": "toIterableIterator",
      "source": {
        "line": 31,
        "file": "toIterableIterator.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/toIterableIterator.ts#L31"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 355,
          "name": "toIterableIterator",
          "comment": {
            "description": "Creates an iterable iterator from an iterable or iterator-like object.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterable iterator."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { toIterableIterator } from '@sapphire/iterator-utilities';\n\nconst array = [1, 2, 3, 4, 5];\nconsole.log([...toIterableIterator(array)]);\n// Output: [1, 2, 3, 4, 5]\n\nconst set = new Set([1, 2, 3, 4, 5]);\nconsole.log([...toIterableIterator(set)]);\n// Output: [1, 2, 3, 4, 5]\n\nconst map = new Map([['a', 1], ['b', 2], ['c', 3]]);\nconsole.log([...toIterableIterator(map)]);\n// Output: [['a', 1], ['b', 2], ['c', 3]]\n\nconst string = 'hello';\nconsole.log([...toIterableIterator(string)]);\n// Output: ['h', 'e', 'l', 'l', 'o']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 356,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 357,
              "name": "iterable",
              "comment": {
                "description": "The iterable or iterable-like object to convert.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 356,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 356,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 358,
      "name": "union",
      "source": {
        "line": 20,
        "file": "union.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/union.ts#L20"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 359,
          "name": "union",
          "comment": {
            "description": "Creates an iterable with the elements that are in either input iterable.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the union of the provided iterators."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { union } from '@sapphire/iterator-utilities';\n\nconst iterable1 = [1, 2, 3];\nconst iterable2 = [3, 4, 5];\nconsole.log([...union(iterable1, iterable2)]);\n// Output: [1, 2, 3, 4, 5]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 360,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 361,
              "name": "iterables",
              "comment": {
                "description": "The iterators to combine.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 187,
                  "name": "IterableResolvable",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": [
                    {
                      "kind": "reference",
                      "id": 360,
                      "name": "ElementType",
                      "packageName": "@sapphire/iterator-utilities",
                      "typeArguments": []
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 360,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 362,
      "name": "unique",
      "source": {
        "line": 19,
        "file": "unique.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/unique.ts#L19"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 363,
          "name": "unique",
          "comment": {
            "description": "Creates an iterable with the unique elements of the input iterable. Under the hood, it calls {@linkcode union} with the iterable itself.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An iterator that yields the values of the provided iterator with duplicates removed."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { unique } from '@sapphire/iterator-utilities';\n\nconst iterable = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5];\nconsole.log([...unique(iterable)]);\n// Output: [1, 2, 3, 4, 5]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 364,
              "name": "ElementType",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 365,
              "name": "iterable",
              "comment": {
                "description": "An iterator to remove duplicates from.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 364,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 364,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 366,
      "name": "unzip",
      "source": {
        "line": 28,
        "file": "unzip.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/unzip.ts#L28"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 367,
          "name": "unzip",
          "comment": {
            "description": "Creates an array for each element of the input iterable, transposing the input iterable. The opposite of {@linkcode zip}.",
            "blockTags": [
              {
                "name": "returns",
                "text": "An array of iterables that yield the values of the original iterable."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { unzip } from '@sapphire/iterator-utilities';\n\nconst iterable = [[1, 'a'], [2, 'b'], [3, 'c']];\nconst [numbers, letters] = unzip(iterable);\n\nconsole.log(numbers);\n// Output: [1, 2, 3]\n\nconsole.log(letters);\n// Output: ['a', 'b', 'c']\n```"
              },
              {
                "name": "remarks",
                "text": "This function consumes the entire iterable."
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 368,
              "name": "ElementType",
              "constraint": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 369,
              "name": "iterable",
              "comment": {
                "description": "An iterable to unzip.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": false,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 368,
                    "name": "ElementType",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 370,
            "name": "UnzipIterable",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 368,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 372,
      "name": "zip",
      "source": {
        "line": 25,
        "file": "zip.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/zip.ts#L25"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 373,
          "name": "zip",
          "comment": {
            "description": "Creates an iterable with the elements of the input iterables zipped together. The opposite of {@linkcode unzip}.",
            "blockTags": [
              {
                "name": "returns",
                "text": "A new iterable that yields the next value of each iterable in the list."
              },
              {
                "name": "example",
                "text": "```typescript\nimport { zip } from '@sapphire/iterator-utilities';\n\nconst iterable1 = [1, 2, 3];\nconst iterable2 = ['a', 'b', 'c'];\nconst iterable3 = [true, false, true];\n\nconsole.log(zip(iterable1, iterable2, iterable3));\n// Output: [\n// \t[1, 'a', true],\n// \t[2, 'b', false],\n// \t[3, 'c', true]\n// ]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 374,
              "name": "Iterables",
              "constraint": {
                "kind": "typeOperator",
                "operator": "readonly",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 187,
                    "name": "IterableResolvable",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": [
                      {
                        "kind": "intrinsic",
                        "type": "any"
                      }
                    ]
                  }
                }
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 375,
              "name": "iterables",
              "comment": {
                "description": "The iterables to zip together.",
                "blockTags": [],
                "modifierTags": []
              },
              "rest": true,
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 374,
                "name": "Iterables",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 376,
            "name": "ZipIterators",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 374,
                "name": "Iterables",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        }
      ]
    }
  ],
  "interfaces": [
    {
      "id": 248,
      "name": "Peekable",
      "source": {
        "line": 52,
        "file": "peekable.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/peekable.ts#L52"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 262,
          "name": "T",
          "constraint": null,
          "default": null
        }
      ],
      "properties": [],
      "methods": [
        {
          "id": 251,
          "name": "[iterator]",
          "source": {
            "line": 53,
            "file": "lib.es2015.iterable.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 248,
          "signatures": [
            {
              "id": 252,
              "name": "[iterator]",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "IterableIterator",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Peekable.T",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 253,
          "name": "next",
          "source": {
            "line": 43,
            "file": "lib.es2015.iterable.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 248,
          "signatures": [
            {
              "id": 254,
              "name": "next",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 255,
                  "name": "args",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": true,
                  "optional": false,
                  "type": {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "tuple",
                        "types": []
                      },
                      {
                        "kind": "tuple",
                        "types": [
                          {
                            "kind": "intrinsic",
                            "type": "undefined"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "IteratorResult",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Peekable.T",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 249,
          "name": "peek",
          "source": {
            "line": 53,
            "file": "peekable.ts",
            "path": "packages/iterator-utilities/src/lib",
            "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/peekable.ts#L53"
          },
          "parentId": 248,
          "signatures": [
            {
              "id": 250,
              "name": "peek",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "IteratorResult",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Peekable.T",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 256,
          "name": "return",
          "source": {
            "line": 44,
            "file": "lib.es2015.iterable.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 248,
          "signatures": [
            {
              "id": 257,
              "name": "return",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 258,
                  "name": "value",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "IteratorResult",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Peekable.T",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 259,
          "name": "throw",
          "source": {
            "line": 45,
            "file": "lib.es2015.iterable.d.ts",
            "path": "node_modules/typescript/lib",
            "url": null
          },
          "parentId": 248,
          "signatures": [
            {
              "id": 260,
              "name": "throw",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "typeParameters": [],
              "parameters": [
                {
                  "id": 261,
                  "name": "e",
                  "comment": {
                    "description": null,
                    "blockTags": [],
                    "modifierTags": []
                  },
                  "rest": false,
                  "optional": true,
                  "type": {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                }
              ],
              "returnType": {
                "kind": "reference",
                "id": null,
                "name": "IteratorResult",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 262,
                    "name": "Peekable.T",
                    "packageName": "@sapphire/iterator-utilities",
                    "typeArguments": []
                  },
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "namespaces": [],
  "typeAliases": [
    {
      "id": 187,
      "name": "IterableResolvable",
      "source": {
        "line": 38,
        "file": "from.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/from.ts#L38"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 188,
          "name": "ElementType",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "union",
        "types": [
          {
            "kind": "reference",
            "id": null,
            "name": "Iterable",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 188,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": null,
            "name": "Iterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 188,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          },
          {
            "kind": "reference",
            "id": null,
            "name": "IterableIterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 188,
                "name": "ElementType",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          }
        ]
      }
    },
    {
      "id": 189,
      "name": "IterableResolved",
      "source": {
        "line": 40,
        "file": "from.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/from.ts#L40"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 190,
          "name": "Type",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 190,
          "name": "Type",
          "packageName": "@sapphire/iterator-utilities",
          "typeArguments": []
        },
        "extendsType": {
          "kind": "reference",
          "id": null,
          "name": "IterableIterator",
          "packageName": "typescript",
          "typeArguments": [
            {
              "kind": "inferred",
              "type": "Output"
            }
          ]
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "IterableIterator",
          "packageName": "typescript",
          "typeArguments": [
            {
              "kind": "reference",
              "id": null,
              "name": "Output",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            }
          ]
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 190,
            "name": "Type",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": []
          },
          "extendsType": {
            "kind": "reference",
            "id": null,
            "name": "Iterable",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "inferred",
                "type": "Output"
              }
            ]
          },
          "trueType": {
            "kind": "reference",
            "id": null,
            "name": "Iterator",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": null,
                "name": "Output",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            ]
          },
          "falseType": {
            "kind": "conditional",
            "checkType": {
              "kind": "reference",
              "id": 190,
              "name": "Type",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            },
            "extendsType": {
              "kind": "reference",
              "id": null,
              "name": "Iterator",
              "packageName": "typescript",
              "typeArguments": [
                {
                  "kind": "inferred",
                  "type": "Output"
                }
              ]
            },
            "trueType": {
              "kind": "reference",
              "id": null,
              "name": "Iterator",
              "packageName": "typescript",
              "typeArguments": [
                {
                  "kind": "reference",
                  "id": null,
                  "name": "Output",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              ]
            },
            "falseType": {
              "kind": "intrinsic",
              "type": "never"
            }
          }
        }
      }
    },
    {
      "id": 330,
      "name": "StarMapParameters",
      "source": {
        "line": 38,
        "file": "starMap.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/starMap.ts#L38"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 331,
          "name": "ElementType",
          "constraint": null,
          "default": null
        }
      ],
      "type": {
        "kind": "conditional",
        "checkType": {
          "kind": "reference",
          "id": 331,
          "name": "ElementType",
          "packageName": "@sapphire/iterator-utilities",
          "typeArguments": []
        },
        "extendsType": {
          "kind": "typeOperator",
          "operator": "readonly",
          "type": {
            "kind": "tuple",
            "types": [
              {
                "kind": "rest",
                "type": {
                  "kind": "inferred",
                  "type": "ElementTypeEntry"
                }
              }
            ]
          }
        },
        "trueType": {
          "kind": "reference",
          "id": null,
          "name": "ElementTypeEntry",
          "packageName": "@sapphire/iterator-utilities",
          "typeArguments": []
        },
        "falseType": {
          "kind": "conditional",
          "checkType": {
            "kind": "reference",
            "id": 331,
            "name": "ElementType",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": []
          },
          "extendsType": {
            "kind": "reference",
            "id": 187,
            "name": "IterableResolvable",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": [
              {
                "kind": "inferred",
                "type": "ElementType"
              }
            ]
          },
          "trueType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": null,
              "name": "ElementType",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            }
          },
          "falseType": {
            "kind": "intrinsic",
            "type": "never"
          }
        }
      }
    },
    {
      "id": 370,
      "name": "UnzipIterable",
      "source": {
        "line": 59,
        "file": "unzip.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/unzip.ts#L59"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 371,
          "name": "ElementType",
          "constraint": {
            "kind": "typeOperator",
            "operator": "readonly",
            "type": {
              "kind": "array",
              "type": {
                "kind": "intrinsic",
                "type": "any"
              }
            }
          },
          "default": null
        }
      ],
      "type": {
        "kind": "mapped",
        "parameter": "P",
        "parameterType": {
          "kind": "typeOperator",
          "operator": "keyof",
          "type": {
            "kind": "reference",
            "id": 371,
            "name": "ElementType",
            "packageName": "@sapphire/iterator-utilities",
            "typeArguments": []
          }
        },
        "nameType": null,
        "templateType": {
          "kind": "array",
          "type": {
            "kind": "indexedAccess",
            "objectType": {
              "kind": "reference",
              "id": 371,
              "name": "ElementType",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            },
            "indexType": {
              "kind": "reference",
              "id": null,
              "name": "P",
              "packageName": "@sapphire/iterator-utilities",
              "typeArguments": []
            }
          }
        },
        "readonly": "-",
        "optional": null
      }
    },
    {
      "id": 376,
      "name": "ZipIterators",
      "source": {
        "line": 40,
        "file": "zip.ts",
        "path": "packages/iterator-utilities/src/lib",
        "url": "https://github.com/sapphiredev/utilities/blob/c53a780f775faac13682c562bfa3a699b9423ef6/packages/iterator-utilities/src/lib/zip.ts#L40"
      },
      "namespaceParentId": null,
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 377,
          "name": "Iterators",
          "constraint": {
            "kind": "typeOperator",
            "operator": "readonly",
            "type": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "intrinsic",
                    "type": "any"
                  }
                ]
              }
            }
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reference",
        "id": null,
        "name": "IterableIterator",
        "packageName": "typescript",
        "typeArguments": [
          {
            "kind": "mapped",
            "parameter": "P",
            "parameterType": {
              "kind": "typeOperator",
              "operator": "keyof",
              "type": {
                "kind": "reference",
                "id": 377,
                "name": "Iterators",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              }
            },
            "nameType": null,
            "templateType": {
              "kind": "conditional",
              "checkType": {
                "kind": "indexedAccess",
                "objectType": {
                  "kind": "reference",
                  "id": 377,
                  "name": "Iterators",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                },
                "indexType": {
                  "kind": "reference",
                  "id": null,
                  "name": "P",
                  "packageName": "@sapphire/iterator-utilities",
                  "typeArguments": []
                }
              },
              "extendsType": {
                "kind": "reference",
                "id": 187,
                "name": "IterableResolvable",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": [
                  {
                    "kind": "inferred",
                    "type": "T"
                  }
                ]
              },
              "trueType": {
                "kind": "reference",
                "id": null,
                "name": "T",
                "packageName": "@sapphire/iterator-utilities",
                "typeArguments": []
              },
              "falseType": {
                "kind": "intrinsic",
                "type": "never"
              }
            },
            "readonly": "-",
            "optional": null
          }
        ]
      }
    }
  ],
  "variables": []
}